/* Generated By:JavaCC: Do not edit this line. PromelaTokenManager.java */
package spinja.promela.compiler.parser;
import spinja.promela.compiler.*;
import spinja.promela.compiler.automaton.*;
import spinja.promela.compiler.expression.*;
import spinja.promela.compiler.variable.*;
import spinja.promela.compiler.actions.*;
import java.io.*;
import java.util.*;

/** Token Manager. */
public class PromelaTokenManager implements PromelaConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }

  /** The parser. */
  public Promela parser = null;
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_18()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_18(0x380000000L);
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_18(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         break;
      case 13:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_18(active2, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_18(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_18(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_18(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 161);
         break;
      default :
         break;
   }
   return jjStartNfa_18(1, 0L, 0L, active2);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 158)
                        kind = 158;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 158)
                     kind = 158;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 223);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 224;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 224;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 224)
                     kind = 224;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 207);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     kind = 206;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x70000L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_21()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_21(0x70000L);
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_21(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_21(active2, 0x70000L);
      default :
         break;
   }
   return jjStartNfa_21(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_21(active2, 0x30000L);
      case 110:
         return jjMoveStringLiteralDfa3_21(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_21(1, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa3_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(1, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(2, 0L, 0L, active2);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_21(active2, 0x40000L);
      case 105:
         return jjMoveStringLiteralDfa4_21(active2, 0x20000L);
      case 115:
         return jjMoveStringLiteralDfa4_21(active2, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_21(2, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa4_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(2, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(3, 0L, 0L, active2);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(4, 144);
         break;
      case 102:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(4, 145);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_21(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_21(3, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa5_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(3, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(4, 0L, 0L, active2);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(5, 146);
         break;
      default :
         break;
   }
   return jjStartNfa_21(4, 0L, 0L, active2);
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (curChar == 105)
                     jjCheckNAdd(1);
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if (curChar == 102 && kind > 143)
                     kind = 143;
                  break;
               case 2:
                  if (curChar == 101)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 105)
                     jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_20(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_20()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_20(0xe00000L);
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_20(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         break;
      case 13:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_20(active2, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_20(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_20(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_20(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         break;
      default :
         break;
   }
   return jjStartNfa_20(1, 0L, 0L, active2);
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 148)
                        kind = 148;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 148)
                     kind = 148;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 222);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     kind = 221;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_10()
{
   return jjMoveNfa_10(0, 0);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     kind = 204;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 205;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 205)
                     kind = 205;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_26(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_26(int pos, long active0, long active1)
{
   return jjMoveNfa_26(jjStopStringLiteralDfa_26(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_26()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 109);
      default :
         return jjMoveNfa_26(0, 0);
   }
}
private int jjMoveNfa_26(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 111;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 232);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 231;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 231;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 231)
                     kind = 231;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x2000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x800000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 227);
         break;
      case 47:
         if ((active3 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 229);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_17(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_17()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 166;
         return jjMoveStringLiteralDfa1_17(0x8000000000L);
      default :
         return jjMoveNfa_17(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_17(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      default :
         break;
   }
   return jjStartNfa_17(0, 0L, 0L, active2);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 168;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 0:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_19()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_19(0x1c000000L);
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_19(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 13:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_19(active2, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_19(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_19(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_19(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_19(1, 0L, 0L, active2);
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 153)
                        kind = 153;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 153)
                     kind = 153;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 225)
                        kind = 225;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 226)
                        kind = 226;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 226)
                     kind = 226;
                  break;
               case 2:
                  if (curChar == 10 && kind > 226)
                     kind = 226;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 225;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 225)
                     kind = 225;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 194;
         return jjMoveStringLiteralDfa1_13(0x8L);
      case 41:
         return jjStopAtPos(0, 197);
      case 44:
         return jjStopAtPos(0, 196);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_13(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(1, 195);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 214);
      case 44:
         return jjStopAtPos(0, 213);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     kind = 212;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 187;
         return jjMoveStringLiteralDfa1_14(0x1000000000000000L);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 188);
         break;
      default :
         break;
   }
   return jjStartNfa_14(0, 0L, 0L, active2);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 189;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 189)
                     kind = 189;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) != 0L)
                     kind = 209;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 210;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 210)
                     kind = 210;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_15()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 179;
         return jjMoveStringLiteralDfa1_15(0x10000000000000L);
      case 41:
         return jjStopAtPos(0, 182);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 180);
         break;
      default :
         break;
   }
   return jjStartNfa_15(0, 0L, 0L, active2);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 181;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 181)
                     kind = 181;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_16()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 172;
         return jjMoveStringLiteralDfa1_16(0x200000000000L);
      case 40:
         return jjStopAtPos(0, 174);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_16(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 173);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_25(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_25(int pos, long active0, long active1)
{
   return jjMoveNfa_25(jjStopStringLiteralDfa_25(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_25()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 112);
      default :
         return jjMoveNfa_25(0, 0);
   }
}
private int jjMoveNfa_25(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 114;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_23()
{
   return jjMoveNfa_23(0, 0);
}
private int jjMoveNfa_23(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 139)
                     kind = 139;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffffffffffeL) != 0L || (active1 & 0x1c0000000007L) != 0L)
         {
            jjmatchedKind = 115;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffff847fff00feL) != 0L || (active1 & 0x1c0000000007L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x7b8000ff00L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xfff6bf847d6f00feL) != 0L || (active1 & 0x1c0000000007L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0x9400002900000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x44000a044460000cL) != 0L || (active1 & 0x100000000005L) != 0L)
            return 1;
         if ((active0 & 0xbbf6b580390f00f2L) != 0L || (active1 & 0xc0000000002L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 3;
            }
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x23f6b180380600aaL) != 0L || (active1 & 0xc0000000002L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 4;
            return 1;
         }
         if ((active0 & 0x9800040001090050L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x2000318020000080L) != 0L || (active1 & 0x40000000002L) != 0L)
            return 1;
         if ((active0 & 0x3f680001806002aL) != 0L || (active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x72800000060000L) != 0L || (active1 & 0x80000000000L) != 0L)
            return 1;
         if ((active0 & 0x38400001800002aL) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 6;
            }
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x38400001800002aL) != 0L)
            return 1;
         if ((active0 & 0x20000000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 115;
               jjmatchedPos = 7;
            }
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x120000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x120000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x120000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000000L) != 0L)
            return 1;
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200008000L, 0x0L);
      case 34:
         return jjStopAtPos(0, 230);
      case 35:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x1fL);
      case 37:
         return jjStopAtPos(0, 88);
      case 38:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 70);
      case 41:
         return jjStopAtPos(0, 71);
      case 42:
         return jjStopAtPos(0, 86);
      case 43:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 77);
      case 45:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000004000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 105);
      case 47:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000000000L, 0x0L);
      case 58:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 59:
         return jjStopAtPos(0, 76);
      case 60:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x24000000L, 0x0L);
      case 61:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 62:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x88000000L, 0x0L);
      case 63:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 82);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4700L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xb800L, 0x0L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 72);
      case 93:
         return jjStopAtPos(0, 73);
      case 94:
         return jjStopAtPos(0, 99);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x208000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000700000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x12000000000L, 0x80000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x802020400000040L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8400001000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80200000cL, 0x40000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3001000000020010L, 0x100000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4200000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4100018800002L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1f0000041000020L, 0x1L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4000800000050000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 67);
      case 124:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 68);
      case 126:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      case 38:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 42:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 43:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 45:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 47:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         break;
      case 58:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 60:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 61:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 62:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 63:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 70:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 1);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 1);
         break;
      case 71:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 1);
         break;
      case 85:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 1);
         break;
      case 88:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 1);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 1);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f4000000000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000L, active2, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200400000000090L, active1, 0xc000080000000000L, active2, 0x1L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x45000000L, active1, 0L, active2, 0L);
      case 105:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x800020900000L, active1, 0x3800000000000000L, active2, 0x10L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000200000cL, active1, 0x40000000002L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000220000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000020L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000140018010042L, active1, 0L, active2, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000080000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x408000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x440000L, active1, 0L, active2, 0L);
      case 124:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000404010000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x100000000000L, active2, 0x8L);
      case 102:
         if ((active1 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3000080000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x1f0000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000800000cL, active1, 0x5L, active2, 0x6L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000000000000L, active1, 0xc000040000000002L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000800000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0x11L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8051200022L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000040000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x230000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 1);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000420000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x10L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x1f0000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10002L, active1, 0L, active2, 0x10L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x1000000000000000L, active2, 0x1L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200a00000040010L, active1, 0x2L, active2, 0L);
      case 102:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0x80000c0000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x2000000000000000L, active2, 0x2L);
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000040L, active1, 0L, active2, 0L);
      case 112:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000080000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1020020L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x4000000000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800010000000008L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000000L, active1, 0L, active2, 0L);
      case 119:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x34000000020020L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x2000000000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 1);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 1);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(4, 126);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(4, 129);
         else if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(4, 130);
         return jjMoveStringLiteralDfa5_0(active0, 0x180010020000000L, active1, 0x1000000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(4, 127);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8010000000L, active1, 0L, active2, 0x9L);
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         break;
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc0000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 1);
         else if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x200200008000000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000100000000002L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000020L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x42000000040000L, active1, 0x2000080000000000L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 1);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 124);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(5, 128);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 1);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L, active2, 0x10L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 1);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x2L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 1);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 1);
         else if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(6, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0x180000010000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 1);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 125);
         break;
      case 105:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000020L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000008000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, active2, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active2, 0L);
      case 99:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 1);
         else if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 1);
         break;
      case 101:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 1, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 1);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(7, 132);
         break;
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, active2, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, 0L, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, 0L, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, 0L, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 53, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 112:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 56, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff401000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 201);
      case 125:
         return jjStopAtPos(0, 202);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 200);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 199)
                        kind = 199;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 199)
                     kind = 199;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2, active3), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_6(0xe000000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active3 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 217);
         break;
      case 13:
         if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active3, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa2_6(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_6(0, 0L, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active3 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 219);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, 0L, 0L, 0L, active3);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 216)
                        kind = 216;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 216)
                     kind = 216;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_24(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_24(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_24(jjStopStringLiteralDfa_24(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_24()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_24(0x380L);
      default :
         return jjMoveNfa_24(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_24(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_24(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(1, 135);
         break;
      case 13:
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_24(active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_24(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_24(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_24(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_24(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(2, 137);
         break;
      default :
         break;
   }
   return jjStartNfa_24(1, 0L, 0L, active2);
}
private int jjMoveNfa_24(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 134)
                        kind = 134;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 134)
                     kind = 134;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_22()
{
   return jjMoveNfa_22(0, 0);
}
private int jjMoveNfa_22(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 141)
                        kind = 141;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 141)
                     kind = 141;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   5, 6, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\160\162\157\143\164\171\160\145", "\151\156\151\164", 
"\151\156\151\164\160\162\157\143", "\156\145\166\145\162", "\163\160\157\162\141\144\151\143", 
"\145\162\162\157\162", "\166\145\162\151\146\171", "\101\130", "\101\106", "\101\107", "\105\130", 
"\105\106", "\105\107", "\101\125", "\105\125", "\164\162\141\143\145", 
"\156\157\164\162\141\143\145", "\164\171\160\145\144\145\146", "\155\164\171\160\145", "\142\151\164", 
"\142\157\157\154", "\142\171\164\145", "\160\151\144", "\163\150\157\162\164", "\151\156\164", 
"\143\150\141\156", "\160\162\151\157\162\151\164\171", "\160\162\157\166\151\144\145\144", 
"\150\151\144\144\145\156", "\163\150\157\167", "\170\162", "\170\163", "\157\146", "\145\166\141\154", 
"\151\146", "\146\151", "\144\157", "\157\144", "\141\164\157\155\151\143", 
"\144\137\163\164\145\160", "\145\154\163\145", "\142\162\145\141\153", "\147\157\164\157", 
"\160\162\151\156\164\146", "\141\163\163\145\162\164", "\154\145\156", "\164\151\155\145\157\165\164", 
"\156\160\137", "\145\156\141\142\154\145\144", "\160\143\137\166\141\154\165\145", 
"\162\165\156", "\163\143\150\137\141\160\151", 
"\163\143\150\137\141\160\151\137\163\145\154\146", "\163\143\150\137\147\145\164", "\163\143\150\137\145\170\145\143", 
"\163\143\150\137\145\170\145\143\137\143\157\155\160", "\107\145\156\145\162\141\164\145", "\146\165\154\154", 
"\145\155\160\164\171", "\156\146\165\154\154", "\156\145\155\160\164\171", "\164\162\165\145", 
"\146\141\154\163\145", "\163\153\151\160", "\165\156\154\145\163\163", "\137\160\151\144", "\173", 
"\175", "\75", "\50", "\51", "\133", "\135", "\72\72", "\72", "\73", "\54", "\55\76", 
"\41\41", "\77", "\77\77", "\100", "\176", "\41", "\55", "\52", "\57", "\45", "\53", 
"\74\74", "\76\76", "\74", "\74\75", "\76", "\76\75", "\75\75", "\41\75", "\46", "\136", 
"\174", "\46\46", "\174\174", "\53\53", "\55\55", "\56", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_STRING",
   "IN_COMMENT",
   "IN_COMMENT2",
   "PREPROCESSOR_INCLUDE_FILE",
   "PREPROCESSOR_INCLUDE",
   "PREPROCESSOR_DEFINE_REST",
   "PREPROCESSOR_DEFINE_PARAM2",
   "PREPROCESSOR_DEFINE_PARAM1",
   "PREPROCESSOR_DEFINE_PARAM",
   "PREPROCESSOR_DEFINE",
   "PREPROCESSOR_INLINE_REST",
   "PREPROCESSOR_INLINE_TEXT",
   "PREPROCESSOR_INLINE_PARAM2",
   "PREPROCESSOR_INLINE_PARAM1",
   "PREPROCESSOR_INLINE_PARAM0",
   "PREPROCESSOR_INLINE_PARAM",
   "PREPROCESSOR_INLINE",
   "PREPROCESSOR_LINE",
   "PREPROCESSOR_FILE",
   "PREPROCESSOR_ELIF_SKIP",
   "PREPROCESSOR_SKIP",
   "PREPROCESSOR_IFNDEF",
   "PREPROCESSOR_IFDEF",
   "PREPROCESSOR_IF",
   "PREPROCESSOR_NDEFINED",
   "PREPROCESSOR_DEFINED",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 17, 26, 25, -1, -1, 0, -1, -1, 0, -1, -1, -1, -1, -1, -1, 2, 3, 24, 23, 
   22, -1, -1, -1, 19, 18, 10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 
   -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, 15, 
   -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 14, 12, -1, -1, 
   11, -1, -1, -1, -1, 9, -1, 8, 6, -1, 7, 6, -1, 8, 6, 6, 0, -1, -1, -1, -1, -1, 4, 0, -1, 
   -1, 0, -1, -1, -1, 1, -1, 0, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1803ffffffffffL, 0x0L, 0x10000000000L, 
};
static final long[] jjtoSkip = {
   0x0L, 0xffe7fc0000000000L, 0xfffffff8421fa87fL, 0x3e810001ffL, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x7bde05780L, 0xc17efffe00L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[7];
private final int[] jjstateSet = new int[14];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;

/** Constructor with parser. */
public PromelaTokenManager(Promela parserArg, SimpleCharStream stream){
   parser = parserArg;
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor with parser. */
public PromelaTokenManager(Promela parserArg, SimpleCharStream stream, int lexState){
   this(parserArg, stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 7; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 27 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      TokenLexicalActions(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 228)
         {
            jjmatchedKind = 228;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 220)
         {
            jjmatchedKind = 220;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 215)
         {
            jjmatchedKind = 215;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 211)
         {
            jjmatchedKind = 211;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 208)
         {
            jjmatchedKind = 208;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 203)
         {
            jjmatchedKind = 203;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         if (jjmatchedPos == 0 && jjmatchedKind > 198)
         {
            jjmatchedKind = 198;
         }
         break;
       case 14:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         if (jjmatchedPos == 0 && jjmatchedKind > 190)
         {
            jjmatchedKind = 190;
         }
         break;
       case 15:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         if (jjmatchedPos == 0 && jjmatchedKind > 183)
         {
            jjmatchedKind = 183;
         }
         break;
       case 16:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         if (jjmatchedPos == 0 && jjmatchedKind > 175)
         {
            jjmatchedKind = 175;
         }
         break;
       case 17:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         break;
       case 18:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         if (jjmatchedPos == 0 && jjmatchedKind > 162)
         {
            jjmatchedKind = 162;
         }
         break;
       case 19:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_19();
         if (jjmatchedPos == 0 && jjmatchedKind > 157)
         {
            jjmatchedKind = 157;
         }
         break;
       case 20:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_20();
         if (jjmatchedPos == 0 && jjmatchedKind > 152)
         {
            jjmatchedKind = 152;
         }
         break;
       case 21:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_21();
         if (jjmatchedPos == 0 && jjmatchedKind > 147)
         {
            jjmatchedKind = 147;
         }
         break;
       case 22:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_22();
         if (jjmatchedPos == 0 && jjmatchedKind > 142)
         {
            jjmatchedKind = 142;
         }
         break;
       case 23:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_23();
         if (jjmatchedPos == 0 && jjmatchedKind > 140)
         {
            jjmatchedKind = 140;
         }
         break;
       case 24:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_24();
         if (jjmatchedPos == 0 && jjmatchedKind > 138)
         {
            jjmatchedKind = 138;
         }
         break;
       case 25:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_25();
         break;
       case 26:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_26();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 109 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.level++;
        image.setLength(0);
         break;
      case 111 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        String defined = image.toString().trim();
                while (0 != Preprocessor.level) {
                        Preprocessor.level--;
                        if (PromelaConstants.RPAREN != getNextToken().kind)
                                throw new AssertionError("Missing closing parenthesis after defined.");
                }
                // reinitialize input_stream
            String newText = null != Preprocessor.defines(defined) ? "true" : "false";
            int line = input_stream.getEndLine();
            int column = input_stream.getEndColumn();
            ByteArrayInputStream is2 = new ByteArrayInputStream(newText.getBytes());
            Preprocessor.current.push(null);
        Preprocessor.files.push(Preprocessor.getFileName());
            Preprocessor.preprocessing.push(input_stream);
                ReInit(new SimpleCharStream(is2, line, column));
         break;
      case 112 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.level++;
        image.setLength(0);
         break;
      case 114 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        defined = image.toString().trim();
        while (0 != Preprocessor.level) {
            Preprocessor.level--;
            if (PromelaConstants.RPAREN != getNextToken().kind)
                throw new AssertionError("Missing closing parenthesis after defined.");
        }
        // reinitialize input_stream
        newText = null != Preprocessor.defines(defined) ? "false" : "true";
        line = input_stream.getEndLine();
        column = input_stream.getEndColumn();
        is2 = new ByteArrayInputStream(newText.getBytes());
        Preprocessor.current.push(null);
        Preprocessor.files.push(Preprocessor.getFileName());
        Preprocessor.preprocessing.push(input_stream);
        ReInit(new SimpleCharStream(is2, line, column));
         break;
      case 121 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               Preprocessor.level++;
         break;
      case 126 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Boolean b = Preprocessor.ifs.peek();
        if (null == b) {
            throw new AssertionError("Spurious null in #if");
        } else if (true == b.booleanValue()) {
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // if was true, ignore else
        } else {
                throw new AssertionError("Spurious false in DEFAULT else");
            //SwitchTo(PromelaConstants.DEFAULT); // if was false, parse else
        }
         break;
      case 127 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.ifs.peek();
        Boolean b3 = Preprocessor.ifs.peek();
        if (null == b3) {
            throw new AssertionError("Spurious null in DEFAULT #elif");
        } else if (true == b3.booleanValue()) {
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // if was true, ignore else
        } else {
                throw new AssertionError("Unexpected false else in DEFAULT");
        }
         break;
      case 128 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (null == Preprocessor.ifs.pop()) { // pop last if
            throw new AssertionError("Spurious null in #if");
        } else {
            SwitchTo(PromelaConstants.DEFAULT); // end ITE
        }
         break;
      case 134 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           // constant expression is read
        InputStream is = new ByteArrayInputStream(image.toString().getBytes());
        Preprocessor.preprocessing.push(null);
        Preprocessor.files.push(Preprocessor.getFileName());
        Promela prom = new Promela(parser, is); // start new parser for condition
        try {
            Expression expr = prom.expr();
            int num = expr.getConstantValue();
            if (0 != num) { // true
                Preprocessor.ifs.push(true);
                SwitchTo(PromelaConstants.DEFAULT); // parse if until else/endif
            } else { // false
                Preprocessor.ifs.push(false);
                SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // ignore if until else/enfi
            }
        } catch (Exception e) {
            throw new AssertionError("Failed to parse #if "+ image.toString()+ e);
        }
         break;
      case 139 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           // define name is read
        String def = image.toString().trim();
        if (null != Preprocessor.defines(def)) { // true
            Preprocessor.ifs.push(true);
            SwitchTo(PromelaConstants.DEFAULT); // parse if until else/endif
        } else { // false
            Preprocessor.ifs.push(false);
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // ignore if until else/enfi
        }
         break;
      case 141 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           // define name is read
        def = image.toString().trim();
        if (null == Preprocessor.defines(def)) { // true
            Preprocessor.ifs.push(true);
            SwitchTo(PromelaConstants.DEFAULT); // parse if until else/endif
        } else { // false
            Preprocessor.ifs.push(false);
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // ignore if until else/enfi
        }
         break;
      case 143 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         Preprocessor.ifs.push(null);
         break;
      case 144 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Boolean b2 = Preprocessor.ifs.peek();
        if (null == b2) {
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // ignore else
        } else if (true == b2.booleanValue()) {
                SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // (elif was true) ignore else
        } else {
            SwitchTo(PromelaConstants.DEFAULT);
        }
         break;
      case 146 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (null == Preprocessor.ifs.pop()) { // pop last if
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // keep ignoring input
        } else { // maybe false of true:
            SwitchTo(PromelaConstants.DEFAULT); // end ITE
        }
         break;
      case 148 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           // constant expression is read
        Boolean b1 = Preprocessor.ifs.peek();
        if (null == b1) { // bogus if
                SwitchTo(PromelaConstants.PREPROCESSOR_SKIP);
        } else if (true == b1.booleanValue()) { // another if condition was true already
            SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // parse if until endif
        } else { // current if statement has thusfar not been true
                Preprocessor.preprocessing.push(null);
                InputStream is3 = new ByteArrayInputStream(image.toString().getBytes());
                Promela prom2 = new Promela(parser, is3); // start new parser for condition
                try {
                    Expression expr = prom2.expr();
                    int num = expr.getConstantValue(); // check condition
                if (0 != num) { // true
                                Preprocessor.ifs.pop();
                        Preprocessor.ifs.push(true);
                        SwitchTo(PromelaConstants.DEFAULT); // parse elif until else/endif
                } else { //false
                        SwitchTo(PromelaConstants.PREPROCESSOR_SKIP); // skip until elif/endif
                }
                } catch (Exception e) {
                int line1 = input_stream.getEndLine();
                    throw new AssertionError("Failed to parse #elif at "+ line1 +":"+ e);
                }
        }
         break;
      case 153 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.file(input_stream, image.toString());
         break;
      case 158 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.line(input_stream, image.toString());
         break;
      case 168 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.define.name = image.toString();
         break;
      case 175 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              if (true){throw new AssertionError("Parsing of inline parameters failed for inline: "+ Preprocessor.define.name);}
         break;
      case 181 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.define.parameters.add(image.toString().trim());
         break;
      case 183 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              if (true){throw new AssertionError("Parsing of inline parameters failed for inline: "+ Preprocessor.define.name);}
         break;
      case 189 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.define.parameters.add(image.toString().trim());
         break;
      case 190 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              if (true){throw new AssertionError("Parsing of inline parameters failed for inline: "+ Preprocessor.define.name);}
         break;
      case 198 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
              if (true){throw new AssertionError("Parsing of inline parameters failed for inline: "+ Preprocessor.define.name);}
         break;
      case 200 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            if (Preprocessor.level != 0) throw new AssertionError("Unexpected");
            Preprocessor.level++;
            Preprocessor.define.line = input_stream.getEndLine();
            Preprocessor.define.column = input_stream.getEndColumn();
         break;
      case 216 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           // add define text (and parameters) to preprocessor        // unlike inlines, defines have not necessarily empty parentheses
        String define = image.toString();
        boolean inline = define.startsWith("()");
        if (inline) define = define.substring(2);
        Preprocessor.addDefine(define, inline);
         break;
      case 223 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        String file = Preprocessor.parseFile(image.toString());
        // create new virtual input stream and push the previous one to a stack
        Preprocessor.preprocessing.push(input_stream);
        Preprocessor.current.push(null);
        Preprocessor.files.push(Preprocessor.getFileName());
        Preprocessor.setFilename(image.toString().trim().replaceAll("^\u005c"|\u005c"$", ""));
        try { // switch input stream
            ReInit(new SimpleCharStream(new FileInputStream(file)));
        } catch (FileNotFoundException fne) { throw new AssertionError(fne); }
        if (matchedToken == null) return;
        // override TOKEN result with next token after id (+ arguments).
        Token next = getNextToken();
        matchedToken.image = next.image;
        matchedToken.kind = next.kind;
        matchedToken.next = next.next;
        matchedToken.specialToken = next.specialToken;
         break;
      case 227 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
               Preprocessor.level++;
         break;
      case 229 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                Preprocessor.level--;
                if (0 == Preprocessor.level) {
                        SwitchTo(PromelaConstants.DEFAULT);
                } else {
                        SwitchTo(PromelaConstants.IN_COMMENT);
                }
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 135 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 136 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 137 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              image = image.deleteCharAt(image.length()-3);
         break;
      case 149 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 150 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 151 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              image = image.deleteCharAt(image.length()-3);
         break;
      case 201 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              Preprocessor.level++;
         break;
      case 202 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        Preprocessor.level--;
        if (0 == Preprocessor.level) {
                image.setLength(image.length() - 1); // remove '}'
                // add inline to preprocessor defines
                Preprocessor.addDefine(image.toString(), true);
            SwitchTo(PromelaConstants.DEFAULT);
        } else {
            SwitchTo(PromelaConstants.PREPROCESSOR_INLINE_REST);
        }
         break;
      case 205 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        Preprocessor.backup(input_stream, image);
         break;
      case 207 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        Preprocessor.define.length += image.length();
        image.setLength(0);
         break;
      case 208 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              // parsing failed, restore input_stream to initial state
        Preprocessor.restore(input_stream, image);
         break;
      case 210 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        Preprocessor.define.parameters.add(image.toString().trim());
        Preprocessor.define.length += image.length();
        image.setLength(0);
         break;
      case 211 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              // parsing failed, restore input_stream to initial state
        Preprocessor.restore(input_stream, image);
         break;
      case 213 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        Preprocessor.define.length += image.length();
        image.setLength(0);
         break;
      case 214 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        image.setLength(0);
         break;
      case 215 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              // parsing failed, restore input_stream to initial state
        Preprocessor.restore(input_stream, image);
         break;
      case 217 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 218 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
            image = image.deleteCharAt(image.length()-2);
         break;
      case 219 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
              image = image.deleteCharAt(image.length()-3);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
      image.setLength(0);
        if (!Preprocessor.preprocessing.empty()) {
            SimpleCharStream scs = Preprocessor.preprocessing.pop();
            Preprocessor.setFilename(Preprocessor.files.pop());
            if (null == scs) return; // #if, no need to restore, since a recursive parser was launched
            Preprocessor.DefineMapping current = Preprocessor.current.pop();
            if (null != current && current.size() > 0) {
                Preprocessor.removeDefines();
            }
            ReInit(scs);
            Token next = getNextToken();
            matchedToken.image = next.image;
            matchedToken.kind = next.kind;
            matchedToken.next = next.next;
            matchedToken.specialToken = next.specialToken;
        } else {
            if (!Preprocessor.ifs.empty()) {
                throw new AssertionError("Missing #endif");
            }
                Preprocessor.DefineMapping current = Preprocessor.defines("__include_end");
                if (null != current) { // Identifier is defined in preprocessor
                    // switch to a virtual stream and push the previous stream on a stack
                    ByteArrayInputStream is = new ByteArrayInputStream(current.defineText.getBytes());
                    ReInit(new SimpleCharStream(is, current.line, current.column));
                    // override TOKEN result with next token
                    Token next = getNextToken();
                    matchedToken.image = next.image;
                    matchedToken.kind = next.kind;
                    matchedToken.next = next.next;
                    matchedToken.specialToken = next.specialToken;
                    Preprocessor.removeDefine("__include_end");
                }
        }
         break;
      case 115 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        Preprocessor.DefineMapping current = Preprocessor.defines(image.toString());
        if (null != current) { // Identifier is defined in preprocessor
            Preprocessor.current.push(current);
                Preprocessor.files.push(Preprocessor.getFileName());
            Preprocessor.preprocessing.push(input_stream);
            // parse arguments (or only parantheses for inline)
            if (current.size() > 0 || current.inline) {
                int level = 0;
                String text = "";
loop:           while (true) {
                    Token next = getNextToken();
                    text += next.image;
                    switch (next.kind) {
                    case PromelaConstants.LPAREN: level++; break;
                    case PromelaConstants.RPAREN: level--; if (0 == level) break loop;
                    }
                }
                text = text.substring(1, text.length()-1); // delete parentheses
                        String split[] = text.split(",");
                        if (text.length() != 0 && split.length != current.size())
                            throw new AssertionError("Mismatching "+ current.name +" --> '"+ current.defineText +"' with \u005c""+ text +"\u005c"");
                        int i = 0;
                        // bind arguments to parameters via preprocessor
                        if (current.size() > 0) // arguments need to be bound on a new scope
                                Preprocessor.pushDefines();
                        for (String param : current.parameters) {
                            if (param.equals(split[i])) { // no rename required here
                                i++;
                                continue; // avoid inf. recursion
                            }
                            Preprocessor.define.name = param;
                            Preprocessor.addDefine(split[i++], false);
                        }
            }
            // switch to a virtual stream and push the previous stream on a stack
                    ByteArrayInputStream is = new ByteArrayInputStream(current.defineText.getBytes());
                    ReInit(new SimpleCharStream(is, current.line, current.column));
            // override TOKEN result with next token after id (+ arguments).
            Token next = getNextToken();
            matchedToken.image = next.image;
            matchedToken.kind = next.kind;
            matchedToken.next = next.next;
            matchedToken.specialToken = next.specialToken;
        }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
