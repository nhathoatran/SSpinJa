/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import scheduling.dsl.ASSIGN;
import scheduling.dsl.Action;
import scheduling.dsl.And;
import scheduling.dsl.ArrayDec;
import scheduling.dsl.AssertStatement;
import scheduling.dsl.AssignParameters;
import scheduling.dsl.Atomic;
import scheduling.dsl.AttDef;
import scheduling.dsl.Attribute;
import scheduling.dsl.Behavior;
import scheduling.dsl.BlockStatement;
import scheduling.dsl.BoolConstant;
import scheduling.dsl.BoolValue;
import scheduling.dsl.BranchID;
import scheduling.dsl.CTL_AT;
import scheduling.dsl.CallFunction;
import scheduling.dsl.ChanDec;
import scheduling.dsl.ChangeAction;
import scheduling.dsl.ChangeListValue;
import scheduling.dsl.ChangeValue;
import scheduling.dsl.ChangeValueExpression;
import scheduling.dsl.ChangeValueUnOp;
import scheduling.dsl.CheckPoint;
import scheduling.dsl.CollectionInit;
import scheduling.dsl.CompVarDef;
import scheduling.dsl.CompVarDefination;
import scheduling.dsl.CompVarName;
import scheduling.dsl.ComparationDef;
import scheduling.dsl.ComparationName;
import scheduling.dsl.Comparison;
import scheduling.dsl.Component;
import scheduling.dsl.Condition;
import scheduling.dsl.Config;
import scheduling.dsl.ConfigProcess;
import scheduling.dsl.Configs;
import scheduling.dsl.Configuration;
import scheduling.dsl.ConstDec;
import scheduling.dsl.Constraint;
import scheduling.dsl.Constraints;
import scheduling.dsl.Constructor;
import scheduling.dsl.Contains;
import scheduling.dsl.CurentCore;
import scheduling.dsl.DataBlockDef;
import scheduling.dsl.DataDef;
import scheduling.dsl.DataSingleDef;
import scheduling.dsl.DeclareEvent;
import scheduling.dsl.DeclareList;
import scheduling.dsl.DeclareProcess;
import scheduling.dsl.DefBehaviorProc;
import scheduling.dsl.DefCore;
import scheduling.dsl.Define;
import scheduling.dsl.Directory;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ELABEL;
import scheduling.dsl.ELSEs;
import scheduling.dsl.ENAME;
import scheduling.dsl.Element;
import scheduling.dsl.EmptyExpression;
import scheduling.dsl.EnumDec;
import scheduling.dsl.EnumType;
import scheduling.dsl.Equality;
import scheduling.dsl.Event;
import scheduling.dsl.EventDef;
import scheduling.dsl.EventFunction;
import scheduling.dsl.EventOpt;
import scheduling.dsl.EventStm;
import scheduling.dsl.EventTemplate;
import scheduling.dsl.ExecuteProcess;
import scheduling.dsl.ExistExpression;
import scheduling.dsl.ExistP;
import scheduling.dsl.ExistPID;
import scheduling.dsl.Expression;
import scheduling.dsl.FileExtension;
import scheduling.dsl.FileName;
import scheduling.dsl.Flow;
import scheduling.dsl.FullExpression;
import scheduling.dsl.FuncPara;
import scheduling.dsl.Function;
import scheduling.dsl.FunctionName;
import scheduling.dsl.GUARD;
import scheduling.dsl.GenCodeStatement;
import scheduling.dsl.GenComponent;
import scheduling.dsl.GenConfiguration;
import scheduling.dsl.GenDSL;
import scheduling.dsl.GenLnCodeStatement;
import scheduling.dsl.GenPart;
import scheduling.dsl.Generate;
import scheduling.dsl.GenerateOption;
import scheduling.dsl.GetIDExpression;
import scheduling.dsl.GetInstance;
import scheduling.dsl.GetName;
import scheduling.dsl.GetPID;
import scheduling.dsl.GetProcess;
import scheduling.dsl.HandlerDef;
import scheduling.dsl.HasID;
import scheduling.dsl.HasIDINT;
import scheduling.dsl.HasNameExpression;
import scheduling.dsl.IFs;
import scheduling.dsl.ISR;
import scheduling.dsl.IfDef;
import scheduling.dsl.IfStatement;
import scheduling.dsl.Implies;
import scheduling.dsl.InExpression;
import scheduling.dsl.InPExpression;
import scheduling.dsl.InPIDExpression;
import scheduling.dsl.InstanceID;
import scheduling.dsl.IntConstant;
import scheduling.dsl.InterfaceDef;
import scheduling.dsl.InterfaceFunction;
import scheduling.dsl.InterfaceParameterDeclare;
import scheduling.dsl.InterfaceParameterList;
import scheduling.dsl.Invariants;
import scheduling.dsl.Invariatnts;
import scheduling.dsl.JavaCode;
import scheduling.dsl.LTE;
import scheduling.dsl.List;
import scheduling.dsl.ListDef;
import scheduling.dsl.ListElement;
import scheduling.dsl.LoopProcess;
import scheduling.dsl.Method;
import scheduling.dsl.Minus;
import scheduling.dsl.Model;
import scheduling.dsl.MoveProcess;
import scheduling.dsl.MulOrDiv;
import scheduling.dsl.ND_Behavior;
import scheduling.dsl.NewElement;
import scheduling.dsl.NewProcessStatement;
import scheduling.dsl.Not;
import scheduling.dsl.NullExpression;
import scheduling.dsl.NumValue;
import scheduling.dsl.OneDec;
import scheduling.dsl.Opt;
import scheduling.dsl.Options;
import scheduling.dsl.Or;
import scheduling.dsl.OrderingDef;
import scheduling.dsl.ParaListItem;
import scheduling.dsl.ParaValue;
import scheduling.dsl.ParameterAssign;
import scheduling.dsl.ParameterList;
import scheduling.dsl.ParameterName;
import scheduling.dsl.PeriodicProcess;
import scheduling.dsl.Permutation;
import scheduling.dsl.Plus;
import scheduling.dsl.PointID;
import scheduling.dsl.PrintLogStatement;
import scheduling.dsl.PrintStatement;
import scheduling.dsl.ProcType;
import scheduling.dsl.ProcessBehavior;
import scheduling.dsl.ProcessBehaviors;
import scheduling.dsl.ProcessConfig;
import scheduling.dsl.ProcessConfiguration;
import scheduling.dsl.ProcessDSL;
import scheduling.dsl.ProcessDataDef;
import scheduling.dsl.ProcessDef;
import scheduling.dsl.ProcessGeneration;
import scheduling.dsl.ProcessID;
import scheduling.dsl.ProcessInit;
import scheduling.dsl.ProcessName;
import scheduling.dsl.ProcessPropertyDef;
import scheduling.dsl.ProcessPropertyName;
import scheduling.dsl.ProcessType;
import scheduling.dsl.Proper;
import scheduling.dsl.PropertyAssignment;
import scheduling.dsl.QualifiedNames;
import scheduling.dsl.RTCTL;
import scheduling.dsl.Range;
import scheduling.dsl.RefList;
import scheduling.dsl.RefListItem;
import scheduling.dsl.RemoveProcess;
import scheduling.dsl.ReorderProcess;
import scheduling.dsl.ReturnStatement;
import scheduling.dsl.Rule;
import scheduling.dsl.Rules;
import scheduling.dsl.SKIP;
import scheduling.dsl.Scenarios;
import scheduling.dsl.SchedulerCollectionDef;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.SchedulerDataDef;
import scheduling.dsl.SchedulerDef;
import scheduling.dsl.SchedulerInit;
import scheduling.dsl.SchedulerPropertyDef;
import scheduling.dsl.SchedulerPropertyName;
import scheduling.dsl.SchedulerSet;
import scheduling.dsl.SequenceAction;
import scheduling.dsl.Set;
import scheduling.dsl.SetExecTime;
import scheduling.dsl.SetProcess;
import scheduling.dsl.SetProcessInstance;
import scheduling.dsl.SetReturnCol;
import scheduling.dsl.SetReturnSet;
import scheduling.dsl.SetTemplate;
import scheduling.dsl.Specification;
import scheduling.dsl.SporadicProcess;
import scheduling.dsl.StateID;
import scheduling.dsl.Statement;
import scheduling.dsl.Step;
import scheduling.dsl.StepGeneration;
import scheduling.dsl.Stm;
import scheduling.dsl.SysVar;
import scheduling.dsl.Template;
import scheduling.dsl.TestDSL;
import scheduling.dsl.TestPart;
import scheduling.dsl.TotalStep;
import scheduling.dsl.VDec;
import scheduling.dsl.Value;
import scheduling.dsl.VarBlockDef;
import scheduling.dsl.VarDec;
import scheduling.dsl.VarDecl;
import scheduling.dsl.VarDef;
import scheduling.dsl.VarDefinition;
import scheduling.dsl.VarInit;
import scheduling.dsl.VarName;
import scheduling.dsl.VarSingleDef;
import scheduling.dsl.Verify;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see scheduling.dsl.DslPackage
 * @generated
 */
public class DslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DslSwitch<Adapter> modelSwitch =
    new DslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseGenDSL(GenDSL object)
      {
        return createGenDSLAdapter();
      }
      @Override
      public Adapter caseISR(ISR object)
      {
        return createISRAdapter();
      }
      @Override
      public Adapter caseTestDSL(TestDSL object)
      {
        return createTestDSLAdapter();
      }
      @Override
      public Adapter caseConfigs(Configs object)
      {
        return createConfigsAdapter();
      }
      @Override
      public Adapter caseConfig(Config object)
      {
        return createConfigAdapter();
      }
      @Override
      public Adapter caseConfiguration(Configuration object)
      {
        return createConfigurationAdapter();
      }
      @Override
      public Adapter caseVarInit(VarInit object)
      {
        return createVarInitAdapter();
      }
      @Override
      public Adapter caseCollectionInit(CollectionInit object)
      {
        return createCollectionInitAdapter();
      }
      @Override
      public Adapter caseScenarios(Scenarios object)
      {
        return createScenariosAdapter();
      }
      @Override
      public Adapter casePermutation(Permutation object)
      {
        return createPermutationAdapter();
      }
      @Override
      public Adapter caseFlow(Flow object)
      {
        return createFlowAdapter();
      }
      @Override
      public Adapter caseENAME(ENAME object)
      {
        return createENAMEAdapter();
      }
      @Override
      public Adapter caseRules(Rules object)
      {
        return createRulesAdapter();
      }
      @Override
      public Adapter caseRule(Rule object)
      {
        return createRuleAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseSpecification(Specification object)
      {
        return createSpecificationAdapter();
      }
      @Override
      public Adapter caseDeclareList(DeclareList object)
      {
        return createDeclareListAdapter();
      }
      @Override
      public Adapter caseOneDec(OneDec object)
      {
        return createOneDecAdapter();
      }
      @Override
      public Adapter caseEnumDec(EnumDec object)
      {
        return createEnumDecAdapter();
      }
      @Override
      public Adapter caseEnumType(EnumType object)
      {
        return createEnumTypeAdapter();
      }
      @Override
      public Adapter caseConstDec(ConstDec object)
      {
        return createConstDecAdapter();
      }
      @Override
      public Adapter caseVarDec(VarDec object)
      {
        return createVarDecAdapter();
      }
      @Override
      public Adapter caseVDec(VDec object)
      {
        return createVDecAdapter();
      }
      @Override
      public Adapter caseArrayDec(ArrayDec object)
      {
        return createArrayDecAdapter();
      }
      @Override
      public Adapter caseChanDec(ChanDec object)
      {
        return createChanDecAdapter();
      }
      @Override
      public Adapter caseDefine(Define object)
      {
        return createDefineAdapter();
      }
      @Override
      public Adapter caseRefList(RefList object)
      {
        return createRefListAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseRefListItem(RefListItem object)
      {
        return createRefListItemAdapter();
      }
      @Override
      public Adapter caseFuncPara(FuncPara object)
      {
        return createFuncParaAdapter();
      }
      @Override
      public Adapter caseDeclareEvent(DeclareEvent object)
      {
        return createDeclareEventAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseEventFunction(EventFunction object)
      {
        return createEventFunctionAdapter();
      }
      @Override
      public Adapter caseParaListItem(ParaListItem object)
      {
        return createParaListItemAdapter();
      }
      @Override
      public Adapter caseELABEL(ELABEL object)
      {
        return createELABELAdapter();
      }
      @Override
      public Adapter caseSequenceAction(SequenceAction object)
      {
        return createSequenceActionAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseGUARD(GUARD object)
      {
        return createGUARDAdapter();
      }
      @Override
      public Adapter caseIFs(IFs object)
      {
        return createIFsAdapter();
      }
      @Override
      public Adapter caseASSIGN(ASSIGN object)
      {
        return createASSIGNAdapter();
      }
      @Override
      public Adapter caseOptions(Options object)
      {
        return createOptionsAdapter();
      }
      @Override
      public Adapter caseELSEs(ELSEs object)
      {
        return createELSEsAdapter();
      }
      @Override
      public Adapter caseSKIP(SKIP object)
      {
        return createSKIPAdapter();
      }
      @Override
      public Adapter caseProcessConfiguration(ProcessConfiguration object)
      {
        return createProcessConfigurationAdapter();
      }
      @Override
      public Adapter caseDefBehaviorProc(DefBehaviorProc object)
      {
        return createDefBehaviorProcAdapter();
      }
      @Override
      public Adapter caseProcType(ProcType object)
      {
        return createProcTypeAdapter();
      }
      @Override
      public Adapter caseProcessType(ProcessType object)
      {
        return createProcessTypeAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseAttDef(AttDef object)
      {
        return createAttDefAdapter();
      }
      @Override
      public Adapter caseConstraints(Constraints object)
      {
        return createConstraintsAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseProcessBehaviors(ProcessBehaviors object)
      {
        return createProcessBehaviorsAdapter();
      }
      @Override
      public Adapter caseProcessBehavior(ProcessBehavior object)
      {
        return createProcessBehaviorAdapter();
      }
      @Override
      public Adapter caseConstructor(Constructor object)
      {
        return createConstructorAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseInvariants(Invariants object)
      {
        return createInvariantsAdapter();
      }
      @Override
      public Adapter caseAssignParameters(AssignParameters object)
      {
        return createAssignParametersAdapter();
      }
      @Override
      public Adapter caseProcessDSL(ProcessDSL object)
      {
        return createProcessDSLAdapter();
      }
      @Override
      public Adapter caseValue(Value object)
      {
        return createValueAdapter();
      }
      @Override
      public Adapter caseListDef(ListDef object)
      {
        return createListDefAdapter();
      }
      @Override
      public Adapter caseList(List object)
      {
        return createListAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseNumValue(NumValue object)
      {
        return createNumValueAdapter();
      }
      @Override
      public Adapter caseBoolValue(BoolValue object)
      {
        return createBoolValueAdapter();
      }
      @Override
      public Adapter caseProcessDataDef(ProcessDataDef object)
      {
        return createProcessDataDefAdapter();
      }
      @Override
      public Adapter caseProcessPropertyDef(ProcessPropertyDef object)
      {
        return createProcessPropertyDefAdapter();
      }
      @Override
      public Adapter caseProcessPropertyName(ProcessPropertyName object)
      {
        return createProcessPropertyNameAdapter();
      }
      @Override
      public Adapter caseProcessDef(ProcessDef object)
      {
        return createProcessDefAdapter();
      }
      @Override
      public Adapter caseParameterList(ParameterList object)
      {
        return createParameterListAdapter();
      }
      @Override
      public Adapter caseParameterAssign(ParameterAssign object)
      {
        return createParameterAssignAdapter();
      }
      @Override
      public Adapter caseParameterName(ParameterName object)
      {
        return createParameterNameAdapter();
      }
      @Override
      public Adapter caseProcess(scheduling.dsl.Process object)
      {
        return createProcessAdapter();
      }
      @Override
      public Adapter casePropertyAssignment(PropertyAssignment object)
      {
        return createPropertyAssignmentAdapter();
      }
      @Override
      public Adapter caseProcessConfig(ProcessConfig object)
      {
        return createProcessConfigAdapter();
      }
      @Override
      public Adapter caseConfigProcess(ConfigProcess object)
      {
        return createConfigProcessAdapter();
      }
      @Override
      public Adapter caseSporadicProcess(SporadicProcess object)
      {
        return createSporadicProcessAdapter();
      }
      @Override
      public Adapter casePeriodicProcess(PeriodicProcess object)
      {
        return createPeriodicProcessAdapter();
      }
      @Override
      public Adapter caseProcessInit(ProcessInit object)
      {
        return createProcessInitAdapter();
      }
      @Override
      public Adapter caseSet(Set object)
      {
        return createSetAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseSchedulerDSL(SchedulerDSL object)
      {
        return createSchedulerDSLAdapter();
      }
      @Override
      public Adapter caseDefCore(DefCore object)
      {
        return createDefCoreAdapter();
      }
      @Override
      public Adapter caseRTCTL(RTCTL object)
      {
        return createRTCTLAdapter();
      }
      @Override
      public Adapter caseLTE(LTE object)
      {
        return createLTEAdapter();
      }
      @Override
      public Adapter caseCTL_AT(CTL_AT object)
      {
        return createCTL_ATAdapter();
      }
      @Override
      public Adapter caseVerify(Verify object)
      {
        return createVerifyAdapter();
      }
      @Override
      public Adapter caseOrderingDef(OrderingDef object)
      {
        return createOrderingDefAdapter();
      }
      @Override
      public Adapter caseCompVarDef(CompVarDef object)
      {
        return createCompVarDefAdapter();
      }
      @Override
      public Adapter caseCompVarDefination(CompVarDefination object)
      {
        return createCompVarDefinationAdapter();
      }
      @Override
      public Adapter caseCompVarName(CompVarName object)
      {
        return createCompVarNameAdapter();
      }
      @Override
      public Adapter caseComparationDef(ComparationDef object)
      {
        return createComparationDefAdapter();
      }
      @Override
      public Adapter caseComparationName(ComparationName object)
      {
        return createComparationNameAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseSchedulerDef(SchedulerDef object)
      {
        return createSchedulerDefAdapter();
      }
      @Override
      public Adapter caseSchedulerInit(SchedulerInit object)
      {
        return createSchedulerInitAdapter();
      }
      @Override
      public Adapter caseIfDef(IfDef object)
      {
        return createIfDefAdapter();
      }
      @Override
      public Adapter caseInterfaceDef(InterfaceDef object)
      {
        return createInterfaceDefAdapter();
      }
      @Override
      public Adapter caseInterfaceFunction(InterfaceFunction object)
      {
        return createInterfaceFunctionAdapter();
      }
      @Override
      public Adapter caseInterfaceParameterList(InterfaceParameterList object)
      {
        return createInterfaceParameterListAdapter();
      }
      @Override
      public Adapter caseInterfaceParameterDeclare(InterfaceParameterDeclare object)
      {
        return createInterfaceParameterDeclareAdapter();
      }
      @Override
      public Adapter caseFunctionName(FunctionName object)
      {
        return createFunctionNameAdapter();
      }
      @Override
      public Adapter caseVarDef(VarDef object)
      {
        return createVarDefAdapter();
      }
      @Override
      public Adapter caseVarDecl(VarDecl object)
      {
        return createVarDeclAdapter();
      }
      @Override
      public Adapter caseVarBlockDef(VarBlockDef object)
      {
        return createVarBlockDefAdapter();
      }
      @Override
      public Adapter caseVarSingleDef(VarSingleDef object)
      {
        return createVarSingleDefAdapter();
      }
      @Override
      public Adapter caseVarDefinition(VarDefinition object)
      {
        return createVarDefinitionAdapter();
      }
      @Override
      public Adapter caseVarName(VarName object)
      {
        return createVarNameAdapter();
      }
      @Override
      public Adapter caseSchedulerDataDef(SchedulerDataDef object)
      {
        return createSchedulerDataDefAdapter();
      }
      @Override
      public Adapter caseDataDef(DataDef object)
      {
        return createDataDefAdapter();
      }
      @Override
      public Adapter caseDataBlockDef(DataBlockDef object)
      {
        return createDataBlockDefAdapter();
      }
      @Override
      public Adapter caseDataSingleDef(DataSingleDef object)
      {
        return createDataSingleDefAdapter();
      }
      @Override
      public Adapter caseSchedulerPropertyDef(SchedulerPropertyDef object)
      {
        return createSchedulerPropertyDefAdapter();
      }
      @Override
      public Adapter caseSchedulerPropertyName(SchedulerPropertyName object)
      {
        return createSchedulerPropertyNameAdapter();
      }
      @Override
      public Adapter caseSchedulerCollectionDef(SchedulerCollectionDef object)
      {
        return createSchedulerCollectionDefAdapter();
      }
      @Override
      public Adapter caseSchedulerSet(SchedulerSet object)
      {
        return createSchedulerSetAdapter();
      }
      @Override
      public Adapter caseGenerate(Generate object)
      {
        return createGenerateAdapter();
      }
      @Override
      public Adapter caseGenConfiguration(GenConfiguration object)
      {
        return createGenConfigurationAdapter();
      }
      @Override
      public Adapter caseGenerateOption(GenerateOption object)
      {
        return createGenerateOptionAdapter();
      }
      @Override
      public Adapter caseDirectory(Directory object)
      {
        return createDirectoryAdapter();
      }
      @Override
      public Adapter caseFileName(FileName object)
      {
        return createFileNameAdapter();
      }
      @Override
      public Adapter caseFileExtension(FileExtension object)
      {
        return createFileExtensionAdapter();
      }
      @Override
      public Adapter caseTestPart(TestPart object)
      {
        return createTestPartAdapter();
      }
      @Override
      public Adapter caseGenPart(GenPart object)
      {
        return createGenPartAdapter();
      }
      @Override
      public Adapter caseGenComponent(GenComponent object)
      {
        return createGenComponentAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseProcessGeneration(ProcessGeneration object)
      {
        return createProcessGenerationAdapter();
      }
      @Override
      public Adapter caseStepGeneration(StepGeneration object)
      {
        return createStepGenerationAdapter();
      }
      @Override
      public Adapter caseTemplate(Template object)
      {
        return createTemplateAdapter();
      }
      @Override
      public Adapter caseSetTemplate(SetTemplate object)
      {
        return createSetTemplateAdapter();
      }
      @Override
      public Adapter caseBehavior(Behavior object)
      {
        return createBehaviorAdapter();
      }
      @Override
      public Adapter caseEventTemplate(EventTemplate object)
      {
        return createEventTemplateAdapter();
      }
      @Override
      public Adapter caseND_Behavior(ND_Behavior object)
      {
        return createND_BehaviorAdapter();
      }
      @Override
      public Adapter caseHandlerDef(HandlerDef object)
      {
        return createHandlerDefAdapter();
      }
      @Override
      public Adapter caseEventDef(EventDef object)
      {
        return createEventDefAdapter();
      }
      @Override
      public Adapter caseEventOpt(EventOpt object)
      {
        return createEventOptAdapter();
      }
      @Override
      public Adapter caseOpt(Opt object)
      {
        return createOptAdapter();
      }
      @Override
      public Adapter caseEventStm(EventStm object)
      {
        return createEventStmAdapter();
      }
      @Override
      public Adapter caseStm(Stm object)
      {
        return createStmAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseJavaCode(JavaCode object)
      {
        return createJavaCodeAdapter();
      }
      @Override
      public Adapter caseDeclareProcess(DeclareProcess object)
      {
        return createDeclareProcessAdapter();
      }
      @Override
      public Adapter caseSetProcess(SetProcess object)
      {
        return createSetProcessAdapter();
      }
      @Override
      public Adapter caseSetExecTime(SetExecTime object)
      {
        return createSetExecTimeAdapter();
      }
      @Override
      public Adapter caseSetReturnCol(SetReturnCol object)
      {
        return createSetReturnColAdapter();
      }
      @Override
      public Adapter caseSetReturnSet(SetReturnSet object)
      {
        return createSetReturnSetAdapter();
      }
      @Override
      public Adapter caseCheckPoint(CheckPoint object)
      {
        return createCheckPointAdapter();
      }
      @Override
      public Adapter casePointID(PointID object)
      {
        return createPointIDAdapter();
      }
      @Override
      public Adapter caseCallFunction(CallFunction object)
      {
        return createCallFunctionAdapter();
      }
      @Override
      public Adapter caseRemoveProcess(RemoveProcess object)
      {
        return createRemoveProcessAdapter();
      }
      @Override
      public Adapter caseMoveProcess(MoveProcess object)
      {
        return createMoveProcessAdapter();
      }
      @Override
      public Adapter caseReorderProcess(ReorderProcess object)
      {
        return createReorderProcessAdapter();
      }
      @Override
      public Adapter caseSetProcessInstance(SetProcessInstance object)
      {
        return createSetProcessInstanceAdapter();
      }
      @Override
      public Adapter caseLoopProcess(LoopProcess object)
      {
        return createLoopProcessAdapter();
      }
      @Override
      public Adapter caseChangeAction(ChangeAction object)
      {
        return createChangeActionAdapter();
      }
      @Override
      public Adapter caseGetProcess(GetProcess object)
      {
        return createGetProcessAdapter();
      }
      @Override
      public Adapter caseExecuteProcess(ExecuteProcess object)
      {
        return createExecuteProcessAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseBlockStatement(BlockStatement object)
      {
        return createBlockStatementAdapter();
      }
      @Override
      public Adapter caseNewProcessStatement(NewProcessStatement object)
      {
        return createNewProcessStatementAdapter();
      }
      @Override
      public Adapter caseNewElement(NewElement object)
      {
        return createNewElementAdapter();
      }
      @Override
      public Adapter caseParaValue(ParaValue object)
      {
        return createParaValueAdapter();
      }
      @Override
      public Adapter caseAssertStatement(AssertStatement object)
      {
        return createAssertStatementAdapter();
      }
      @Override
      public Adapter casePrintStatement(PrintStatement object)
      {
        return createPrintStatementAdapter();
      }
      @Override
      public Adapter casePrintLogStatement(PrintLogStatement object)
      {
        return createPrintLogStatementAdapter();
      }
      @Override
      public Adapter caseGenCodeStatement(GenCodeStatement object)
      {
        return createGenCodeStatementAdapter();
      }
      @Override
      public Adapter caseGenLnCodeStatement(GenLnCodeStatement object)
      {
        return createGenLnCodeStatementAdapter();
      }
      @Override
      public Adapter caseChangeValue(ChangeValue object)
      {
        return createChangeValueAdapter();
      }
      @Override
      public Adapter caseChangeValueUnOp(ChangeValueUnOp object)
      {
        return createChangeValueUnOpAdapter();
      }
      @Override
      public Adapter caseChangeValueExpression(ChangeValueExpression object)
      {
        return createChangeValueExpressionAdapter();
      }
      @Override
      public Adapter caseChangeListValue(ChangeListValue object)
      {
        return createChangeListValueAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseGetIDExpression(GetIDExpression object)
      {
        return createGetIDExpressionAdapter();
      }
      @Override
      public Adapter caseEmptyExpression(EmptyExpression object)
      {
        return createEmptyExpressionAdapter();
      }
      @Override
      public Adapter caseFullExpression(FullExpression object)
      {
        return createFullExpressionAdapter();
      }
      @Override
      public Adapter caseInExpression(InExpression object)
      {
        return createInExpressionAdapter();
      }
      @Override
      public Adapter caseInPIDExpression(InPIDExpression object)
      {
        return createInPIDExpressionAdapter();
      }
      @Override
      public Adapter caseInPExpression(InPExpression object)
      {
        return createInPExpressionAdapter();
      }
      @Override
      public Adapter caseExistExpression(ExistExpression object)
      {
        return createExistExpressionAdapter();
      }
      @Override
      public Adapter caseExistPID(ExistPID object)
      {
        return createExistPIDAdapter();
      }
      @Override
      public Adapter caseExistP(ExistP object)
      {
        return createExistPAdapter();
      }
      @Override
      public Adapter caseNullExpression(NullExpression object)
      {
        return createNullExpressionAdapter();
      }
      @Override
      public Adapter caseHasNameExpression(HasNameExpression object)
      {
        return createHasNameExpressionAdapter();
      }
      @Override
      public Adapter caseHasID(HasID object)
      {
        return createHasIDAdapter();
      }
      @Override
      public Adapter caseHasIDINT(HasIDINT object)
      {
        return createHasIDINTAdapter();
      }
      @Override
      public Adapter caseGetName(GetName object)
      {
        return createGetNameAdapter();
      }
      @Override
      public Adapter caseAtomic(Atomic object)
      {
        return createAtomicAdapter();
      }
      @Override
      public Adapter caseSysVar(SysVar object)
      {
        return createSysVarAdapter();
      }
      @Override
      public Adapter caseQualifiedNames(QualifiedNames object)
      {
        return createQualifiedNamesAdapter();
      }
      @Override
      public Adapter caseProper(Proper object)
      {
        return createProperAdapter();
      }
      @Override
      public Adapter caseListElement(ListElement object)
      {
        return createListElementAdapter();
      }
      @Override
      public Adapter caseInvariatnts(Invariatnts object)
      {
        return createInvariatntsAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMulOrDiv(MulOrDiv object)
      {
        return createMulOrDivAdapter();
      }
      @Override
      public Adapter caseImplies(Implies object)
      {
        return createImpliesAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseCurentCore(CurentCore object)
      {
        return createCurentCoreAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseStateID(StateID object)
      {
        return createStateIDAdapter();
      }
      @Override
      public Adapter caseBranchID(BranchID object)
      {
        return createBranchIDAdapter();
      }
      @Override
      public Adapter caseStep(Step object)
      {
        return createStepAdapter();
      }
      @Override
      public Adapter caseTotalStep(TotalStep object)
      {
        return createTotalStepAdapter();
      }
      @Override
      public Adapter caseGetInstance(GetInstance object)
      {
        return createGetInstanceAdapter();
      }
      @Override
      public Adapter caseGetPID(GetPID object)
      {
        return createGetPIDAdapter();
      }
      @Override
      public Adapter caseInstanceID(InstanceID object)
      {
        return createInstanceIDAdapter();
      }
      @Override
      public Adapter caseProcessID(ProcessID object)
      {
        return createProcessIDAdapter();
      }
      @Override
      public Adapter caseProcessName(ProcessName object)
      {
        return createProcessNameAdapter();
      }
      @Override
      public Adapter caseContains(Contains object)
      {
        return createContainsAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenDSL <em>Gen DSL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenDSL
   * @generated
   */
  public Adapter createGenDSLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ISR <em>ISR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ISR
   * @generated
   */
  public Adapter createISRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.TestDSL <em>Test DSL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.TestDSL
   * @generated
   */
  public Adapter createTestDSLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Configs <em>Configs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Configs
   * @generated
   */
  public Adapter createConfigsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Config <em>Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Config
   * @generated
   */
  public Adapter createConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Configuration <em>Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Configuration
   * @generated
   */
  public Adapter createConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarInit <em>Var Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarInit
   * @generated
   */
  public Adapter createVarInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CollectionInit <em>Collection Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CollectionInit
   * @generated
   */
  public Adapter createCollectionInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Scenarios <em>Scenarios</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Scenarios
   * @generated
   */
  public Adapter createScenariosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Permutation <em>Permutation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Permutation
   * @generated
   */
  public Adapter createPermutationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Flow <em>Flow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Flow
   * @generated
   */
  public Adapter createFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ENAME <em>ENAME</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ENAME
   * @generated
   */
  public Adapter createENAMEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Rules <em>Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Rules
   * @generated
   */
  public Adapter createRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Rule <em>Rule</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Rule
   * @generated
   */
  public Adapter createRuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Specification <em>Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Specification
   * @generated
   */
  public Adapter createSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DeclareList <em>Declare List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DeclareList
   * @generated
   */
  public Adapter createDeclareListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.OneDec <em>One Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.OneDec
   * @generated
   */
  public Adapter createOneDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EnumDec <em>Enum Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EnumDec
   * @generated
   */
  public Adapter createEnumDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EnumType <em>Enum Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EnumType
   * @generated
   */
  public Adapter createEnumTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ConstDec <em>Const Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ConstDec
   * @generated
   */
  public Adapter createConstDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarDec <em>Var Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarDec
   * @generated
   */
  public Adapter createVarDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VDec <em>VDec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VDec
   * @generated
   */
  public Adapter createVDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ArrayDec <em>Array Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ArrayDec
   * @generated
   */
  public Adapter createArrayDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChanDec <em>Chan Dec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChanDec
   * @generated
   */
  public Adapter createChanDecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Define <em>Define</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Define
   * @generated
   */
  public Adapter createDefineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.RefList <em>Ref List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.RefList
   * @generated
   */
  public Adapter createRefListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.RefListItem <em>Ref List Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.RefListItem
   * @generated
   */
  public Adapter createRefListItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.FuncPara <em>Func Para</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.FuncPara
   * @generated
   */
  public Adapter createFuncParaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DeclareEvent <em>Declare Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DeclareEvent
   * @generated
   */
  public Adapter createDeclareEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EventFunction <em>Event Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EventFunction
   * @generated
   */
  public Adapter createEventFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ParaListItem <em>Para List Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ParaListItem
   * @generated
   */
  public Adapter createParaListItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ELABEL <em>ELABEL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ELABEL
   * @generated
   */
  public Adapter createELABELAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SequenceAction <em>Sequence Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SequenceAction
   * @generated
   */
  public Adapter createSequenceActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GUARD <em>GUARD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GUARD
   * @generated
   */
  public Adapter createGUARDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.IFs <em>IFs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.IFs
   * @generated
   */
  public Adapter createIFsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ASSIGN <em>ASSIGN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ASSIGN
   * @generated
   */
  public Adapter createASSIGNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Options <em>Options</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Options
   * @generated
   */
  public Adapter createOptionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ELSEs <em>ELS Es</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ELSEs
   * @generated
   */
  public Adapter createELSEsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SKIP <em>SKIP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SKIP
   * @generated
   */
  public Adapter createSKIPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessConfiguration <em>Process Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessConfiguration
   * @generated
   */
  public Adapter createProcessConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DefBehaviorProc <em>Def Behavior Proc</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DefBehaviorProc
   * @generated
   */
  public Adapter createDefBehaviorProcAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcType <em>Proc Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcType
   * @generated
   */
  public Adapter createProcTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessType <em>Process Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessType
   * @generated
   */
  public Adapter createProcessTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.AttDef <em>Att Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.AttDef
   * @generated
   */
  public Adapter createAttDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Constraints <em>Constraints</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Constraints
   * @generated
   */
  public Adapter createConstraintsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessBehaviors <em>Process Behaviors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessBehaviors
   * @generated
   */
  public Adapter createProcessBehaviorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessBehavior <em>Process Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessBehavior
   * @generated
   */
  public Adapter createProcessBehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Constructor <em>Constructor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Constructor
   * @generated
   */
  public Adapter createConstructorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Invariants <em>Invariants</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Invariants
   * @generated
   */
  public Adapter createInvariantsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.AssignParameters <em>Assign Parameters</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.AssignParameters
   * @generated
   */
  public Adapter createAssignParametersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessDSL <em>Process DSL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessDSL
   * @generated
   */
  public Adapter createProcessDSLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Value <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Value
   * @generated
   */
  public Adapter createValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ListDef <em>List Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ListDef
   * @generated
   */
  public Adapter createListDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.List <em>List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.List
   * @generated
   */
  public Adapter createListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.NumValue <em>Num Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.NumValue
   * @generated
   */
  public Adapter createNumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.BoolValue <em>Bool Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.BoolValue
   * @generated
   */
  public Adapter createBoolValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessDataDef <em>Process Data Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessDataDef
   * @generated
   */
  public Adapter createProcessDataDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessPropertyDef <em>Process Property Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessPropertyDef
   * @generated
   */
  public Adapter createProcessPropertyDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessPropertyName <em>Process Property Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessPropertyName
   * @generated
   */
  public Adapter createProcessPropertyNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessDef <em>Process Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessDef
   * @generated
   */
  public Adapter createProcessDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ParameterList <em>Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ParameterList
   * @generated
   */
  public Adapter createParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ParameterAssign <em>Parameter Assign</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ParameterAssign
   * @generated
   */
  public Adapter createParameterAssignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ParameterName <em>Parameter Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ParameterName
   * @generated
   */
  public Adapter createParameterNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Process <em>Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Process
   * @generated
   */
  public Adapter createProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.PropertyAssignment <em>Property Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.PropertyAssignment
   * @generated
   */
  public Adapter createPropertyAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessConfig <em>Process Config</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessConfig
   * @generated
   */
  public Adapter createProcessConfigAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ConfigProcess <em>Config Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ConfigProcess
   * @generated
   */
  public Adapter createConfigProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SporadicProcess <em>Sporadic Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SporadicProcess
   * @generated
   */
  public Adapter createSporadicProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.PeriodicProcess <em>Periodic Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.PeriodicProcess
   * @generated
   */
  public Adapter createPeriodicProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessInit <em>Process Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessInit
   * @generated
   */
  public Adapter createProcessInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Set <em>Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Set
   * @generated
   */
  public Adapter createSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerDSL <em>Scheduler DSL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerDSL
   * @generated
   */
  public Adapter createSchedulerDSLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DefCore <em>Def Core</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DefCore
   * @generated
   */
  public Adapter createDefCoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.RTCTL <em>RTCTL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.RTCTL
   * @generated
   */
  public Adapter createRTCTLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.LTE <em>LTE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.LTE
   * @generated
   */
  public Adapter createLTEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CTL_AT <em>CTL AT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CTL_AT
   * @generated
   */
  public Adapter createCTL_ATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Verify <em>Verify</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Verify
   * @generated
   */
  public Adapter createVerifyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.OrderingDef <em>Ordering Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.OrderingDef
   * @generated
   */
  public Adapter createOrderingDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CompVarDef <em>Comp Var Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CompVarDef
   * @generated
   */
  public Adapter createCompVarDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CompVarDefination <em>Comp Var Defination</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CompVarDefination
   * @generated
   */
  public Adapter createCompVarDefinationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CompVarName <em>Comp Var Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CompVarName
   * @generated
   */
  public Adapter createCompVarNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ComparationDef <em>Comparation Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ComparationDef
   * @generated
   */
  public Adapter createComparationDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ComparationName <em>Comparation Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ComparationName
   * @generated
   */
  public Adapter createComparationNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerDef <em>Scheduler Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerDef
   * @generated
   */
  public Adapter createSchedulerDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerInit <em>Scheduler Init</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerInit
   * @generated
   */
  public Adapter createSchedulerInitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.IfDef <em>If Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.IfDef
   * @generated
   */
  public Adapter createIfDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InterfaceDef <em>Interface Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InterfaceDef
   * @generated
   */
  public Adapter createInterfaceDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InterfaceFunction <em>Interface Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InterfaceFunction
   * @generated
   */
  public Adapter createInterfaceFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InterfaceParameterList <em>Interface Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InterfaceParameterList
   * @generated
   */
  public Adapter createInterfaceParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InterfaceParameterDeclare <em>Interface Parameter Declare</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InterfaceParameterDeclare
   * @generated
   */
  public Adapter createInterfaceParameterDeclareAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.FunctionName <em>Function Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.FunctionName
   * @generated
   */
  public Adapter createFunctionNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarDef <em>Var Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarDef
   * @generated
   */
  public Adapter createVarDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarDecl <em>Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarDecl
   * @generated
   */
  public Adapter createVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarBlockDef <em>Var Block Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarBlockDef
   * @generated
   */
  public Adapter createVarBlockDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarSingleDef <em>Var Single Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarSingleDef
   * @generated
   */
  public Adapter createVarSingleDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarDefinition <em>Var Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarDefinition
   * @generated
   */
  public Adapter createVarDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.VarName <em>Var Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.VarName
   * @generated
   */
  public Adapter createVarNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerDataDef <em>Scheduler Data Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerDataDef
   * @generated
   */
  public Adapter createSchedulerDataDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DataDef <em>Data Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DataDef
   * @generated
   */
  public Adapter createDataDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DataBlockDef <em>Data Block Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DataBlockDef
   * @generated
   */
  public Adapter createDataBlockDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DataSingleDef <em>Data Single Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DataSingleDef
   * @generated
   */
  public Adapter createDataSingleDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerPropertyDef <em>Scheduler Property Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerPropertyDef
   * @generated
   */
  public Adapter createSchedulerPropertyDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerPropertyName <em>Scheduler Property Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerPropertyName
   * @generated
   */
  public Adapter createSchedulerPropertyNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerCollectionDef <em>Scheduler Collection Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerCollectionDef
   * @generated
   */
  public Adapter createSchedulerCollectionDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SchedulerSet <em>Scheduler Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SchedulerSet
   * @generated
   */
  public Adapter createSchedulerSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Generate <em>Generate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Generate
   * @generated
   */
  public Adapter createGenerateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenConfiguration <em>Gen Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenConfiguration
   * @generated
   */
  public Adapter createGenConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenerateOption <em>Generate Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenerateOption
   * @generated
   */
  public Adapter createGenerateOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Directory <em>Directory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Directory
   * @generated
   */
  public Adapter createDirectoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.FileName <em>File Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.FileName
   * @generated
   */
  public Adapter createFileNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.FileExtension <em>File Extension</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.FileExtension
   * @generated
   */
  public Adapter createFileExtensionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.TestPart <em>Test Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.TestPart
   * @generated
   */
  public Adapter createTestPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenPart <em>Gen Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenPart
   * @generated
   */
  public Adapter createGenPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenComponent <em>Gen Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenComponent
   * @generated
   */
  public Adapter createGenComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessGeneration <em>Process Generation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessGeneration
   * @generated
   */
  public Adapter createProcessGenerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.StepGeneration <em>Step Generation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.StepGeneration
   * @generated
   */
  public Adapter createStepGenerationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Template <em>Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Template
   * @generated
   */
  public Adapter createTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetTemplate <em>Set Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetTemplate
   * @generated
   */
  public Adapter createSetTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Behavior <em>Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Behavior
   * @generated
   */
  public Adapter createBehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EventTemplate <em>Event Template</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EventTemplate
   * @generated
   */
  public Adapter createEventTemplateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ND_Behavior <em>ND Behavior</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ND_Behavior
   * @generated
   */
  public Adapter createND_BehaviorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.HandlerDef <em>Handler Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.HandlerDef
   * @generated
   */
  public Adapter createHandlerDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EventDef <em>Event Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EventDef
   * @generated
   */
  public Adapter createEventDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EventOpt <em>Event Opt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EventOpt
   * @generated
   */
  public Adapter createEventOptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Opt <em>Opt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Opt
   * @generated
   */
  public Adapter createOptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EventStm <em>Event Stm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EventStm
   * @generated
   */
  public Adapter createEventStmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Stm <em>Stm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Stm
   * @generated
   */
  public Adapter createStmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.JavaCode <em>Java Code</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.JavaCode
   * @generated
   */
  public Adapter createJavaCodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.DeclareProcess <em>Declare Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.DeclareProcess
   * @generated
   */
  public Adapter createDeclareProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetProcess <em>Set Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetProcess
   * @generated
   */
  public Adapter createSetProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetExecTime <em>Set Exec Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetExecTime
   * @generated
   */
  public Adapter createSetExecTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetReturnCol <em>Set Return Col</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetReturnCol
   * @generated
   */
  public Adapter createSetReturnColAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetReturnSet <em>Set Return Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetReturnSet
   * @generated
   */
  public Adapter createSetReturnSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CheckPoint <em>Check Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CheckPoint
   * @generated
   */
  public Adapter createCheckPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.PointID <em>Point ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.PointID
   * @generated
   */
  public Adapter createPointIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CallFunction <em>Call Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CallFunction
   * @generated
   */
  public Adapter createCallFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.RemoveProcess <em>Remove Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.RemoveProcess
   * @generated
   */
  public Adapter createRemoveProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.MoveProcess <em>Move Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.MoveProcess
   * @generated
   */
  public Adapter createMoveProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ReorderProcess <em>Reorder Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ReorderProcess
   * @generated
   */
  public Adapter createReorderProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SetProcessInstance <em>Set Process Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SetProcessInstance
   * @generated
   */
  public Adapter createSetProcessInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.LoopProcess <em>Loop Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.LoopProcess
   * @generated
   */
  public Adapter createLoopProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChangeAction <em>Change Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChangeAction
   * @generated
   */
  public Adapter createChangeActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GetProcess <em>Get Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GetProcess
   * @generated
   */
  public Adapter createGetProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ExecuteProcess <em>Execute Process</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ExecuteProcess
   * @generated
   */
  public Adapter createExecuteProcessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.BlockStatement <em>Block Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.BlockStatement
   * @generated
   */
  public Adapter createBlockStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.NewProcessStatement <em>New Process Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.NewProcessStatement
   * @generated
   */
  public Adapter createNewProcessStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.NewElement <em>New Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.NewElement
   * @generated
   */
  public Adapter createNewElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ParaValue <em>Para Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ParaValue
   * @generated
   */
  public Adapter createParaValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.AssertStatement <em>Assert Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.AssertStatement
   * @generated
   */
  public Adapter createAssertStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.PrintStatement <em>Print Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.PrintStatement
   * @generated
   */
  public Adapter createPrintStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.PrintLogStatement <em>Print Log Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.PrintLogStatement
   * @generated
   */
  public Adapter createPrintLogStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenCodeStatement <em>Gen Code Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenCodeStatement
   * @generated
   */
  public Adapter createGenCodeStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GenLnCodeStatement <em>Gen Ln Code Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GenLnCodeStatement
   * @generated
   */
  public Adapter createGenLnCodeStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChangeValue <em>Change Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChangeValue
   * @generated
   */
  public Adapter createChangeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChangeValueUnOp <em>Change Value Un Op</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChangeValueUnOp
   * @generated
   */
  public Adapter createChangeValueUnOpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChangeValueExpression <em>Change Value Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChangeValueExpression
   * @generated
   */
  public Adapter createChangeValueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ChangeListValue <em>Change List Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ChangeListValue
   * @generated
   */
  public Adapter createChangeListValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GetIDExpression <em>Get ID Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GetIDExpression
   * @generated
   */
  public Adapter createGetIDExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.EmptyExpression <em>Empty Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.EmptyExpression
   * @generated
   */
  public Adapter createEmptyExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.FullExpression <em>Full Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.FullExpression
   * @generated
   */
  public Adapter createFullExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InExpression <em>In Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InExpression
   * @generated
   */
  public Adapter createInExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InPIDExpression <em>In PID Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InPIDExpression
   * @generated
   */
  public Adapter createInPIDExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InPExpression <em>In PExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InPExpression
   * @generated
   */
  public Adapter createInPExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ExistExpression <em>Exist Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ExistExpression
   * @generated
   */
  public Adapter createExistExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ExistPID <em>Exist PID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ExistPID
   * @generated
   */
  public Adapter createExistPIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ExistP <em>Exist P</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ExistP
   * @generated
   */
  public Adapter createExistPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.NullExpression <em>Null Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.NullExpression
   * @generated
   */
  public Adapter createNullExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.HasNameExpression <em>Has Name Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.HasNameExpression
   * @generated
   */
  public Adapter createHasNameExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.HasID <em>Has ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.HasID
   * @generated
   */
  public Adapter createHasIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.HasIDINT <em>Has IDINT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.HasIDINT
   * @generated
   */
  public Adapter createHasIDINTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GetName <em>Get Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GetName
   * @generated
   */
  public Adapter createGetNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Atomic <em>Atomic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Atomic
   * @generated
   */
  public Adapter createAtomicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.SysVar <em>Sys Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.SysVar
   * @generated
   */
  public Adapter createSysVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.QualifiedNames <em>Qualified Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.QualifiedNames
   * @generated
   */
  public Adapter createQualifiedNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Proper <em>Proper</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Proper
   * @generated
   */
  public Adapter createProperAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ListElement <em>List Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ListElement
   * @generated
   */
  public Adapter createListElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Invariatnts <em>Invariatnts</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Invariatnts
   * @generated
   */
  public Adapter createInvariatntsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.MulOrDiv <em>Mul Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.MulOrDiv
   * @generated
   */
  public Adapter createMulOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Implies <em>Implies</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Implies
   * @generated
   */
  public Adapter createImpliesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.CurentCore <em>Curent Core</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.CurentCore
   * @generated
   */
  public Adapter createCurentCoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.StateID <em>State ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.StateID
   * @generated
   */
  public Adapter createStateIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.BranchID <em>Branch ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.BranchID
   * @generated
   */
  public Adapter createBranchIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Step <em>Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Step
   * @generated
   */
  public Adapter createStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.TotalStep <em>Total Step</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.TotalStep
   * @generated
   */
  public Adapter createTotalStepAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GetInstance <em>Get Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GetInstance
   * @generated
   */
  public Adapter createGetInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.GetPID <em>Get PID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.GetPID
   * @generated
   */
  public Adapter createGetPIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.InstanceID <em>Instance ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.InstanceID
   * @generated
   */
  public Adapter createInstanceIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessID <em>Process ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessID
   * @generated
   */
  public Adapter createProcessIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.ProcessName <em>Process Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.ProcessName
   * @generated
   */
  public Adapter createProcessNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link scheduling.dsl.Contains <em>Contains</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see scheduling.dsl.Contains
   * @generated
   */
  public Adapter createContainsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DslAdapterFactory
