/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import scheduling.dsl.ASSIGN;
import scheduling.dsl.Action;
import scheduling.dsl.And;
import scheduling.dsl.ArrayDec;
import scheduling.dsl.AssertStatement;
import scheduling.dsl.AssignParameters;
import scheduling.dsl.Atomic;
import scheduling.dsl.AttDef;
import scheduling.dsl.Attribute;
import scheduling.dsl.Behavior;
import scheduling.dsl.BlockStatement;
import scheduling.dsl.BoolConstant;
import scheduling.dsl.BoolValue;
import scheduling.dsl.BranchID;
import scheduling.dsl.CTL_AT;
import scheduling.dsl.CallFunction;
import scheduling.dsl.ChanDec;
import scheduling.dsl.ChangeAction;
import scheduling.dsl.ChangeListValue;
import scheduling.dsl.ChangeValue;
import scheduling.dsl.ChangeValueExpression;
import scheduling.dsl.ChangeValueUnOp;
import scheduling.dsl.CheckPoint;
import scheduling.dsl.CollectionInit;
import scheduling.dsl.CompVarDef;
import scheduling.dsl.CompVarDefination;
import scheduling.dsl.CompVarName;
import scheduling.dsl.ComparationDef;
import scheduling.dsl.ComparationName;
import scheduling.dsl.Comparison;
import scheduling.dsl.Component;
import scheduling.dsl.Condition;
import scheduling.dsl.Config;
import scheduling.dsl.ConfigProcess;
import scheduling.dsl.Configs;
import scheduling.dsl.Configuration;
import scheduling.dsl.ConstDec;
import scheduling.dsl.Constraint;
import scheduling.dsl.Constraints;
import scheduling.dsl.Constructor;
import scheduling.dsl.Contains;
import scheduling.dsl.CurentCore;
import scheduling.dsl.DataBlockDef;
import scheduling.dsl.DataDef;
import scheduling.dsl.DataSingleDef;
import scheduling.dsl.DeclareEvent;
import scheduling.dsl.DeclareList;
import scheduling.dsl.DeclareProcess;
import scheduling.dsl.DefBehaviorProc;
import scheduling.dsl.DefCore;
import scheduling.dsl.Define;
import scheduling.dsl.Directory;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ELABEL;
import scheduling.dsl.ELSEs;
import scheduling.dsl.ENAME;
import scheduling.dsl.Element;
import scheduling.dsl.EmptyExpression;
import scheduling.dsl.EnumDec;
import scheduling.dsl.EnumType;
import scheduling.dsl.Equality;
import scheduling.dsl.Event;
import scheduling.dsl.EventDef;
import scheduling.dsl.EventFunction;
import scheduling.dsl.EventOpt;
import scheduling.dsl.EventStm;
import scheduling.dsl.EventTemplate;
import scheduling.dsl.ExecuteProcess;
import scheduling.dsl.ExistExpression;
import scheduling.dsl.ExistP;
import scheduling.dsl.ExistPID;
import scheduling.dsl.Expression;
import scheduling.dsl.FileExtension;
import scheduling.dsl.FileName;
import scheduling.dsl.Flow;
import scheduling.dsl.FullExpression;
import scheduling.dsl.FuncPara;
import scheduling.dsl.Function;
import scheduling.dsl.FunctionName;
import scheduling.dsl.GUARD;
import scheduling.dsl.GenCodeStatement;
import scheduling.dsl.GenComponent;
import scheduling.dsl.GenConfiguration;
import scheduling.dsl.GenDSL;
import scheduling.dsl.GenLnCodeStatement;
import scheduling.dsl.GenPart;
import scheduling.dsl.Generate;
import scheduling.dsl.GenerateOption;
import scheduling.dsl.GetIDExpression;
import scheduling.dsl.GetInstance;
import scheduling.dsl.GetName;
import scheduling.dsl.GetPID;
import scheduling.dsl.GetProcess;
import scheduling.dsl.HandlerDef;
import scheduling.dsl.HasID;
import scheduling.dsl.HasIDINT;
import scheduling.dsl.HasNameExpression;
import scheduling.dsl.IFs;
import scheduling.dsl.ISR;
import scheduling.dsl.IfDef;
import scheduling.dsl.IfStatement;
import scheduling.dsl.Implies;
import scheduling.dsl.InExpression;
import scheduling.dsl.InPExpression;
import scheduling.dsl.InPIDExpression;
import scheduling.dsl.InstanceID;
import scheduling.dsl.IntConstant;
import scheduling.dsl.InterfaceDef;
import scheduling.dsl.InterfaceFunction;
import scheduling.dsl.InterfaceParameterDeclare;
import scheduling.dsl.InterfaceParameterList;
import scheduling.dsl.Invariants;
import scheduling.dsl.Invariatnts;
import scheduling.dsl.JavaCode;
import scheduling.dsl.LTE;
import scheduling.dsl.List;
import scheduling.dsl.ListDef;
import scheduling.dsl.ListElement;
import scheduling.dsl.LoopProcess;
import scheduling.dsl.Method;
import scheduling.dsl.Minus;
import scheduling.dsl.Model;
import scheduling.dsl.MoveProcess;
import scheduling.dsl.MulOrDiv;
import scheduling.dsl.ND_Behavior;
import scheduling.dsl.NewElement;
import scheduling.dsl.NewProcessStatement;
import scheduling.dsl.Not;
import scheduling.dsl.NullExpression;
import scheduling.dsl.NumValue;
import scheduling.dsl.OneDec;
import scheduling.dsl.Opt;
import scheduling.dsl.Options;
import scheduling.dsl.Or;
import scheduling.dsl.OrderingDef;
import scheduling.dsl.ParaListItem;
import scheduling.dsl.ParaValue;
import scheduling.dsl.ParameterAssign;
import scheduling.dsl.ParameterList;
import scheduling.dsl.ParameterName;
import scheduling.dsl.PeriodicProcess;
import scheduling.dsl.Permutation;
import scheduling.dsl.Plus;
import scheduling.dsl.PointID;
import scheduling.dsl.PrintLogStatement;
import scheduling.dsl.PrintStatement;
import scheduling.dsl.ProcType;
import scheduling.dsl.ProcessBehavior;
import scheduling.dsl.ProcessBehaviors;
import scheduling.dsl.ProcessConfig;
import scheduling.dsl.ProcessConfiguration;
import scheduling.dsl.ProcessDSL;
import scheduling.dsl.ProcessDataDef;
import scheduling.dsl.ProcessDef;
import scheduling.dsl.ProcessGeneration;
import scheduling.dsl.ProcessID;
import scheduling.dsl.ProcessInit;
import scheduling.dsl.ProcessName;
import scheduling.dsl.ProcessPropertyDef;
import scheduling.dsl.ProcessPropertyName;
import scheduling.dsl.ProcessType;
import scheduling.dsl.Proper;
import scheduling.dsl.PropertyAssignment;
import scheduling.dsl.QualifiedNames;
import scheduling.dsl.RTCTL;
import scheduling.dsl.Range;
import scheduling.dsl.RefList;
import scheduling.dsl.RefListItem;
import scheduling.dsl.RemoveProcess;
import scheduling.dsl.ReorderProcess;
import scheduling.dsl.ReturnStatement;
import scheduling.dsl.Rule;
import scheduling.dsl.Rules;
import scheduling.dsl.SKIP;
import scheduling.dsl.Scenarios;
import scheduling.dsl.SchedulerCollectionDef;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.SchedulerDataDef;
import scheduling.dsl.SchedulerDef;
import scheduling.dsl.SchedulerInit;
import scheduling.dsl.SchedulerPropertyDef;
import scheduling.dsl.SchedulerPropertyName;
import scheduling.dsl.SchedulerSet;
import scheduling.dsl.SequenceAction;
import scheduling.dsl.Set;
import scheduling.dsl.SetExecTime;
import scheduling.dsl.SetProcess;
import scheduling.dsl.SetProcessInstance;
import scheduling.dsl.SetReturnCol;
import scheduling.dsl.SetReturnSet;
import scheduling.dsl.SetTemplate;
import scheduling.dsl.Specification;
import scheduling.dsl.SporadicProcess;
import scheduling.dsl.StateID;
import scheduling.dsl.Statement;
import scheduling.dsl.Step;
import scheduling.dsl.StepGeneration;
import scheduling.dsl.Stm;
import scheduling.dsl.SysVar;
import scheduling.dsl.Template;
import scheduling.dsl.TestDSL;
import scheduling.dsl.TestPart;
import scheduling.dsl.TotalStep;
import scheduling.dsl.VDec;
import scheduling.dsl.Value;
import scheduling.dsl.VarBlockDef;
import scheduling.dsl.VarDec;
import scheduling.dsl.VarDecl;
import scheduling.dsl.VarDef;
import scheduling.dsl.VarDefinition;
import scheduling.dsl.VarInit;
import scheduling.dsl.VarName;
import scheduling.dsl.VarSingleDef;
import scheduling.dsl.Verify;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see scheduling.dsl.DslPackage
 * @generated
 */
public class DslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case DslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_DSL:
      {
        GenDSL genDSL = (GenDSL)theEObject;
        T result = caseGenDSL(genDSL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ISR:
      {
        ISR isr = (ISR)theEObject;
        T result = caseISR(isr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.TEST_DSL:
      {
        TestDSL testDSL = (TestDSL)theEObject;
        T result = caseTestDSL(testDSL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONFIGS:
      {
        Configs configs = (Configs)theEObject;
        T result = caseConfigs(configs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONFIG:
      {
        Config config = (Config)theEObject;
        T result = caseConfig(config);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONFIGURATION:
      {
        Configuration configuration = (Configuration)theEObject;
        T result = caseConfiguration(configuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_INIT:
      {
        VarInit varInit = (VarInit)theEObject;
        T result = caseVarInit(varInit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COLLECTION_INIT:
      {
        CollectionInit collectionInit = (CollectionInit)theEObject;
        T result = caseCollectionInit(collectionInit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCENARIOS:
      {
        Scenarios scenarios = (Scenarios)theEObject;
        T result = caseScenarios(scenarios);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PERMUTATION:
      {
        Permutation permutation = (Permutation)theEObject;
        T result = casePermutation(permutation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FLOW:
      {
        Flow flow = (Flow)theEObject;
        T result = caseFlow(flow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ENAME:
      {
        ENAME ename = (ENAME)theEObject;
        T result = caseENAME(ename);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RULES:
      {
        Rules rules = (Rules)theEObject;
        T result = caseRules(rules);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RULE:
      {
        Rule rule = (Rule)theEObject;
        T result = caseRule(rule);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONDITION:
      {
        Condition condition = (Condition)theEObject;
        T result = caseCondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SPECIFICATION:
      {
        Specification specification = (Specification)theEObject;
        T result = caseSpecification(specification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DECLARE_LIST:
      {
        DeclareList declareList = (DeclareList)theEObject;
        T result = caseDeclareList(declareList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ONE_DEC:
      {
        OneDec oneDec = (OneDec)theEObject;
        T result = caseOneDec(oneDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ENUM_DEC:
      {
        EnumDec enumDec = (EnumDec)theEObject;
        T result = caseEnumDec(enumDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ENUM_TYPE:
      {
        EnumType enumType = (EnumType)theEObject;
        T result = caseEnumType(enumType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONST_DEC:
      {
        ConstDec constDec = (ConstDec)theEObject;
        T result = caseConstDec(constDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_DEC:
      {
        VarDec varDec = (VarDec)theEObject;
        T result = caseVarDec(varDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VDEC:
      {
        VDec vDec = (VDec)theEObject;
        T result = caseVDec(vDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ARRAY_DEC:
      {
        ArrayDec arrayDec = (ArrayDec)theEObject;
        T result = caseArrayDec(arrayDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHAN_DEC:
      {
        ChanDec chanDec = (ChanDec)theEObject;
        T result = caseChanDec(chanDec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DEFINE:
      {
        Define define = (Define)theEObject;
        T result = caseDefine(define);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.REF_LIST:
      {
        RefList refList = (RefList)theEObject;
        T result = caseRefList(refList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FUNCTION:
      {
        Function function = (Function)theEObject;
        T result = caseFunction(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.REF_LIST_ITEM:
      {
        RefListItem refListItem = (RefListItem)theEObject;
        T result = caseRefListItem(refListItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FUNC_PARA:
      {
        FuncPara funcPara = (FuncPara)theEObject;
        T result = caseFuncPara(funcPara);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DECLARE_EVENT:
      {
        DeclareEvent declareEvent = (DeclareEvent)theEObject;
        T result = caseDeclareEvent(declareEvent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT_FUNCTION:
      {
        EventFunction eventFunction = (EventFunction)theEObject;
        T result = caseEventFunction(eventFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PARA_LIST_ITEM:
      {
        ParaListItem paraListItem = (ParaListItem)theEObject;
        T result = caseParaListItem(paraListItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ELABEL:
      {
        ELABEL elabel = (ELABEL)theEObject;
        T result = caseELABEL(elabel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SEQUENCE_ACTION:
      {
        SequenceAction sequenceAction = (SequenceAction)theEObject;
        T result = caseSequenceAction(sequenceAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ACTION:
      {
        Action action = (Action)theEObject;
        T result = caseAction(action);
        if (result == null) result = caseAtomic(action);
        if (result == null) result = caseExpression(action);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GUARD:
      {
        GUARD guard = (GUARD)theEObject;
        T result = caseGUARD(guard);
        if (result == null) result = caseAction(guard);
        if (result == null) result = caseAtomic(guard);
        if (result == null) result = caseExpression(guard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IFS:
      {
        IFs iFs = (IFs)theEObject;
        T result = caseIFs(iFs);
        if (result == null) result = caseAction(iFs);
        if (result == null) result = caseAtomic(iFs);
        if (result == null) result = caseExpression(iFs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ASSIGN:
      {
        ASSIGN assign = (ASSIGN)theEObject;
        T result = caseASSIGN(assign);
        if (result == null) result = caseAction(assign);
        if (result == null) result = caseAtomic(assign);
        if (result == null) result = caseExpression(assign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.OPTIONS:
      {
        Options options = (Options)theEObject;
        T result = caseOptions(options);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ELS_ES:
      {
        ELSEs elsEs = (ELSEs)theEObject;
        T result = caseELSEs(elsEs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SKIP:
      {
        SKIP skip = (SKIP)theEObject;
        T result = caseSKIP(skip);
        if (result == null) result = caseAction(skip);
        if (result == null) result = caseAtomic(skip);
        if (result == null) result = caseExpression(skip);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_CONFIGURATION:
      {
        ProcessConfiguration processConfiguration = (ProcessConfiguration)theEObject;
        T result = caseProcessConfiguration(processConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DEF_BEHAVIOR_PROC:
      {
        DefBehaviorProc defBehaviorProc = (DefBehaviorProc)theEObject;
        T result = caseDefBehaviorProc(defBehaviorProc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROC_TYPE:
      {
        ProcType procType = (ProcType)theEObject;
        T result = caseProcType(procType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_TYPE:
      {
        ProcessType processType = (ProcessType)theEObject;
        T result = caseProcessType(processType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ATT_DEF:
      {
        AttDef attDef = (AttDef)theEObject;
        T result = caseAttDef(attDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONSTRAINTS:
      {
        Constraints constraints = (Constraints)theEObject;
        T result = caseConstraints(constraints);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_BEHAVIORS:
      {
        ProcessBehaviors processBehaviors = (ProcessBehaviors)theEObject;
        T result = caseProcessBehaviors(processBehaviors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_BEHAVIOR:
      {
        ProcessBehavior processBehavior = (ProcessBehavior)theEObject;
        T result = caseProcessBehavior(processBehavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONSTRUCTOR:
      {
        Constructor constructor = (Constructor)theEObject;
        T result = caseConstructor(constructor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.METHOD:
      {
        Method method = (Method)theEObject;
        T result = caseMethod(method);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INVARIANTS:
      {
        Invariants invariants = (Invariants)theEObject;
        T result = caseInvariants(invariants);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ASSIGN_PARAMETERS:
      {
        AssignParameters assignParameters = (AssignParameters)theEObject;
        T result = caseAssignParameters(assignParameters);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_DSL:
      {
        ProcessDSL processDSL = (ProcessDSL)theEObject;
        T result = caseProcessDSL(processDSL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VALUE:
      {
        Value value = (Value)theEObject;
        T result = caseValue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.LIST_DEF:
      {
        ListDef listDef = (ListDef)theEObject;
        T result = caseListDef(listDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RANGE:
      {
        Range range = (Range)theEObject;
        T result = caseRange(range);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NUM_VALUE:
      {
        NumValue numValue = (NumValue)theEObject;
        T result = caseNumValue(numValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BOOL_VALUE:
      {
        BoolValue boolValue = (BoolValue)theEObject;
        T result = caseBoolValue(boolValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_DATA_DEF:
      {
        ProcessDataDef processDataDef = (ProcessDataDef)theEObject;
        T result = caseProcessDataDef(processDataDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_PROPERTY_DEF:
      {
        ProcessPropertyDef processPropertyDef = (ProcessPropertyDef)theEObject;
        T result = caseProcessPropertyDef(processPropertyDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_PROPERTY_NAME:
      {
        ProcessPropertyName processPropertyName = (ProcessPropertyName)theEObject;
        T result = caseProcessPropertyName(processPropertyName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_DEF:
      {
        ProcessDef processDef = (ProcessDef)theEObject;
        T result = caseProcessDef(processDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PARAMETER_LIST:
      {
        ParameterList parameterList = (ParameterList)theEObject;
        T result = caseParameterList(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PARAMETER_ASSIGN:
      {
        ParameterAssign parameterAssign = (ParameterAssign)theEObject;
        T result = caseParameterAssign(parameterAssign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PARAMETER_NAME:
      {
        ParameterName parameterName = (ParameterName)theEObject;
        T result = caseParameterName(parameterName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS:
      {
        scheduling.dsl.Process process = (scheduling.dsl.Process)theEObject;
        T result = caseProcess(process);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROPERTY_ASSIGNMENT:
      {
        PropertyAssignment propertyAssignment = (PropertyAssignment)theEObject;
        T result = casePropertyAssignment(propertyAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_CONFIG:
      {
        ProcessConfig processConfig = (ProcessConfig)theEObject;
        T result = caseProcessConfig(processConfig);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONFIG_PROCESS:
      {
        ConfigProcess configProcess = (ConfigProcess)theEObject;
        T result = caseConfigProcess(configProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SPORADIC_PROCESS:
      {
        SporadicProcess sporadicProcess = (SporadicProcess)theEObject;
        T result = caseSporadicProcess(sporadicProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PERIODIC_PROCESS:
      {
        PeriodicProcess periodicProcess = (PeriodicProcess)theEObject;
        T result = casePeriodicProcess(periodicProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_INIT:
      {
        ProcessInit processInit = (ProcessInit)theEObject;
        T result = caseProcessInit(processInit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET:
      {
        Set set = (Set)theEObject;
        T result = caseSet(set);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ELEMENT:
      {
        Element element = (Element)theEObject;
        T result = caseElement(element);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_DSL:
      {
        SchedulerDSL schedulerDSL = (SchedulerDSL)theEObject;
        T result = caseSchedulerDSL(schedulerDSL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DEF_CORE:
      {
        DefCore defCore = (DefCore)theEObject;
        T result = caseDefCore(defCore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RTCTL:
      {
        RTCTL rtctl = (RTCTL)theEObject;
        T result = caseRTCTL(rtctl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.LTE:
      {
        LTE lte = (LTE)theEObject;
        T result = caseLTE(lte);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CTL_AT:
      {
        CTL_AT ctL_AT = (CTL_AT)theEObject;
        T result = caseCTL_AT(ctL_AT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VERIFY:
      {
        Verify verify = (Verify)theEObject;
        T result = caseVerify(verify);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ORDERING_DEF:
      {
        OrderingDef orderingDef = (OrderingDef)theEObject;
        T result = caseOrderingDef(orderingDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMP_VAR_DEF:
      {
        CompVarDef compVarDef = (CompVarDef)theEObject;
        T result = caseCompVarDef(compVarDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMP_VAR_DEFINATION:
      {
        CompVarDefination compVarDefination = (CompVarDefination)theEObject;
        T result = caseCompVarDefination(compVarDefination);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMP_VAR_NAME:
      {
        CompVarName compVarName = (CompVarName)theEObject;
        T result = caseCompVarName(compVarName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPARATION_DEF:
      {
        ComparationDef comparationDef = (ComparationDef)theEObject;
        T result = caseComparationDef(comparationDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPARATION_NAME:
      {
        ComparationName comparationName = (ComparationName)theEObject;
        T result = caseComparationName(comparationName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.RETURN_STATEMENT:
      {
        ReturnStatement returnStatement = (ReturnStatement)theEObject;
        T result = caseReturnStatement(returnStatement);
        if (result == null) result = caseStatement(returnStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_DEF:
      {
        SchedulerDef schedulerDef = (SchedulerDef)theEObject;
        T result = caseSchedulerDef(schedulerDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_INIT:
      {
        SchedulerInit schedulerInit = (SchedulerInit)theEObject;
        T result = caseSchedulerInit(schedulerInit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IF_DEF:
      {
        IfDef ifDef = (IfDef)theEObject;
        T result = caseIfDef(ifDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INTERFACE_DEF:
      {
        InterfaceDef interfaceDef = (InterfaceDef)theEObject;
        T result = caseInterfaceDef(interfaceDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INTERFACE_FUNCTION:
      {
        InterfaceFunction interfaceFunction = (InterfaceFunction)theEObject;
        T result = caseInterfaceFunction(interfaceFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INTERFACE_PARAMETER_LIST:
      {
        InterfaceParameterList interfaceParameterList = (InterfaceParameterList)theEObject;
        T result = caseInterfaceParameterList(interfaceParameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INTERFACE_PARAMETER_DECLARE:
      {
        InterfaceParameterDeclare interfaceParameterDeclare = (InterfaceParameterDeclare)theEObject;
        T result = caseInterfaceParameterDeclare(interfaceParameterDeclare);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FUNCTION_NAME:
      {
        FunctionName functionName = (FunctionName)theEObject;
        T result = caseFunctionName(functionName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_DEF:
      {
        VarDef varDef = (VarDef)theEObject;
        T result = caseVarDef(varDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_DECL:
      {
        VarDecl varDecl = (VarDecl)theEObject;
        T result = caseVarDecl(varDecl);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_BLOCK_DEF:
      {
        VarBlockDef varBlockDef = (VarBlockDef)theEObject;
        T result = caseVarBlockDef(varBlockDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_SINGLE_DEF:
      {
        VarSingleDef varSingleDef = (VarSingleDef)theEObject;
        T result = caseVarSingleDef(varSingleDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_DEFINITION:
      {
        VarDefinition varDefinition = (VarDefinition)theEObject;
        T result = caseVarDefinition(varDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.VAR_NAME:
      {
        VarName varName = (VarName)theEObject;
        T result = caseVarName(varName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_DATA_DEF:
      {
        SchedulerDataDef schedulerDataDef = (SchedulerDataDef)theEObject;
        T result = caseSchedulerDataDef(schedulerDataDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DATA_DEF:
      {
        DataDef dataDef = (DataDef)theEObject;
        T result = caseDataDef(dataDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DATA_BLOCK_DEF:
      {
        DataBlockDef dataBlockDef = (DataBlockDef)theEObject;
        T result = caseDataBlockDef(dataBlockDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DATA_SINGLE_DEF:
      {
        DataSingleDef dataSingleDef = (DataSingleDef)theEObject;
        T result = caseDataSingleDef(dataSingleDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_PROPERTY_DEF:
      {
        SchedulerPropertyDef schedulerPropertyDef = (SchedulerPropertyDef)theEObject;
        T result = caseSchedulerPropertyDef(schedulerPropertyDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_PROPERTY_NAME:
      {
        SchedulerPropertyName schedulerPropertyName = (SchedulerPropertyName)theEObject;
        T result = caseSchedulerPropertyName(schedulerPropertyName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_COLLECTION_DEF:
      {
        SchedulerCollectionDef schedulerCollectionDef = (SchedulerCollectionDef)theEObject;
        T result = caseSchedulerCollectionDef(schedulerCollectionDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SCHEDULER_SET:
      {
        SchedulerSet schedulerSet = (SchedulerSet)theEObject;
        T result = caseSchedulerSet(schedulerSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GENERATE:
      {
        Generate generate = (Generate)theEObject;
        T result = caseGenerate(generate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_CONFIGURATION:
      {
        GenConfiguration genConfiguration = (GenConfiguration)theEObject;
        T result = caseGenConfiguration(genConfiguration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GENERATE_OPTION:
      {
        GenerateOption generateOption = (GenerateOption)theEObject;
        T result = caseGenerateOption(generateOption);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DIRECTORY:
      {
        Directory directory = (Directory)theEObject;
        T result = caseDirectory(directory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FILE_NAME:
      {
        FileName fileName = (FileName)theEObject;
        T result = caseFileName(fileName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FILE_EXTENSION:
      {
        FileExtension fileExtension = (FileExtension)theEObject;
        T result = caseFileExtension(fileExtension);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.TEST_PART:
      {
        TestPart testPart = (TestPart)theEObject;
        T result = caseTestPart(testPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_PART:
      {
        GenPart genPart = (GenPart)theEObject;
        T result = caseGenPart(genPart);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_COMPONENT:
      {
        GenComponent genComponent = (GenComponent)theEObject;
        T result = caseGenComponent(genComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPONENT:
      {
        Component component = (Component)theEObject;
        T result = caseComponent(component);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_GENERATION:
      {
        ProcessGeneration processGeneration = (ProcessGeneration)theEObject;
        T result = caseProcessGeneration(processGeneration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.STEP_GENERATION:
      {
        StepGeneration stepGeneration = (StepGeneration)theEObject;
        T result = caseStepGeneration(stepGeneration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.TEMPLATE:
      {
        Template template = (Template)theEObject;
        T result = caseTemplate(template);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_TEMPLATE:
      {
        SetTemplate setTemplate = (SetTemplate)theEObject;
        T result = caseSetTemplate(setTemplate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BEHAVIOR:
      {
        Behavior behavior = (Behavior)theEObject;
        T result = caseBehavior(behavior);
        if (result == null) result = caseAtomic(behavior);
        if (result == null) result = caseExpression(behavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT_TEMPLATE:
      {
        EventTemplate eventTemplate = (EventTemplate)theEObject;
        T result = caseEventTemplate(eventTemplate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ND_BEHAVIOR:
      {
        ND_Behavior nD_Behavior = (ND_Behavior)theEObject;
        T result = caseND_Behavior(nD_Behavior);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.HANDLER_DEF:
      {
        HandlerDef handlerDef = (HandlerDef)theEObject;
        T result = caseHandlerDef(handlerDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT_DEF:
      {
        EventDef eventDef = (EventDef)theEObject;
        T result = caseEventDef(eventDef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT_OPT:
      {
        EventOpt eventOpt = (EventOpt)theEObject;
        T result = caseEventOpt(eventOpt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.OPT:
      {
        Opt opt = (Opt)theEObject;
        T result = caseOpt(opt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EVENT_STM:
      {
        EventStm eventStm = (EventStm)theEObject;
        T result = caseEventStm(eventStm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.STM:
      {
        Stm stm = (Stm)theEObject;
        T result = caseStm(stm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.JAVA_CODE:
      {
        JavaCode javaCode = (JavaCode)theEObject;
        T result = caseJavaCode(javaCode);
        if (result == null) result = caseStatement(javaCode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.DECLARE_PROCESS:
      {
        DeclareProcess declareProcess = (DeclareProcess)theEObject;
        T result = caseDeclareProcess(declareProcess);
        if (result == null) result = caseStatement(declareProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_PROCESS:
      {
        SetProcess setProcess = (SetProcess)theEObject;
        T result = caseSetProcess(setProcess);
        if (result == null) result = caseStatement(setProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_EXEC_TIME:
      {
        SetExecTime setExecTime = (SetExecTime)theEObject;
        T result = caseSetExecTime(setExecTime);
        if (result == null) result = caseStatement(setExecTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_RETURN_COL:
      {
        SetReturnCol setReturnCol = (SetReturnCol)theEObject;
        T result = caseSetReturnCol(setReturnCol);
        if (result == null) result = caseStatement(setReturnCol);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_RETURN_SET:
      {
        SetReturnSet setReturnSet = (SetReturnSet)theEObject;
        T result = caseSetReturnSet(setReturnSet);
        if (result == null) result = caseStatement(setReturnSet);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHECK_POINT:
      {
        CheckPoint checkPoint = (CheckPoint)theEObject;
        T result = caseCheckPoint(checkPoint);
        if (result == null) result = caseStatement(checkPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.POINT_ID:
      {
        PointID pointID = (PointID)theEObject;
        T result = casePointID(pointID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CALL_FUNCTION:
      {
        CallFunction callFunction = (CallFunction)theEObject;
        T result = caseCallFunction(callFunction);
        if (result == null) result = caseStatement(callFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.REMOVE_PROCESS:
      {
        RemoveProcess removeProcess = (RemoveProcess)theEObject;
        T result = caseRemoveProcess(removeProcess);
        if (result == null) result = caseStatement(removeProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MOVE_PROCESS:
      {
        MoveProcess moveProcess = (MoveProcess)theEObject;
        T result = caseMoveProcess(moveProcess);
        if (result == null) result = caseStatement(moveProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.REORDER_PROCESS:
      {
        ReorderProcess reorderProcess = (ReorderProcess)theEObject;
        T result = caseReorderProcess(reorderProcess);
        if (result == null) result = caseStatement(reorderProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SET_PROCESS_INSTANCE:
      {
        SetProcessInstance setProcessInstance = (SetProcessInstance)theEObject;
        T result = caseSetProcessInstance(setProcessInstance);
        if (result == null) result = caseStatement(setProcessInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.LOOP_PROCESS:
      {
        LoopProcess loopProcess = (LoopProcess)theEObject;
        T result = caseLoopProcess(loopProcess);
        if (result == null) result = caseStatement(loopProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHANGE_ACTION:
      {
        ChangeAction changeAction = (ChangeAction)theEObject;
        T result = caseChangeAction(changeAction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GET_PROCESS:
      {
        GetProcess getProcess = (GetProcess)theEObject;
        T result = caseGetProcess(getProcess);
        if (result == null) result = caseStatement(getProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXECUTE_PROCESS:
      {
        ExecuteProcess executeProcess = (ExecuteProcess)theEObject;
        T result = caseExecuteProcess(executeProcess);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseStatement(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BLOCK_STATEMENT:
      {
        BlockStatement blockStatement = (BlockStatement)theEObject;
        T result = caseBlockStatement(blockStatement);
        if (result == null) result = caseStatement(blockStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NEW_PROCESS_STATEMENT:
      {
        NewProcessStatement newProcessStatement = (NewProcessStatement)theEObject;
        T result = caseNewProcessStatement(newProcessStatement);
        if (result == null) result = caseStatement(newProcessStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NEW_ELEMENT:
      {
        NewElement newElement = (NewElement)theEObject;
        T result = caseNewElement(newElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PARA_VALUE:
      {
        ParaValue paraValue = (ParaValue)theEObject;
        T result = caseParaValue(paraValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ASSERT_STATEMENT:
      {
        AssertStatement assertStatement = (AssertStatement)theEObject;
        T result = caseAssertStatement(assertStatement);
        if (result == null) result = caseStatement(assertStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PRINT_STATEMENT:
      {
        PrintStatement printStatement = (PrintStatement)theEObject;
        T result = casePrintStatement(printStatement);
        if (result == null) result = caseStatement(printStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PRINT_LOG_STATEMENT:
      {
        PrintLogStatement printLogStatement = (PrintLogStatement)theEObject;
        T result = casePrintLogStatement(printLogStatement);
        if (result == null) result = caseStatement(printLogStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_CODE_STATEMENT:
      {
        GenCodeStatement genCodeStatement = (GenCodeStatement)theEObject;
        T result = caseGenCodeStatement(genCodeStatement);
        if (result == null) result = caseStatement(genCodeStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GEN_LN_CODE_STATEMENT:
      {
        GenLnCodeStatement genLnCodeStatement = (GenLnCodeStatement)theEObject;
        T result = caseGenLnCodeStatement(genLnCodeStatement);
        if (result == null) result = caseStatement(genLnCodeStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHANGE_VALUE:
      {
        ChangeValue changeValue = (ChangeValue)theEObject;
        T result = caseChangeValue(changeValue);
        if (result == null) result = caseASSIGN(changeValue);
        if (result == null) result = caseStatement(changeValue);
        if (result == null) result = caseAction(changeValue);
        if (result == null) result = caseAtomic(changeValue);
        if (result == null) result = caseExpression(changeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHANGE_VALUE_UN_OP:
      {
        ChangeValueUnOp changeValueUnOp = (ChangeValueUnOp)theEObject;
        T result = caseChangeValueUnOp(changeValueUnOp);
        if (result == null) result = caseChangeValue(changeValueUnOp);
        if (result == null) result = caseASSIGN(changeValueUnOp);
        if (result == null) result = caseStatement(changeValueUnOp);
        if (result == null) result = caseAction(changeValueUnOp);
        if (result == null) result = caseAtomic(changeValueUnOp);
        if (result == null) result = caseExpression(changeValueUnOp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHANGE_VALUE_EXPRESSION:
      {
        ChangeValueExpression changeValueExpression = (ChangeValueExpression)theEObject;
        T result = caseChangeValueExpression(changeValueExpression);
        if (result == null) result = caseChangeValue(changeValueExpression);
        if (result == null) result = caseASSIGN(changeValueExpression);
        if (result == null) result = caseStatement(changeValueExpression);
        if (result == null) result = caseAction(changeValueExpression);
        if (result == null) result = caseAtomic(changeValueExpression);
        if (result == null) result = caseExpression(changeValueExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CHANGE_LIST_VALUE:
      {
        ChangeListValue changeListValue = (ChangeListValue)theEObject;
        T result = caseChangeListValue(changeListValue);
        if (result == null) result = caseChangeValue(changeListValue);
        if (result == null) result = caseASSIGN(changeListValue);
        if (result == null) result = caseStatement(changeListValue);
        if (result == null) result = caseAction(changeListValue);
        if (result == null) result = caseAtomic(changeListValue);
        if (result == null) result = caseExpression(changeListValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GET_ID_EXPRESSION:
      {
        GetIDExpression getIDExpression = (GetIDExpression)theEObject;
        T result = caseGetIDExpression(getIDExpression);
        if (result == null) result = caseExpression(getIDExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EMPTY_EXPRESSION:
      {
        EmptyExpression emptyExpression = (EmptyExpression)theEObject;
        T result = caseEmptyExpression(emptyExpression);
        if (result == null) result = caseExpression(emptyExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.FULL_EXPRESSION:
      {
        FullExpression fullExpression = (FullExpression)theEObject;
        T result = caseFullExpression(fullExpression);
        if (result == null) result = caseExpression(fullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IN_EXPRESSION:
      {
        InExpression inExpression = (InExpression)theEObject;
        T result = caseInExpression(inExpression);
        if (result == null) result = caseExpression(inExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IN_PID_EXPRESSION:
      {
        InPIDExpression inPIDExpression = (InPIDExpression)theEObject;
        T result = caseInPIDExpression(inPIDExpression);
        if (result == null) result = caseExpression(inPIDExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IN_PEXPRESSION:
      {
        InPExpression inPExpression = (InPExpression)theEObject;
        T result = caseInPExpression(inPExpression);
        if (result == null) result = caseExpression(inPExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXIST_EXPRESSION:
      {
        ExistExpression existExpression = (ExistExpression)theEObject;
        T result = caseExistExpression(existExpression);
        if (result == null) result = caseExpression(existExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXIST_PID:
      {
        ExistPID existPID = (ExistPID)theEObject;
        T result = caseExistPID(existPID);
        if (result == null) result = caseExpression(existPID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EXIST_P:
      {
        ExistP existP = (ExistP)theEObject;
        T result = caseExistP(existP);
        if (result == null) result = caseExpression(existP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NULL_EXPRESSION:
      {
        NullExpression nullExpression = (NullExpression)theEObject;
        T result = caseNullExpression(nullExpression);
        if (result == null) result = caseExpression(nullExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.HAS_NAME_EXPRESSION:
      {
        HasNameExpression hasNameExpression = (HasNameExpression)theEObject;
        T result = caseHasNameExpression(hasNameExpression);
        if (result == null) result = caseExpression(hasNameExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.HAS_ID:
      {
        HasID hasID = (HasID)theEObject;
        T result = caseHasID(hasID);
        if (result == null) result = caseExpression(hasID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.HAS_IDINT:
      {
        HasIDINT hasIDINT = (HasIDINT)theEObject;
        T result = caseHasIDINT(hasIDINT);
        if (result == null) result = caseExpression(hasIDINT);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GET_NAME:
      {
        GetName getName = (GetName)theEObject;
        T result = caseGetName(getName);
        if (result == null) result = caseExpression(getName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.ATOMIC:
      {
        Atomic atomic = (Atomic)theEObject;
        T result = caseAtomic(atomic);
        if (result == null) result = caseExpression(atomic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.SYS_VAR:
      {
        SysVar sysVar = (SysVar)theEObject;
        T result = caseSysVar(sysVar);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.QUALIFIED_NAMES:
      {
        QualifiedNames qualifiedNames = (QualifiedNames)theEObject;
        T result = caseQualifiedNames(qualifiedNames);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROPER:
      {
        Proper proper = (Proper)theEObject;
        T result = caseProper(proper);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.LIST_ELEMENT:
      {
        ListElement listElement = (ListElement)theEObject;
        T result = caseListElement(listElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INVARIATNTS:
      {
        Invariatnts invariatnts = (Invariatnts)theEObject;
        T result = caseInvariatnts(invariatnts);
        if (result == null) result = caseInvariants(invariatnts);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.COMPARISON:
      {
        Comparison comparison = (Comparison)theEObject;
        T result = caseComparison(comparison);
        if (result == null) result = caseExpression(comparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PLUS:
      {
        Plus plus = (Plus)theEObject;
        T result = casePlus(plus);
        if (result == null) result = caseExpression(plus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MINUS:
      {
        Minus minus = (Minus)theEObject;
        T result = caseMinus(minus);
        if (result == null) result = caseExpression(minus);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.MUL_OR_DIV:
      {
        MulOrDiv mulOrDiv = (MulOrDiv)theEObject;
        T result = caseMulOrDiv(mulOrDiv);
        if (result == null) result = caseExpression(mulOrDiv);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.IMPLIES:
      {
        Implies implies = (Implies)theEObject;
        T result = caseImplies(implies);
        if (result == null) result = caseExpression(implies);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.NOT:
      {
        Not not = (Not)theEObject;
        T result = caseNot(not);
        if (result == null) result = caseExpression(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INT_CONSTANT:
      {
        IntConstant intConstant = (IntConstant)theEObject;
        T result = caseIntConstant(intConstant);
        if (result == null) result = caseAtomic(intConstant);
        if (result == null) result = caseExpression(intConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CURENT_CORE:
      {
        CurentCore curentCore = (CurentCore)theEObject;
        T result = caseCurentCore(curentCore);
        if (result == null) result = caseAtomic(curentCore);
        if (result == null) result = caseExpression(curentCore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BOOL_CONSTANT:
      {
        BoolConstant boolConstant = (BoolConstant)theEObject;
        T result = caseBoolConstant(boolConstant);
        if (result == null) result = caseAtomic(boolConstant);
        if (result == null) result = caseExpression(boolConstant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.STATE_ID:
      {
        StateID stateID = (StateID)theEObject;
        T result = caseStateID(stateID);
        if (result == null) result = caseAtomic(stateID);
        if (result == null) result = caseExpression(stateID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.BRANCH_ID:
      {
        BranchID branchID = (BranchID)theEObject;
        T result = caseBranchID(branchID);
        if (result == null) result = caseAtomic(branchID);
        if (result == null) result = caseExpression(branchID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.STEP:
      {
        Step step = (Step)theEObject;
        T result = caseStep(step);
        if (result == null) result = caseAtomic(step);
        if (result == null) result = caseExpression(step);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.TOTAL_STEP:
      {
        TotalStep totalStep = (TotalStep)theEObject;
        T result = caseTotalStep(totalStep);
        if (result == null) result = caseAtomic(totalStep);
        if (result == null) result = caseExpression(totalStep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GET_INSTANCE:
      {
        GetInstance getInstance = (GetInstance)theEObject;
        T result = caseGetInstance(getInstance);
        if (result == null) result = caseAtomic(getInstance);
        if (result == null) result = caseExpression(getInstance);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.GET_PID:
      {
        GetPID getPID = (GetPID)theEObject;
        T result = caseGetPID(getPID);
        if (result == null) result = caseAtomic(getPID);
        if (result == null) result = caseExpression(getPID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.INSTANCE_ID:
      {
        InstanceID instanceID = (InstanceID)theEObject;
        T result = caseInstanceID(instanceID);
        if (result == null) result = caseAtomic(instanceID);
        if (result == null) result = caseExpression(instanceID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_ID:
      {
        ProcessID processID = (ProcessID)theEObject;
        T result = caseProcessID(processID);
        if (result == null) result = caseAtomic(processID);
        if (result == null) result = caseExpression(processID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.PROCESS_NAME:
      {
        ProcessName processName = (ProcessName)theEObject;
        T result = caseProcessName(processName);
        if (result == null) result = caseAtomic(processName);
        if (result == null) result = caseExpression(processName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case DslPackage.CONTAINS:
      {
        Contains contains = (Contains)theEObject;
        T result = caseContains(contains);
        if (result == null) result = caseAtomic(contains);
        if (result == null) result = caseExpression(contains);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen DSL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen DSL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenDSL(GenDSL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ISR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ISR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseISR(ISR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test DSL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test DSL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTestDSL(TestDSL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Configs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Configs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfigs(Configs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfig(Config object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfiguration(Configuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Init</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Init</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarInit(VarInit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection Init</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection Init</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollectionInit(CollectionInit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scenarios</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scenarios</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScenarios(Scenarios object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Permutation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Permutation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePermutation(Permutation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Flow</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Flow</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFlow(Flow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ENAME</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ENAME</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseENAME(ENAME object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rules</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rules</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRules(Rules object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rule</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rule</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRule(Rule object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCondition(Condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecification(Specification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declare List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declare List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclareList(DeclareList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>One Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>One Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOneDec(OneDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumDec(EnumDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumType(EnumType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstDec(ConstDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDec(VarDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>VDec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>VDec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVDec(VDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayDec(ArrayDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Chan Dec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Chan Dec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChanDec(ChanDec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Define</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Define</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefine(Define object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefList(RefList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunction(Function object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ref List Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ref List Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRefListItem(RefListItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Func Para</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Func Para</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncPara(FuncPara object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declare Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declare Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclareEvent(DeclareEvent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventFunction(EventFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Para List Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Para List Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParaListItem(ParaListItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELABEL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELABEL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELABEL(ELABEL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceAction(SequenceAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAction(Action object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>GUARD</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>GUARD</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGUARD(GUARD object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IFs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IFs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIFs(IFs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ASSIGN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ASSIGN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseASSIGN(ASSIGN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Options</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Options</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOptions(Options object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ELS Es</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ELS Es</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseELSEs(ELSEs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SKIP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SKIP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSKIP(SKIP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessConfiguration(ProcessConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Def Behavior Proc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Def Behavior Proc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefBehaviorProc(DefBehaviorProc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proc Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proc Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcType(ProcType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessType(ProcessType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Att Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Att Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttDef(AttDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraints</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraints</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraints(Constraints object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behaviors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behaviors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehaviors(ProcessBehaviors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessBehavior(ProcessBehavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constructor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constructor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstructor(Constructor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethod(Method object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariants</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariants</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariants(Invariants object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assign Parameters</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assign Parameters</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignParameters(AssignParameters object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process DSL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process DSL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessDSL(ProcessDSL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValue(Value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListDef(ListDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRange(Range object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Num Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Num Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumValue(NumValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolValue(BoolValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Data Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Data Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessDataDef(ProcessDataDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Property Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Property Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessPropertyDef(ProcessPropertyDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Property Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Property Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessPropertyName(ProcessPropertyName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessDef(ProcessDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterList(ParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Assign</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Assign</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterAssign(ParameterAssign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterName(ParameterName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcess(scheduling.dsl.Process object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyAssignment(PropertyAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Config</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Config</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessConfig(ProcessConfig object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Config Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Config Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConfigProcess(ConfigProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sporadic Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sporadic Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSporadicProcess(SporadicProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Periodic Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Periodic Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePeriodicProcess(PeriodicProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Init</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Init</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessInit(ProcessInit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSet(Set object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElement(Element object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler DSL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler DSL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerDSL(SchedulerDSL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Def Core</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Def Core</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefCore(DefCore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RTCTL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RTCTL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRTCTL(RTCTL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LTE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LTE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLTE(LTE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CTL AT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CTL AT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCTL_AT(CTL_AT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Verify</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Verify</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVerify(Verify object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ordering Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ordering Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrderingDef(OrderingDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comp Var Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comp Var Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompVarDef(CompVarDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comp Var Defination</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comp Var Defination</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompVarDefination(CompVarDefination object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comp Var Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comp Var Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCompVarName(CompVarName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparation Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparation Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparationDef(ComparationDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparation Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparation Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparationName(ComparationName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnStatement(ReturnStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerDef(SchedulerDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Init</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Init</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerInit(SchedulerInit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfDef(IfDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceDef(InterfaceDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceFunction(InterfaceFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceParameterList(InterfaceParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Parameter Declare</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Parameter Declare</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceParameterDeclare(InterfaceParameterDeclare object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionName(FunctionName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDef(VarDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Decl</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDecl(VarDecl object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Block Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Block Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarBlockDef(VarBlockDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Single Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Single Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarSingleDef(VarSingleDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarDefinition(VarDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarName(VarName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Data Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Data Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerDataDef(SchedulerDataDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataDef(DataDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Block Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Block Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataBlockDef(DataBlockDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Single Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Single Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataSingleDef(DataSingleDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Property Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Property Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerPropertyDef(SchedulerPropertyDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Property Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Property Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerPropertyName(SchedulerPropertyName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Collection Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Collection Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerCollectionDef(SchedulerCollectionDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Scheduler Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Scheduler Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSchedulerSet(SchedulerSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenerate(Generate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Configuration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Configuration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenConfiguration(GenConfiguration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generate Option</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generate Option</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenerateOption(GenerateOption object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Directory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Directory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDirectory(Directory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileName(FileName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File Extension</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File Extension</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileExtension(FileExtension object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Test Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Test Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTestPart(TestPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenPart(GenPart object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenComponent(GenComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponent(Component object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Generation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Generation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessGeneration(ProcessGeneration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Step Generation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Step Generation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStepGeneration(StepGeneration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Template</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Template</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTemplate(Template object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Template</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Template</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetTemplate(SetTemplate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBehavior(Behavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Template</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Template</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventTemplate(EventTemplate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ND Behavior</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ND Behavior</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseND_Behavior(ND_Behavior object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Handler Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Handler Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHandlerDef(HandlerDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Def</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Def</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventDef(EventDef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Opt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Opt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventOpt(EventOpt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Opt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Opt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpt(Opt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event Stm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event Stm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEventStm(EventStm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStm(Stm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Java Code</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Java Code</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJavaCode(JavaCode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declare Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declare Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclareProcess(DeclareProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetProcess(SetProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Exec Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Exec Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetExecTime(SetExecTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Return Col</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Return Col</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetReturnCol(SetReturnCol object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Return Set</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Return Set</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetReturnSet(SetReturnSet object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Check Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Check Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCheckPoint(CheckPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Point ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Point ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePointID(PointID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Call Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Call Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCallFunction(CallFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Remove Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Remove Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRemoveProcess(RemoveProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Move Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Move Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMoveProcess(MoveProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reorder Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reorder Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReorderProcess(ReorderProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Process Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Process Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetProcessInstance(SetProcessInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loop Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loop Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoopProcess(LoopProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Action</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Action</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeAction(ChangeAction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetProcess(GetProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execute Process</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execute Process</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecuteProcess(ExecuteProcess object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockStatement(BlockStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Process Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Process Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewProcessStatement(NewProcessStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewElement(NewElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Para Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Para Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParaValue(ParaValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assert Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assert Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssertStatement(AssertStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintStatement(PrintStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Print Log Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Print Log Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrintLogStatement(PrintLogStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Code Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Code Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenCodeStatement(GenCodeStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Ln Code Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Ln Code Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenLnCodeStatement(GenLnCodeStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeValue(ChangeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Value Un Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Value Un Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeValueUnOp(ChangeValueUnOp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change Value Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change Value Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeValueExpression(ChangeValueExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Change List Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Change List Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseChangeListValue(ChangeListValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get ID Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get ID Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetIDExpression(GetIDExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Empty Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Empty Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEmptyExpression(EmptyExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Full Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Full Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFullExpression(FullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInExpression(InExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In PID Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In PID Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInPIDExpression(InPIDExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>In PExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>In PExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInPExpression(InPExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistExpression(ExistExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist PID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist PID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistPID(ExistPID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exist P</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exist P</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistP(ExistP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullExpression(NullExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Has Name Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Has Name Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHasNameExpression(HasNameExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Has ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Has ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHasID(HasID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Has IDINT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Has IDINT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHasIDINT(HasIDINT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetName(GetName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atomic</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atomic</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtomic(Atomic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sys Var</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sys Var</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSysVar(SysVar object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualified Names</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualified Names</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifiedNames(QualifiedNames object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Proper</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Proper</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProper(Proper object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListElement(ListElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariatnts</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariatnts</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariatnts(Invariatnts object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparison(Comparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlus(Plus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinus(Minus object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Or Div</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Or Div</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOrDiv(MulOrDiv object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Implies</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Implies</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImplies(Implies object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNot(Not object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstant(IntConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Curent Core</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Curent Core</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCurentCore(CurentCore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolConstant(BoolConstant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateID(StateID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Branch ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Branch ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBranchID(BranchID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStep(Step object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Total Step</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Total Step</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTotalStep(TotalStep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get Instance</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get Instance</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetInstance(GetInstance object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Get PID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Get PID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGetPID(GetPID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Instance ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Instance ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInstanceID(InstanceID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessID(ProcessID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Process Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Process Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseProcessName(ProcessName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contains</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contains</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContains(Contains object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //DslSwitch
