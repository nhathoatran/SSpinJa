/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import scheduling.dsl.ComparationName;
import scheduling.dsl.DslPackage;
import scheduling.dsl.SchedulerCollectionDef;
import scheduling.dsl.SchedulerSet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Scheduler Collection Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.SchedulerCollectionDefImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerCollectionDefImpl#getName <em>Name</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerCollectionDefImpl#getComp <em>Comp</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerCollectionDefImpl#getOperationtype <em>Operationtype</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SchedulerCollectionDefImpl extends MinimalEObjectImpl.Container implements SchedulerCollectionDef
{
  /**
   * The default value of the '{@link #getParent() <em>Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected static final String PARENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected String parent = PARENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected SchedulerSet name;

  /**
   * The cached value of the '{@link #getComp() <em>Comp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComp()
   * @generated
   * @ordered
   */
  protected EList<ComparationName> comp;

  /**
   * The default value of the '{@link #getOperationtype() <em>Operationtype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationtype()
   * @generated
   * @ordered
   */
  protected static final scheduling.dsl.String OPERATIONTYPE_EDEFAULT = scheduling.dsl.String.TEMP;

  /**
   * The cached value of the '{@link #getOperationtype() <em>Operationtype</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperationtype()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.String operationtype = OPERATIONTYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchedulerCollectionDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getSchedulerCollectionDef();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParent(String newParent)
  {
    String oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_COLLECTION_DEF__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetName(SchedulerSet newName, NotificationChain msgs)
  {
    SchedulerSet oldName = name;
    name = newName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_COLLECTION_DEF__NAME, oldName, newName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(SchedulerSet newName)
  {
    if (newName != name)
    {
      NotificationChain msgs = null;
      if (name != null)
        msgs = ((InternalEObject)name).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_COLLECTION_DEF__NAME, null, msgs);
      if (newName != null)
        msgs = ((InternalEObject)newName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_COLLECTION_DEF__NAME, null, msgs);
      msgs = basicSetName(newName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_COLLECTION_DEF__NAME, newName, newName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ComparationName> getComp()
  {
    if (comp == null)
    {
      comp = new EObjectContainmentEList<ComparationName>(ComparationName.class, this, DslPackage.SCHEDULER_COLLECTION_DEF__COMP);
    }
    return comp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.String getOperationtype()
  {
    return operationtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperationtype(scheduling.dsl.String newOperationtype)
  {
    scheduling.dsl.String oldOperationtype = operationtype;
    operationtype = newOperationtype == null ? OPERATIONTYPE_EDEFAULT : newOperationtype;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_COLLECTION_DEF__OPERATIONTYPE, oldOperationtype, operationtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_COLLECTION_DEF__NAME:
        return basicSetName(null, msgs);
      case DslPackage.SCHEDULER_COLLECTION_DEF__COMP:
        return ((InternalEList<?>)getComp()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_COLLECTION_DEF__PARENT:
        return getParent();
      case DslPackage.SCHEDULER_COLLECTION_DEF__NAME:
        return getName();
      case DslPackage.SCHEDULER_COLLECTION_DEF__COMP:
        return getComp();
      case DslPackage.SCHEDULER_COLLECTION_DEF__OPERATIONTYPE:
        return getOperationtype();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_COLLECTION_DEF__PARENT:
        setParent((String)newValue);
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__NAME:
        setName((SchedulerSet)newValue);
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__COMP:
        getComp().clear();
        getComp().addAll((Collection<? extends ComparationName>)newValue);
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__OPERATIONTYPE:
        setOperationtype((scheduling.dsl.String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_COLLECTION_DEF__PARENT:
        setParent(PARENT_EDEFAULT);
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__NAME:
        setName((SchedulerSet)null);
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__COMP:
        getComp().clear();
        return;
      case DslPackage.SCHEDULER_COLLECTION_DEF__OPERATIONTYPE:
        setOperationtype(OPERATIONTYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_COLLECTION_DEF__PARENT:
        return PARENT_EDEFAULT == null ? parent != null : !PARENT_EDEFAULT.equals(parent);
      case DslPackage.SCHEDULER_COLLECTION_DEF__NAME:
        return name != null;
      case DslPackage.SCHEDULER_COLLECTION_DEF__COMP:
        return comp != null && !comp.isEmpty();
      case DslPackage.SCHEDULER_COLLECTION_DEF__OPERATIONTYPE:
        return operationtype != OPERATIONTYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (parent: ");
    result.append(parent);
    result.append(", operationtype: ");
    result.append(operationtype);
    result.append(')');
    return result.toString();
  }

} //SchedulerCollectionDefImpl
