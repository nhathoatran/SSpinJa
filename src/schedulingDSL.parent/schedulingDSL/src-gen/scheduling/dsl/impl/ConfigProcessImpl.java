/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.ConfigProcess;
import scheduling.dsl.DslPackage;
import scheduling.dsl.PeriodicProcess;
import scheduling.dsl.SporadicProcess;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Config Process</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.ConfigProcessImpl#getSporadic <em>Sporadic</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ConfigProcessImpl#getPeriodic <em>Periodic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigProcessImpl extends MinimalEObjectImpl.Container implements ConfigProcess
{
  /**
   * The cached value of the '{@link #getSporadic() <em>Sporadic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSporadic()
   * @generated
   * @ordered
   */
  protected SporadicProcess sporadic;

  /**
   * The cached value of the '{@link #getPeriodic() <em>Periodic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPeriodic()
   * @generated
   * @ordered
   */
  protected PeriodicProcess periodic;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigProcessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getConfigProcess();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SporadicProcess getSporadic()
  {
    return sporadic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSporadic(SporadicProcess newSporadic, NotificationChain msgs)
  {
    SporadicProcess oldSporadic = sporadic;
    sporadic = newSporadic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CONFIG_PROCESS__SPORADIC, oldSporadic, newSporadic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSporadic(SporadicProcess newSporadic)
  {
    if (newSporadic != sporadic)
    {
      NotificationChain msgs = null;
      if (sporadic != null)
        msgs = ((InternalEObject)sporadic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIG_PROCESS__SPORADIC, null, msgs);
      if (newSporadic != null)
        msgs = ((InternalEObject)newSporadic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIG_PROCESS__SPORADIC, null, msgs);
      msgs = basicSetSporadic(newSporadic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CONFIG_PROCESS__SPORADIC, newSporadic, newSporadic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodicProcess getPeriodic()
  {
    return periodic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPeriodic(PeriodicProcess newPeriodic, NotificationChain msgs)
  {
    PeriodicProcess oldPeriodic = periodic;
    periodic = newPeriodic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CONFIG_PROCESS__PERIODIC, oldPeriodic, newPeriodic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPeriodic(PeriodicProcess newPeriodic)
  {
    if (newPeriodic != periodic)
    {
      NotificationChain msgs = null;
      if (periodic != null)
        msgs = ((InternalEObject)periodic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIG_PROCESS__PERIODIC, null, msgs);
      if (newPeriodic != null)
        msgs = ((InternalEObject)newPeriodic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIG_PROCESS__PERIODIC, null, msgs);
      msgs = basicSetPeriodic(newPeriodic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CONFIG_PROCESS__PERIODIC, newPeriodic, newPeriodic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.CONFIG_PROCESS__SPORADIC:
        return basicSetSporadic(null, msgs);
      case DslPackage.CONFIG_PROCESS__PERIODIC:
        return basicSetPeriodic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.CONFIG_PROCESS__SPORADIC:
        return getSporadic();
      case DslPackage.CONFIG_PROCESS__PERIODIC:
        return getPeriodic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.CONFIG_PROCESS__SPORADIC:
        setSporadic((SporadicProcess)newValue);
        return;
      case DslPackage.CONFIG_PROCESS__PERIODIC:
        setPeriodic((PeriodicProcess)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CONFIG_PROCESS__SPORADIC:
        setSporadic((SporadicProcess)null);
        return;
      case DslPackage.CONFIG_PROCESS__PERIODIC:
        setPeriodic((PeriodicProcess)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CONFIG_PROCESS__SPORADIC:
        return sporadic != null;
      case DslPackage.CONFIG_PROCESS__PERIODIC:
        return periodic != null;
    }
    return super.eIsSet(featureID);
  }

} //ConfigProcessImpl
