/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import scheduling.dsl.ComparationDef;
import scheduling.dsl.ComparationName;
import scheduling.dsl.DslPackage;
import scheduling.dsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Comparation Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.ComparationDefImpl#getCname <em>Cname</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ComparationDefImpl#getProcess1 <em>Process1</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ComparationDefImpl#getProcess2 <em>Process2</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ComparationDefImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ComparationDefImpl extends MinimalEObjectImpl.Container implements ComparationDef
{
  /**
   * The cached value of the '{@link #getCname() <em>Cname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCname()
   * @generated
   * @ordered
   */
  protected ComparationName cname;

  /**
   * The cached value of the '{@link #getProcess1() <em>Process1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcess1()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.Process process1;

  /**
   * The cached value of the '{@link #getProcess2() <em>Process2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcess2()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.Process process2;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComparationDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getComparationDef();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparationName getCname()
  {
    return cname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCname(ComparationName newCname, NotificationChain msgs)
  {
    ComparationName oldCname = cname;
    cname = newCname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__CNAME, oldCname, newCname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCname(ComparationName newCname)
  {
    if (newCname != cname)
    {
      NotificationChain msgs = null;
      if (cname != null)
        msgs = ((InternalEObject)cname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__CNAME, null, msgs);
      if (newCname != null)
        msgs = ((InternalEObject)newCname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__CNAME, null, msgs);
      msgs = basicSetCname(newCname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__CNAME, newCname, newCname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process getProcess1()
  {
    return process1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcess1(scheduling.dsl.Process newProcess1, NotificationChain msgs)
  {
    scheduling.dsl.Process oldProcess1 = process1;
    process1 = newProcess1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__PROCESS1, oldProcess1, newProcess1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcess1(scheduling.dsl.Process newProcess1)
  {
    if (newProcess1 != process1)
    {
      NotificationChain msgs = null;
      if (process1 != null)
        msgs = ((InternalEObject)process1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__PROCESS1, null, msgs);
      if (newProcess1 != null)
        msgs = ((InternalEObject)newProcess1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__PROCESS1, null, msgs);
      msgs = basicSetProcess1(newProcess1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__PROCESS1, newProcess1, newProcess1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process getProcess2()
  {
    return process2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcess2(scheduling.dsl.Process newProcess2, NotificationChain msgs)
  {
    scheduling.dsl.Process oldProcess2 = process2;
    process2 = newProcess2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__PROCESS2, oldProcess2, newProcess2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcess2(scheduling.dsl.Process newProcess2)
  {
    if (newProcess2 != process2)
    {
      NotificationChain msgs = null;
      if (process2 != null)
        msgs = ((InternalEObject)process2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__PROCESS2, null, msgs);
      if (newProcess2 != null)
        msgs = ((InternalEObject)newProcess2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMPARATION_DEF__PROCESS2, null, msgs);
      msgs = basicSetProcess2(newProcess2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COMPARATION_DEF__PROCESS2, newProcess2, newProcess2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, DslPackage.COMPARATION_DEF__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.COMPARATION_DEF__CNAME:
        return basicSetCname(null, msgs);
      case DslPackage.COMPARATION_DEF__PROCESS1:
        return basicSetProcess1(null, msgs);
      case DslPackage.COMPARATION_DEF__PROCESS2:
        return basicSetProcess2(null, msgs);
      case DslPackage.COMPARATION_DEF__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.COMPARATION_DEF__CNAME:
        return getCname();
      case DslPackage.COMPARATION_DEF__PROCESS1:
        return getProcess1();
      case DslPackage.COMPARATION_DEF__PROCESS2:
        return getProcess2();
      case DslPackage.COMPARATION_DEF__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.COMPARATION_DEF__CNAME:
        setCname((ComparationName)newValue);
        return;
      case DslPackage.COMPARATION_DEF__PROCESS1:
        setProcess1((scheduling.dsl.Process)newValue);
        return;
      case DslPackage.COMPARATION_DEF__PROCESS2:
        setProcess2((scheduling.dsl.Process)newValue);
        return;
      case DslPackage.COMPARATION_DEF__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COMPARATION_DEF__CNAME:
        setCname((ComparationName)null);
        return;
      case DslPackage.COMPARATION_DEF__PROCESS1:
        setProcess1((scheduling.dsl.Process)null);
        return;
      case DslPackage.COMPARATION_DEF__PROCESS2:
        setProcess2((scheduling.dsl.Process)null);
        return;
      case DslPackage.COMPARATION_DEF__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COMPARATION_DEF__CNAME:
        return cname != null;
      case DslPackage.COMPARATION_DEF__PROCESS1:
        return process1 != null;
      case DslPackage.COMPARATION_DEF__PROCESS2:
        return process2 != null;
      case DslPackage.COMPARATION_DEF__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ComparationDefImpl
