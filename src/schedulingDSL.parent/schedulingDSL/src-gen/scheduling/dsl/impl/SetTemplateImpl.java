/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.Expression;
import scheduling.dsl.SetTemplate;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Set Template</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.SetTemplateImpl#getTempl <em>Templ</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SetTemplateImpl extends MinimalEObjectImpl.Container implements SetTemplate
{
  /**
   * The cached value of the '{@link #getTempl() <em>Templ</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTempl()
   * @generated
   * @ordered
   */
  protected Expression templ;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SetTemplateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getSetTemplate();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTempl()
  {
    return templ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTempl(Expression newTempl, NotificationChain msgs)
  {
    Expression oldTempl = templ;
    templ = newTempl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SET_TEMPLATE__TEMPL, oldTempl, newTempl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTempl(Expression newTempl)
  {
    if (newTempl != templ)
    {
      NotificationChain msgs = null;
      if (templ != null)
        msgs = ((InternalEObject)templ).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SET_TEMPLATE__TEMPL, null, msgs);
      if (newTempl != null)
        msgs = ((InternalEObject)newTempl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SET_TEMPLATE__TEMPL, null, msgs);
      msgs = basicSetTempl(newTempl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SET_TEMPLATE__TEMPL, newTempl, newTempl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.SET_TEMPLATE__TEMPL:
        return basicSetTempl(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.SET_TEMPLATE__TEMPL:
        return getTempl();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.SET_TEMPLATE__TEMPL:
        setTempl((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SET_TEMPLATE__TEMPL:
        setTempl((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SET_TEMPLATE__TEMPL:
        return templ != null;
    }
    return super.eIsSet(featureID);
  }

} //SetTemplateImpl
