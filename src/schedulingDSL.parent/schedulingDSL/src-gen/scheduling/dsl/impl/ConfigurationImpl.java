/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import scheduling.dsl.CollectionInit;
import scheduling.dsl.Configuration;
import scheduling.dsl.DslPackage;
import scheduling.dsl.Element;
import scheduling.dsl.VarInit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.ConfigurationImpl#getVar <em>Var</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ConfigurationImpl#getCollection <em>Collection</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ConfigurationImpl#getProc <em>Proc</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ConfigurationImpl#getNul <em>Nul</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ConfigurationImpl#getElement <em>Element</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigurationImpl extends MinimalEObjectImpl.Container implements Configuration
{
  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected EList<VarInit> var;

  /**
   * The cached value of the '{@link #getCollection() <em>Collection</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCollection()
   * @generated
   * @ordered
   */
  protected EList<CollectionInit> collection;

  /**
   * The default value of the '{@link #getProc() <em>Proc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProc()
   * @generated
   * @ordered
   */
  protected static final String PROC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProc() <em>Proc</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProc()
   * @generated
   * @ordered
   */
  protected String proc = PROC_EDEFAULT;

  /**
   * The default value of the '{@link #getNul() <em>Nul</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNul()
   * @generated
   * @ordered
   */
  protected static final String NUL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNul() <em>Nul</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNul()
   * @generated
   * @ordered
   */
  protected String nul = NUL_EDEFAULT;

  /**
   * The cached value of the '{@link #getElement() <em>Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElement()
   * @generated
   * @ordered
   */
  protected Element element;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getConfiguration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<VarInit> getVar()
  {
    if (var == null)
    {
      var = new EObjectContainmentEList<VarInit>(VarInit.class, this, DslPackage.CONFIGURATION__VAR);
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<CollectionInit> getCollection()
  {
    if (collection == null)
    {
      collection = new EObjectContainmentEList<CollectionInit>(CollectionInit.class, this, DslPackage.CONFIGURATION__COLLECTION);
    }
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProc()
  {
    return proc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProc(String newProc)
  {
    String oldProc = proc;
    proc = newProc;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CONFIGURATION__PROC, oldProc, proc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNul()
  {
    return nul;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNul(String newNul)
  {
    String oldNul = nul;
    nul = newNul;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CONFIGURATION__NUL, oldNul, nul));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element getElement()
  {
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElement(Element newElement, NotificationChain msgs)
  {
    Element oldElement = element;
    element = newElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CONFIGURATION__ELEMENT, oldElement, newElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElement(Element newElement)
  {
    if (newElement != element)
    {
      NotificationChain msgs = null;
      if (element != null)
        msgs = ((InternalEObject)element).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIGURATION__ELEMENT, null, msgs);
      if (newElement != null)
        msgs = ((InternalEObject)newElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CONFIGURATION__ELEMENT, null, msgs);
      msgs = basicSetElement(newElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CONFIGURATION__ELEMENT, newElement, newElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.CONFIGURATION__VAR:
        return ((InternalEList<?>)getVar()).basicRemove(otherEnd, msgs);
      case DslPackage.CONFIGURATION__COLLECTION:
        return ((InternalEList<?>)getCollection()).basicRemove(otherEnd, msgs);
      case DslPackage.CONFIGURATION__ELEMENT:
        return basicSetElement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.CONFIGURATION__VAR:
        return getVar();
      case DslPackage.CONFIGURATION__COLLECTION:
        return getCollection();
      case DslPackage.CONFIGURATION__PROC:
        return getProc();
      case DslPackage.CONFIGURATION__NUL:
        return getNul();
      case DslPackage.CONFIGURATION__ELEMENT:
        return getElement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.CONFIGURATION__VAR:
        getVar().clear();
        getVar().addAll((Collection<? extends VarInit>)newValue);
        return;
      case DslPackage.CONFIGURATION__COLLECTION:
        getCollection().clear();
        getCollection().addAll((Collection<? extends CollectionInit>)newValue);
        return;
      case DslPackage.CONFIGURATION__PROC:
        setProc((String)newValue);
        return;
      case DslPackage.CONFIGURATION__NUL:
        setNul((String)newValue);
        return;
      case DslPackage.CONFIGURATION__ELEMENT:
        setElement((Element)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CONFIGURATION__VAR:
        getVar().clear();
        return;
      case DslPackage.CONFIGURATION__COLLECTION:
        getCollection().clear();
        return;
      case DslPackage.CONFIGURATION__PROC:
        setProc(PROC_EDEFAULT);
        return;
      case DslPackage.CONFIGURATION__NUL:
        setNul(NUL_EDEFAULT);
        return;
      case DslPackage.CONFIGURATION__ELEMENT:
        setElement((Element)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CONFIGURATION__VAR:
        return var != null && !var.isEmpty();
      case DslPackage.CONFIGURATION__COLLECTION:
        return collection != null && !collection.isEmpty();
      case DslPackage.CONFIGURATION__PROC:
        return PROC_EDEFAULT == null ? proc != null : !PROC_EDEFAULT.equals(proc);
      case DslPackage.CONFIGURATION__NUL:
        return NUL_EDEFAULT == null ? nul != null : !NUL_EDEFAULT.equals(nul);
      case DslPackage.CONFIGURATION__ELEMENT:
        return element != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (proc: ");
    result.append(proc);
    result.append(", nul: ");
    result.append(nul);
    result.append(')');
    return result.toString();
  }

} //ConfigurationImpl
