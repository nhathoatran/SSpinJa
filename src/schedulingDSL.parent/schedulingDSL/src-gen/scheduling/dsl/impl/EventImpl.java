/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.ELABEL;
import scheduling.dsl.Event;
import scheduling.dsl.EventFunction;
import scheduling.dsl.Expression;
import scheduling.dsl.SequenceAction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.EventImpl#getElabel <em>Elabel</em>}</li>
 *   <li>{@link scheduling.dsl.impl.EventImpl#getGuard <em>Guard</em>}</li>
 *   <li>{@link scheduling.dsl.impl.EventImpl#getSequence <em>Sequence</em>}</li>
 *   <li>{@link scheduling.dsl.impl.EventImpl#getEventfunction <em>Eventfunction</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends MinimalEObjectImpl.Container implements Event
{
  /**
   * The cached value of the '{@link #getElabel() <em>Elabel</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElabel()
   * @generated
   * @ordered
   */
  protected ELABEL elabel;

  /**
   * The cached value of the '{@link #getGuard() <em>Guard</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuard()
   * @generated
   * @ordered
   */
  protected Expression guard;

  /**
   * The cached value of the '{@link #getSequence() <em>Sequence</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequence()
   * @generated
   * @ordered
   */
  protected SequenceAction sequence;

  /**
   * The cached value of the '{@link #getEventfunction() <em>Eventfunction</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventfunction()
   * @generated
   * @ordered
   */
  protected EventFunction eventfunction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getEvent();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELABEL getElabel()
  {
    return elabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElabel(ELABEL newElabel, NotificationChain msgs)
  {
    ELABEL oldElabel = elabel;
    elabel = newElabel;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__ELABEL, oldElabel, newElabel);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElabel(ELABEL newElabel)
  {
    if (newElabel != elabel)
    {
      NotificationChain msgs = null;
      if (elabel != null)
        msgs = ((InternalEObject)elabel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__ELABEL, null, msgs);
      if (newElabel != null)
        msgs = ((InternalEObject)newElabel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__ELABEL, null, msgs);
      msgs = basicSetElabel(newElabel, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__ELABEL, newElabel, newElabel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getGuard()
  {
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGuard(Expression newGuard, NotificationChain msgs)
  {
    Expression oldGuard = guard;
    guard = newGuard;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__GUARD, oldGuard, newGuard);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuard(Expression newGuard)
  {
    if (newGuard != guard)
    {
      NotificationChain msgs = null;
      if (guard != null)
        msgs = ((InternalEObject)guard).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__GUARD, null, msgs);
      if (newGuard != null)
        msgs = ((InternalEObject)newGuard).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__GUARD, null, msgs);
      msgs = basicSetGuard(newGuard, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__GUARD, newGuard, newGuard));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceAction getSequence()
  {
    return sequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSequence(SequenceAction newSequence, NotificationChain msgs)
  {
    SequenceAction oldSequence = sequence;
    sequence = newSequence;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__SEQUENCE, oldSequence, newSequence);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSequence(SequenceAction newSequence)
  {
    if (newSequence != sequence)
    {
      NotificationChain msgs = null;
      if (sequence != null)
        msgs = ((InternalEObject)sequence).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__SEQUENCE, null, msgs);
      if (newSequence != null)
        msgs = ((InternalEObject)newSequence).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__SEQUENCE, null, msgs);
      msgs = basicSetSequence(newSequence, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__SEQUENCE, newSequence, newSequence));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventFunction getEventfunction()
  {
    return eventfunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEventfunction(EventFunction newEventfunction, NotificationChain msgs)
  {
    EventFunction oldEventfunction = eventfunction;
    eventfunction = newEventfunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__EVENTFUNCTION, oldEventfunction, newEventfunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventfunction(EventFunction newEventfunction)
  {
    if (newEventfunction != eventfunction)
    {
      NotificationChain msgs = null;
      if (eventfunction != null)
        msgs = ((InternalEObject)eventfunction).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__EVENTFUNCTION, null, msgs);
      if (newEventfunction != null)
        msgs = ((InternalEObject)newEventfunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT__EVENTFUNCTION, null, msgs);
      msgs = basicSetEventfunction(newEventfunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT__EVENTFUNCTION, newEventfunction, newEventfunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.EVENT__ELABEL:
        return basicSetElabel(null, msgs);
      case DslPackage.EVENT__GUARD:
        return basicSetGuard(null, msgs);
      case DslPackage.EVENT__SEQUENCE:
        return basicSetSequence(null, msgs);
      case DslPackage.EVENT__EVENTFUNCTION:
        return basicSetEventfunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.EVENT__ELABEL:
        return getElabel();
      case DslPackage.EVENT__GUARD:
        return getGuard();
      case DslPackage.EVENT__SEQUENCE:
        return getSequence();
      case DslPackage.EVENT__EVENTFUNCTION:
        return getEventfunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.EVENT__ELABEL:
        setElabel((ELABEL)newValue);
        return;
      case DslPackage.EVENT__GUARD:
        setGuard((Expression)newValue);
        return;
      case DslPackage.EVENT__SEQUENCE:
        setSequence((SequenceAction)newValue);
        return;
      case DslPackage.EVENT__EVENTFUNCTION:
        setEventfunction((EventFunction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.EVENT__ELABEL:
        setElabel((ELABEL)null);
        return;
      case DslPackage.EVENT__GUARD:
        setGuard((Expression)null);
        return;
      case DslPackage.EVENT__SEQUENCE:
        setSequence((SequenceAction)null);
        return;
      case DslPackage.EVENT__EVENTFUNCTION:
        setEventfunction((EventFunction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.EVENT__ELABEL:
        return elabel != null;
      case DslPackage.EVENT__GUARD:
        return guard != null;
      case DslPackage.EVENT__SEQUENCE:
        return sequence != null;
      case DslPackage.EVENT__EVENTFUNCTION:
        return eventfunction != null;
    }
    return super.eIsSet(featureID);
  }

} //EventImpl
