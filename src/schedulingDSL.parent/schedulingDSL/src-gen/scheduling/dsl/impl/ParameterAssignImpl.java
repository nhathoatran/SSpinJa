/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import scheduling.dsl.DslPackage;
import scheduling.dsl.ParameterAssign;
import scheduling.dsl.ParameterName;
import scheduling.dsl.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parameter Assign</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.ParameterAssignImpl#getType <em>Type</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ParameterAssignImpl#getParaname <em>Paraname</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ParameterAssignImpl#getVal <em>Val</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParameterAssignImpl extends MinimalEObjectImpl.Container implements ParameterAssign
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final scheduling.dsl.String TYPE_EDEFAULT = scheduling.dsl.String.TEMP;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getParaname() <em>Paraname</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParaname()
   * @generated
   * @ordered
   */
  protected EList<ParameterName> paraname;

  /**
   * The cached value of the '{@link #getVal() <em>Val</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVal()
   * @generated
   * @ordered
   */
  protected Value val;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterAssignImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getParameterAssign();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(scheduling.dsl.String newType)
  {
    scheduling.dsl.String oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PARAMETER_ASSIGN__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParameterName> getParaname()
  {
    if (paraname == null)
    {
      paraname = new EObjectContainmentEList<ParameterName>(ParameterName.class, this, DslPackage.PARAMETER_ASSIGN__PARANAME);
    }
    return paraname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getVal()
  {
    return val;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVal(Value newVal, NotificationChain msgs)
  {
    Value oldVal = val;
    val = newVal;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PARAMETER_ASSIGN__VAL, oldVal, newVal);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVal(Value newVal)
  {
    if (newVal != val)
    {
      NotificationChain msgs = null;
      if (val != null)
        msgs = ((InternalEObject)val).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PARAMETER_ASSIGN__VAL, null, msgs);
      if (newVal != null)
        msgs = ((InternalEObject)newVal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PARAMETER_ASSIGN__VAL, null, msgs);
      msgs = basicSetVal(newVal, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PARAMETER_ASSIGN__VAL, newVal, newVal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.PARAMETER_ASSIGN__PARANAME:
        return ((InternalEList<?>)getParaname()).basicRemove(otherEnd, msgs);
      case DslPackage.PARAMETER_ASSIGN__VAL:
        return basicSetVal(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.PARAMETER_ASSIGN__TYPE:
        return getType();
      case DslPackage.PARAMETER_ASSIGN__PARANAME:
        return getParaname();
      case DslPackage.PARAMETER_ASSIGN__VAL:
        return getVal();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.PARAMETER_ASSIGN__TYPE:
        setType((scheduling.dsl.String)newValue);
        return;
      case DslPackage.PARAMETER_ASSIGN__PARANAME:
        getParaname().clear();
        getParaname().addAll((Collection<? extends ParameterName>)newValue);
        return;
      case DslPackage.PARAMETER_ASSIGN__VAL:
        setVal((Value)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PARAMETER_ASSIGN__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DslPackage.PARAMETER_ASSIGN__PARANAME:
        getParaname().clear();
        return;
      case DslPackage.PARAMETER_ASSIGN__VAL:
        setVal((Value)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PARAMETER_ASSIGN__TYPE:
        return type != TYPE_EDEFAULT;
      case DslPackage.PARAMETER_ASSIGN__PARANAME:
        return paraname != null && !paraname.isEmpty();
      case DslPackage.PARAMETER_ASSIGN__VAL:
        return val != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //ParameterAssignImpl
