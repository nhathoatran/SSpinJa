/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.LoopProcess;
import scheduling.dsl.SchedulerSet;
import scheduling.dsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Loop Process</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.LoopProcessImpl#getPname <em>Pname</em>}</li>
 *   <li>{@link scheduling.dsl.impl.LoopProcessImpl#getColFrom <em>Col From</em>}</li>
 *   <li>{@link scheduling.dsl.impl.LoopProcessImpl#getStatement <em>Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LoopProcessImpl extends StatementImpl implements LoopProcess
{
  /**
   * The cached value of the '{@link #getPname() <em>Pname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.Process pname;

  /**
   * The cached value of the '{@link #getColFrom() <em>Col From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColFrom()
   * @generated
   * @ordered
   */
  protected SchedulerSet colFrom;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected Statement statement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoopProcessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getLoopProcess();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process getPname()
  {
    return pname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPname(scheduling.dsl.Process newPname, NotificationChain msgs)
  {
    scheduling.dsl.Process oldPname = pname;
    pname = newPname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__PNAME, oldPname, newPname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPname(scheduling.dsl.Process newPname)
  {
    if (newPname != pname)
    {
      NotificationChain msgs = null;
      if (pname != null)
        msgs = ((InternalEObject)pname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__PNAME, null, msgs);
      if (newPname != null)
        msgs = ((InternalEObject)newPname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__PNAME, null, msgs);
      msgs = basicSetPname(newPname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__PNAME, newPname, newPname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet getColFrom()
  {
    return colFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColFrom(SchedulerSet newColFrom, NotificationChain msgs)
  {
    SchedulerSet oldColFrom = colFrom;
    colFrom = newColFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__COL_FROM, oldColFrom, newColFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColFrom(SchedulerSet newColFrom)
  {
    if (newColFrom != colFrom)
    {
      NotificationChain msgs = null;
      if (colFrom != null)
        msgs = ((InternalEObject)colFrom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__COL_FROM, null, msgs);
      if (newColFrom != null)
        msgs = ((InternalEObject)newColFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__COL_FROM, null, msgs);
      msgs = basicSetColFrom(newColFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__COL_FROM, newColFrom, newColFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(Statement newStatement, NotificationChain msgs)
  {
    Statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(Statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.LOOP_PROCESS__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.LOOP_PROCESS__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.LOOP_PROCESS__PNAME:
        return basicSetPname(null, msgs);
      case DslPackage.LOOP_PROCESS__COL_FROM:
        return basicSetColFrom(null, msgs);
      case DslPackage.LOOP_PROCESS__STATEMENT:
        return basicSetStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.LOOP_PROCESS__PNAME:
        return getPname();
      case DslPackage.LOOP_PROCESS__COL_FROM:
        return getColFrom();
      case DslPackage.LOOP_PROCESS__STATEMENT:
        return getStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.LOOP_PROCESS__PNAME:
        setPname((scheduling.dsl.Process)newValue);
        return;
      case DslPackage.LOOP_PROCESS__COL_FROM:
        setColFrom((SchedulerSet)newValue);
        return;
      case DslPackage.LOOP_PROCESS__STATEMENT:
        setStatement((Statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.LOOP_PROCESS__PNAME:
        setPname((scheduling.dsl.Process)null);
        return;
      case DslPackage.LOOP_PROCESS__COL_FROM:
        setColFrom((SchedulerSet)null);
        return;
      case DslPackage.LOOP_PROCESS__STATEMENT:
        setStatement((Statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.LOOP_PROCESS__PNAME:
        return pname != null;
      case DslPackage.LOOP_PROCESS__COL_FROM:
        return colFrom != null;
      case DslPackage.LOOP_PROCESS__STATEMENT:
        return statement != null;
    }
    return super.eIsSet(featureID);
  }

} //LoopProcessImpl
