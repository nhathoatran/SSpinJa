/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.ParameterName;
import scheduling.dsl.ProcessPropertyName;
import scheduling.dsl.PropertyAssignment;
import scheduling.dsl.Value;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Property Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.PropertyAssignmentImpl#getPropers <em>Propers</em>}</li>
 *   <li>{@link scheduling.dsl.impl.PropertyAssignmentImpl#getPvalue <em>Pvalue</em>}</li>
 *   <li>{@link scheduling.dsl.impl.PropertyAssignmentImpl#getPname <em>Pname</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PropertyAssignmentImpl extends MinimalEObjectImpl.Container implements PropertyAssignment
{
  /**
   * The cached value of the '{@link #getPropers() <em>Propers</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPropers()
   * @generated
   * @ordered
   */
  protected ProcessPropertyName propers;

  /**
   * The cached value of the '{@link #getPvalue() <em>Pvalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPvalue()
   * @generated
   * @ordered
   */
  protected Value pvalue;

  /**
   * The cached value of the '{@link #getPname() <em>Pname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPname()
   * @generated
   * @ordered
   */
  protected ParameterName pname;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PropertyAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getPropertyAssignment();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessPropertyName getPropers()
  {
    return propers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPropers(ProcessPropertyName newPropers, NotificationChain msgs)
  {
    ProcessPropertyName oldPropers = propers;
    propers = newPropers;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PROPERS, oldPropers, newPropers);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPropers(ProcessPropertyName newPropers)
  {
    if (newPropers != propers)
    {
      NotificationChain msgs = null;
      if (propers != null)
        msgs = ((InternalEObject)propers).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PROPERS, null, msgs);
      if (newPropers != null)
        msgs = ((InternalEObject)newPropers).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PROPERS, null, msgs);
      msgs = basicSetPropers(newPropers, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PROPERS, newPropers, newPropers));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value getPvalue()
  {
    return pvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPvalue(Value newPvalue, NotificationChain msgs)
  {
    Value oldPvalue = pvalue;
    pvalue = newPvalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PVALUE, oldPvalue, newPvalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPvalue(Value newPvalue)
  {
    if (newPvalue != pvalue)
    {
      NotificationChain msgs = null;
      if (pvalue != null)
        msgs = ((InternalEObject)pvalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PVALUE, null, msgs);
      if (newPvalue != null)
        msgs = ((InternalEObject)newPvalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PVALUE, null, msgs);
      msgs = basicSetPvalue(newPvalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PVALUE, newPvalue, newPvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterName getPname()
  {
    return pname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPname(ParameterName newPname, NotificationChain msgs)
  {
    ParameterName oldPname = pname;
    pname = newPname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PNAME, oldPname, newPname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPname(ParameterName newPname)
  {
    if (newPname != pname)
    {
      NotificationChain msgs = null;
      if (pname != null)
        msgs = ((InternalEObject)pname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PNAME, null, msgs);
      if (newPname != null)
        msgs = ((InternalEObject)newPname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.PROPERTY_ASSIGNMENT__PNAME, null, msgs);
      msgs = basicSetPname(newPname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.PROPERTY_ASSIGNMENT__PNAME, newPname, newPname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_ASSIGNMENT__PROPERS:
        return basicSetPropers(null, msgs);
      case DslPackage.PROPERTY_ASSIGNMENT__PVALUE:
        return basicSetPvalue(null, msgs);
      case DslPackage.PROPERTY_ASSIGNMENT__PNAME:
        return basicSetPname(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_ASSIGNMENT__PROPERS:
        return getPropers();
      case DslPackage.PROPERTY_ASSIGNMENT__PVALUE:
        return getPvalue();
      case DslPackage.PROPERTY_ASSIGNMENT__PNAME:
        return getPname();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_ASSIGNMENT__PROPERS:
        setPropers((ProcessPropertyName)newValue);
        return;
      case DslPackage.PROPERTY_ASSIGNMENT__PVALUE:
        setPvalue((Value)newValue);
        return;
      case DslPackage.PROPERTY_ASSIGNMENT__PNAME:
        setPname((ParameterName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_ASSIGNMENT__PROPERS:
        setPropers((ProcessPropertyName)null);
        return;
      case DslPackage.PROPERTY_ASSIGNMENT__PVALUE:
        setPvalue((Value)null);
        return;
      case DslPackage.PROPERTY_ASSIGNMENT__PNAME:
        setPname((ParameterName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.PROPERTY_ASSIGNMENT__PROPERS:
        return propers != null;
      case DslPackage.PROPERTY_ASSIGNMENT__PVALUE:
        return pvalue != null;
      case DslPackage.PROPERTY_ASSIGNMENT__PNAME:
        return pname != null;
    }
    return super.eIsSet(featureID);
  }

} //PropertyAssignmentImpl
