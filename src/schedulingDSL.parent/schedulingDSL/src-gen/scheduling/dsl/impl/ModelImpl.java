/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.GenDSL;
import scheduling.dsl.Model;
import scheduling.dsl.ProcessConfiguration;
import scheduling.dsl.ProcessDSL;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.TestDSL;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.ModelImpl#getGen <em>Gen</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ModelImpl#getProcessconfig <em>Processconfig</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ModelImpl#getProc <em>Proc</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ModelImpl#getSch <em>Sch</em>}</li>
 *   <li>{@link scheduling.dsl.impl.ModelImpl#getTest <em>Test</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getGen() <em>Gen</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGen()
   * @generated
   * @ordered
   */
  protected GenDSL gen;

  /**
   * The cached value of the '{@link #getProcessconfig() <em>Processconfig</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessconfig()
   * @generated
   * @ordered
   */
  protected ProcessConfiguration processconfig;

  /**
   * The cached value of the '{@link #getProc() <em>Proc</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProc()
   * @generated
   * @ordered
   */
  protected ProcessDSL proc;

  /**
   * The cached value of the '{@link #getSch() <em>Sch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSch()
   * @generated
   * @ordered
   */
  protected SchedulerDSL sch;

  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected TestDSL test;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getModel();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenDSL getGen()
  {
    return gen;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGen(GenDSL newGen, NotificationChain msgs)
  {
    GenDSL oldGen = gen;
    gen = newGen;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__GEN, oldGen, newGen);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGen(GenDSL newGen)
  {
    if (newGen != gen)
    {
      NotificationChain msgs = null;
      if (gen != null)
        msgs = ((InternalEObject)gen).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__GEN, null, msgs);
      if (newGen != null)
        msgs = ((InternalEObject)newGen).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__GEN, null, msgs);
      msgs = basicSetGen(newGen, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__GEN, newGen, newGen));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessConfiguration getProcessconfig()
  {
    return processconfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcessconfig(ProcessConfiguration newProcessconfig, NotificationChain msgs)
  {
    ProcessConfiguration oldProcessconfig = processconfig;
    processconfig = newProcessconfig;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__PROCESSCONFIG, oldProcessconfig, newProcessconfig);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcessconfig(ProcessConfiguration newProcessconfig)
  {
    if (newProcessconfig != processconfig)
    {
      NotificationChain msgs = null;
      if (processconfig != null)
        msgs = ((InternalEObject)processconfig).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__PROCESSCONFIG, null, msgs);
      if (newProcessconfig != null)
        msgs = ((InternalEObject)newProcessconfig).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__PROCESSCONFIG, null, msgs);
      msgs = basicSetProcessconfig(newProcessconfig, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__PROCESSCONFIG, newProcessconfig, newProcessconfig));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessDSL getProc()
  {
    return proc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProc(ProcessDSL newProc, NotificationChain msgs)
  {
    ProcessDSL oldProc = proc;
    proc = newProc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__PROC, oldProc, newProc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProc(ProcessDSL newProc)
  {
    if (newProc != proc)
    {
      NotificationChain msgs = null;
      if (proc != null)
        msgs = ((InternalEObject)proc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__PROC, null, msgs);
      if (newProc != null)
        msgs = ((InternalEObject)newProc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__PROC, null, msgs);
      msgs = basicSetProc(newProc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__PROC, newProc, newProc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerDSL getSch()
  {
    return sch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSch(SchedulerDSL newSch, NotificationChain msgs)
  {
    SchedulerDSL oldSch = sch;
    sch = newSch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__SCH, oldSch, newSch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSch(SchedulerDSL newSch)
  {
    if (newSch != sch)
    {
      NotificationChain msgs = null;
      if (sch != null)
        msgs = ((InternalEObject)sch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__SCH, null, msgs);
      if (newSch != null)
        msgs = ((InternalEObject)newSch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__SCH, null, msgs);
      msgs = basicSetSch(newSch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__SCH, newSch, newSch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestDSL getTest()
  {
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTest(TestDSL newTest, NotificationChain msgs)
  {
    TestDSL oldTest = test;
    test = newTest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__TEST, oldTest, newTest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTest(TestDSL newTest)
  {
    if (newTest != test)
    {
      NotificationChain msgs = null;
      if (test != null)
        msgs = ((InternalEObject)test).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__TEST, null, msgs);
      if (newTest != null)
        msgs = ((InternalEObject)newTest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.MODEL__TEST, null, msgs);
      msgs = basicSetTest(newTest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.MODEL__TEST, newTest, newTest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__GEN:
        return basicSetGen(null, msgs);
      case DslPackage.MODEL__PROCESSCONFIG:
        return basicSetProcessconfig(null, msgs);
      case DslPackage.MODEL__PROC:
        return basicSetProc(null, msgs);
      case DslPackage.MODEL__SCH:
        return basicSetSch(null, msgs);
      case DslPackage.MODEL__TEST:
        return basicSetTest(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__GEN:
        return getGen();
      case DslPackage.MODEL__PROCESSCONFIG:
        return getProcessconfig();
      case DslPackage.MODEL__PROC:
        return getProc();
      case DslPackage.MODEL__SCH:
        return getSch();
      case DslPackage.MODEL__TEST:
        return getTest();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__GEN:
        setGen((GenDSL)newValue);
        return;
      case DslPackage.MODEL__PROCESSCONFIG:
        setProcessconfig((ProcessConfiguration)newValue);
        return;
      case DslPackage.MODEL__PROC:
        setProc((ProcessDSL)newValue);
        return;
      case DslPackage.MODEL__SCH:
        setSch((SchedulerDSL)newValue);
        return;
      case DslPackage.MODEL__TEST:
        setTest((TestDSL)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__GEN:
        setGen((GenDSL)null);
        return;
      case DslPackage.MODEL__PROCESSCONFIG:
        setProcessconfig((ProcessConfiguration)null);
        return;
      case DslPackage.MODEL__PROC:
        setProc((ProcessDSL)null);
        return;
      case DslPackage.MODEL__SCH:
        setSch((SchedulerDSL)null);
        return;
      case DslPackage.MODEL__TEST:
        setTest((TestDSL)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.MODEL__GEN:
        return gen != null;
      case DslPackage.MODEL__PROCESSCONFIG:
        return processconfig != null;
      case DslPackage.MODEL__PROC:
        return proc != null;
      case DslPackage.MODEL__SCH:
        return sch != null;
      case DslPackage.MODEL__TEST:
        return test != null;
    }
    return super.eIsSet(featureID);
  }

} //ModelImpl
