/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import scheduling.dsl.Atomic;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ListElement;
import scheduling.dsl.QualifiedNames;
import scheduling.dsl.SysVar;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Atomic</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.AtomicImpl#getVar <em>Var</em>}</li>
 *   <li>{@link scheduling.dsl.impl.AtomicImpl#getLele <em>Lele</em>}</li>
 *   <li>{@link scheduling.dsl.impl.AtomicImpl#getCharseq <em>Charseq</em>}</li>
 *   <li>{@link scheduling.dsl.impl.AtomicImpl#getString <em>String</em>}</li>
 *   <li>{@link scheduling.dsl.impl.AtomicImpl#getSysvar <em>Sysvar</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AtomicImpl extends ExpressionImpl implements Atomic
{
  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected QualifiedNames var;

  /**
   * The cached value of the '{@link #getLele() <em>Lele</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLele()
   * @generated
   * @ordered
   */
  protected ListElement lele;

  /**
   * The default value of the '{@link #getCharseq() <em>Charseq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharseq()
   * @generated
   * @ordered
   */
  protected static final String CHARSEQ_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCharseq() <em>Charseq</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharseq()
   * @generated
   * @ordered
   */
  protected String charseq = CHARSEQ_EDEFAULT;

  /**
   * The default value of the '{@link #getString() <em>String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getString()
   * @generated
   * @ordered
   */
  protected static final String STRING_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getString() <em>String</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getString()
   * @generated
   * @ordered
   */
  protected String string = STRING_EDEFAULT;

  /**
   * The cached value of the '{@link #getSysvar() <em>Sysvar</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSysvar()
   * @generated
   * @ordered
   */
  protected SysVar sysvar;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AtomicImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getAtomic();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualifiedNames getVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVar(QualifiedNames newVar, NotificationChain msgs)
  {
    QualifiedNames oldVar = var;
    var = newVar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__VAR, oldVar, newVar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(QualifiedNames newVar)
  {
    if (newVar != var)
    {
      NotificationChain msgs = null;
      if (var != null)
        msgs = ((InternalEObject)var).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__VAR, null, msgs);
      if (newVar != null)
        msgs = ((InternalEObject)newVar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__VAR, null, msgs);
      msgs = basicSetVar(newVar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__VAR, newVar, newVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListElement getLele()
  {
    return lele;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLele(ListElement newLele, NotificationChain msgs)
  {
    ListElement oldLele = lele;
    lele = newLele;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__LELE, oldLele, newLele);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLele(ListElement newLele)
  {
    if (newLele != lele)
    {
      NotificationChain msgs = null;
      if (lele != null)
        msgs = ((InternalEObject)lele).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__LELE, null, msgs);
      if (newLele != null)
        msgs = ((InternalEObject)newLele).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__LELE, null, msgs);
      msgs = basicSetLele(newLele, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__LELE, newLele, newLele));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCharseq()
  {
    return charseq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCharseq(String newCharseq)
  {
    String oldCharseq = charseq;
    charseq = newCharseq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__CHARSEQ, oldCharseq, charseq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getString()
  {
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setString(String newString)
  {
    String oldString = string;
    string = newString;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__STRING, oldString, string));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SysVar getSysvar()
  {
    return sysvar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSysvar(SysVar newSysvar, NotificationChain msgs)
  {
    SysVar oldSysvar = sysvar;
    sysvar = newSysvar;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__SYSVAR, oldSysvar, newSysvar);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSysvar(SysVar newSysvar)
  {
    if (newSysvar != sysvar)
    {
      NotificationChain msgs = null;
      if (sysvar != null)
        msgs = ((InternalEObject)sysvar).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__SYSVAR, null, msgs);
      if (newSysvar != null)
        msgs = ((InternalEObject)newSysvar).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.ATOMIC__SYSVAR, null, msgs);
      msgs = basicSetSysvar(newSysvar, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.ATOMIC__SYSVAR, newSysvar, newSysvar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.ATOMIC__VAR:
        return basicSetVar(null, msgs);
      case DslPackage.ATOMIC__LELE:
        return basicSetLele(null, msgs);
      case DslPackage.ATOMIC__SYSVAR:
        return basicSetSysvar(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.ATOMIC__VAR:
        return getVar();
      case DslPackage.ATOMIC__LELE:
        return getLele();
      case DslPackage.ATOMIC__CHARSEQ:
        return getCharseq();
      case DslPackage.ATOMIC__STRING:
        return getString();
      case DslPackage.ATOMIC__SYSVAR:
        return getSysvar();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.ATOMIC__VAR:
        setVar((QualifiedNames)newValue);
        return;
      case DslPackage.ATOMIC__LELE:
        setLele((ListElement)newValue);
        return;
      case DslPackage.ATOMIC__CHARSEQ:
        setCharseq((String)newValue);
        return;
      case DslPackage.ATOMIC__STRING:
        setString((String)newValue);
        return;
      case DslPackage.ATOMIC__SYSVAR:
        setSysvar((SysVar)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ATOMIC__VAR:
        setVar((QualifiedNames)null);
        return;
      case DslPackage.ATOMIC__LELE:
        setLele((ListElement)null);
        return;
      case DslPackage.ATOMIC__CHARSEQ:
        setCharseq(CHARSEQ_EDEFAULT);
        return;
      case DslPackage.ATOMIC__STRING:
        setString(STRING_EDEFAULT);
        return;
      case DslPackage.ATOMIC__SYSVAR:
        setSysvar((SysVar)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.ATOMIC__VAR:
        return var != null;
      case DslPackage.ATOMIC__LELE:
        return lele != null;
      case DslPackage.ATOMIC__CHARSEQ:
        return CHARSEQ_EDEFAULT == null ? charseq != null : !CHARSEQ_EDEFAULT.equals(charseq);
      case DslPackage.ATOMIC__STRING:
        return STRING_EDEFAULT == null ? string != null : !STRING_EDEFAULT.equals(string);
      case DslPackage.ATOMIC__SYSVAR:
        return sysvar != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (charseq: ");
    result.append(charseq);
    result.append(", string: ");
    result.append(string);
    result.append(')');
    return result.toString();
  }

} //AtomicImpl
