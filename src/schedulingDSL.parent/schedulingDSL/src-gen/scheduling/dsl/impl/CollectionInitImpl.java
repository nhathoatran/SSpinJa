/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.CollectionInit;
import scheduling.dsl.DslPackage;
import scheduling.dsl.SchedulerSet;
import scheduling.dsl.Set;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Collection Init</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.CollectionInitImpl#getColName <em>Col Name</em>}</li>
 *   <li>{@link scheduling.dsl.impl.CollectionInitImpl#getSet <em>Set</em>}</li>
 *   <li>{@link scheduling.dsl.impl.CollectionInitImpl#getEmpty <em>Empty</em>}</li>
 *   <li>{@link scheduling.dsl.impl.CollectionInitImpl#getFull <em>Full</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CollectionInitImpl extends MinimalEObjectImpl.Container implements CollectionInit
{
  /**
   * The cached value of the '{@link #getColName() <em>Col Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColName()
   * @generated
   * @ordered
   */
  protected SchedulerSet colName;

  /**
   * The cached value of the '{@link #getSet() <em>Set</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSet()
   * @generated
   * @ordered
   */
  protected Set set;

  /**
   * The default value of the '{@link #getEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmpty()
   * @generated
   * @ordered
   */
  protected static final String EMPTY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmpty()
   * @generated
   * @ordered
   */
  protected String empty = EMPTY_EDEFAULT;

  /**
   * The default value of the '{@link #getFull() <em>Full</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFull()
   * @generated
   * @ordered
   */
  protected static final String FULL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFull() <em>Full</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFull()
   * @generated
   * @ordered
   */
  protected String full = FULL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CollectionInitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getCollectionInit();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet getColName()
  {
    return colName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColName(SchedulerSet newColName, NotificationChain msgs)
  {
    SchedulerSet oldColName = colName;
    colName = newColName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__COL_NAME, oldColName, newColName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColName(SchedulerSet newColName)
  {
    if (newColName != colName)
    {
      NotificationChain msgs = null;
      if (colName != null)
        msgs = ((InternalEObject)colName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COLLECTION_INIT__COL_NAME, null, msgs);
      if (newColName != null)
        msgs = ((InternalEObject)newColName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COLLECTION_INIT__COL_NAME, null, msgs);
      msgs = basicSetColName(newColName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__COL_NAME, newColName, newColName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set getSet()
  {
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSet(Set newSet, NotificationChain msgs)
  {
    Set oldSet = set;
    set = newSet;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__SET, oldSet, newSet);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSet(Set newSet)
  {
    if (newSet != set)
    {
      NotificationChain msgs = null;
      if (set != null)
        msgs = ((InternalEObject)set).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COLLECTION_INIT__SET, null, msgs);
      if (newSet != null)
        msgs = ((InternalEObject)newSet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COLLECTION_INIT__SET, null, msgs);
      msgs = basicSetSet(newSet, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__SET, newSet, newSet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEmpty()
  {
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEmpty(String newEmpty)
  {
    String oldEmpty = empty;
    empty = newEmpty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__EMPTY, oldEmpty, empty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFull()
  {
    return full;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFull(String newFull)
  {
    String oldFull = full;
    full = newFull;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COLLECTION_INIT__FULL, oldFull, full));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTION_INIT__COL_NAME:
        return basicSetColName(null, msgs);
      case DslPackage.COLLECTION_INIT__SET:
        return basicSetSet(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTION_INIT__COL_NAME:
        return getColName();
      case DslPackage.COLLECTION_INIT__SET:
        return getSet();
      case DslPackage.COLLECTION_INIT__EMPTY:
        return getEmpty();
      case DslPackage.COLLECTION_INIT__FULL:
        return getFull();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTION_INIT__COL_NAME:
        setColName((SchedulerSet)newValue);
        return;
      case DslPackage.COLLECTION_INIT__SET:
        setSet((Set)newValue);
        return;
      case DslPackage.COLLECTION_INIT__EMPTY:
        setEmpty((String)newValue);
        return;
      case DslPackage.COLLECTION_INIT__FULL:
        setFull((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTION_INIT__COL_NAME:
        setColName((SchedulerSet)null);
        return;
      case DslPackage.COLLECTION_INIT__SET:
        setSet((Set)null);
        return;
      case DslPackage.COLLECTION_INIT__EMPTY:
        setEmpty(EMPTY_EDEFAULT);
        return;
      case DslPackage.COLLECTION_INIT__FULL:
        setFull(FULL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COLLECTION_INIT__COL_NAME:
        return colName != null;
      case DslPackage.COLLECTION_INIT__SET:
        return set != null;
      case DslPackage.COLLECTION_INIT__EMPTY:
        return EMPTY_EDEFAULT == null ? empty != null : !EMPTY_EDEFAULT.equals(empty);
      case DslPackage.COLLECTION_INIT__FULL:
        return FULL_EDEFAULT == null ? full != null : !FULL_EDEFAULT.equals(full);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (empty: ");
    result.append(empty);
    result.append(", full: ");
    result.append(full);
    result.append(')');
    return result.toString();
  }

} //CollectionInitImpl
