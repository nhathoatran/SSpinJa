/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.DslPackage;
import scheduling.dsl.EventDef;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.EventDefImpl#getEventname <em>Eventname</em>}</li>
 *   <li>{@link scheduling.dsl.impl.EventDefImpl#getProcessname <em>Processname</em>}</li>
 *   <li>{@link scheduling.dsl.impl.EventDefImpl#getEvent <em>Event</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventDefImpl extends MinimalEObjectImpl.Container implements EventDef
{
  /**
   * The default value of the '{@link #getEventname() <em>Eventname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventname()
   * @generated
   * @ordered
   */
  protected static final scheduling.dsl.String EVENTNAME_EDEFAULT = scheduling.dsl.String.TEMP;

  /**
   * The cached value of the '{@link #getEventname() <em>Eventname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEventname()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.String eventname = EVENTNAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getProcessname() <em>Processname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcessname()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.Process processname;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected EObject event;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getEventDef();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.String getEventname()
  {
    return eventname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEventname(scheduling.dsl.String newEventname)
  {
    scheduling.dsl.String oldEventname = eventname;
    eventname = newEventname == null ? EVENTNAME_EDEFAULT : newEventname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT_DEF__EVENTNAME, oldEventname, eventname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process getProcessname()
  {
    return processname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcessname(scheduling.dsl.Process newProcessname, NotificationChain msgs)
  {
    scheduling.dsl.Process oldProcessname = processname;
    processname = newProcessname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT_DEF__PROCESSNAME, oldProcessname, newProcessname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcessname(scheduling.dsl.Process newProcessname)
  {
    if (newProcessname != processname)
    {
      NotificationChain msgs = null;
      if (processname != null)
        msgs = ((InternalEObject)processname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT_DEF__PROCESSNAME, null, msgs);
      if (newProcessname != null)
        msgs = ((InternalEObject)newProcessname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT_DEF__PROCESSNAME, null, msgs);
      msgs = basicSetProcessname(newProcessname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT_DEF__PROCESSNAME, newProcessname, newProcessname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getEvent()
  {
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEvent(EObject newEvent, NotificationChain msgs)
  {
    EObject oldEvent = event;
    event = newEvent;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.EVENT_DEF__EVENT, oldEvent, newEvent);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvent(EObject newEvent)
  {
    if (newEvent != event)
    {
      NotificationChain msgs = null;
      if (event != null)
        msgs = ((InternalEObject)event).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT_DEF__EVENT, null, msgs);
      if (newEvent != null)
        msgs = ((InternalEObject)newEvent).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.EVENT_DEF__EVENT, null, msgs);
      msgs = basicSetEvent(newEvent, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.EVENT_DEF__EVENT, newEvent, newEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.EVENT_DEF__PROCESSNAME:
        return basicSetProcessname(null, msgs);
      case DslPackage.EVENT_DEF__EVENT:
        return basicSetEvent(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.EVENT_DEF__EVENTNAME:
        return getEventname();
      case DslPackage.EVENT_DEF__PROCESSNAME:
        return getProcessname();
      case DslPackage.EVENT_DEF__EVENT:
        return getEvent();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.EVENT_DEF__EVENTNAME:
        setEventname((scheduling.dsl.String)newValue);
        return;
      case DslPackage.EVENT_DEF__PROCESSNAME:
        setProcessname((scheduling.dsl.Process)newValue);
        return;
      case DslPackage.EVENT_DEF__EVENT:
        setEvent((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.EVENT_DEF__EVENTNAME:
        setEventname(EVENTNAME_EDEFAULT);
        return;
      case DslPackage.EVENT_DEF__PROCESSNAME:
        setProcessname((scheduling.dsl.Process)null);
        return;
      case DslPackage.EVENT_DEF__EVENT:
        setEvent((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.EVENT_DEF__EVENTNAME:
        return eventname != EVENTNAME_EDEFAULT;
      case DslPackage.EVENT_DEF__PROCESSNAME:
        return processname != null;
      case DslPackage.EVENT_DEF__EVENT:
        return event != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (eventname: ");
    result.append(eventname);
    result.append(')');
    return result.toString();
  }

} //EventDefImpl
