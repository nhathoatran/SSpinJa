/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import scheduling.dsl.BoolValue;
import scheduling.dsl.DslPackage;
import scheduling.dsl.NumValue;
import scheduling.dsl.SchedulerPropertyDef;
import scheduling.dsl.SchedulerPropertyName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Scheduler Property Def</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.SchedulerPropertyDefImpl#getType <em>Type</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerPropertyDefImpl#getName <em>Name</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerPropertyDefImpl#getBvalue <em>Bvalue</em>}</li>
 *   <li>{@link scheduling.dsl.impl.SchedulerPropertyDefImpl#getIvalue <em>Ivalue</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SchedulerPropertyDefImpl extends MinimalEObjectImpl.Container implements SchedulerPropertyDef
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final scheduling.dsl.String TYPE_EDEFAULT = scheduling.dsl.String.TEMP;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected EList<SchedulerPropertyName> name;

  /**
   * The cached value of the '{@link #getBvalue() <em>Bvalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBvalue()
   * @generated
   * @ordered
   */
  protected BoolValue bvalue;

  /**
   * The cached value of the '{@link #getIvalue() <em>Ivalue</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIvalue()
   * @generated
   * @ordered
   */
  protected NumValue ivalue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchedulerPropertyDefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getSchedulerPropertyDef();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(scheduling.dsl.String newType)
  {
    scheduling.dsl.String oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_PROPERTY_DEF__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SchedulerPropertyName> getName()
  {
    if (name == null)
    {
      name = new EObjectContainmentEList<SchedulerPropertyName>(SchedulerPropertyName.class, this, DslPackage.SCHEDULER_PROPERTY_DEF__NAME);
    }
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolValue getBvalue()
  {
    return bvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBvalue(BoolValue newBvalue, NotificationChain msgs)
  {
    BoolValue oldBvalue = bvalue;
    bvalue = newBvalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE, oldBvalue, newBvalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBvalue(BoolValue newBvalue)
  {
    if (newBvalue != bvalue)
    {
      NotificationChain msgs = null;
      if (bvalue != null)
        msgs = ((InternalEObject)bvalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE, null, msgs);
      if (newBvalue != null)
        msgs = ((InternalEObject)newBvalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE, null, msgs);
      msgs = basicSetBvalue(newBvalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE, newBvalue, newBvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumValue getIvalue()
  {
    return ivalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIvalue(NumValue newIvalue, NotificationChain msgs)
  {
    NumValue oldIvalue = ivalue;
    ivalue = newIvalue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE, oldIvalue, newIvalue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIvalue(NumValue newIvalue)
  {
    if (newIvalue != ivalue)
    {
      NotificationChain msgs = null;
      if (ivalue != null)
        msgs = ((InternalEObject)ivalue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE, null, msgs);
      if (newIvalue != null)
        msgs = ((InternalEObject)newIvalue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE, null, msgs);
      msgs = basicSetIvalue(newIvalue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE, newIvalue, newIvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_PROPERTY_DEF__NAME:
        return ((InternalEList<?>)getName()).basicRemove(otherEnd, msgs);
      case DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE:
        return basicSetBvalue(null, msgs);
      case DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE:
        return basicSetIvalue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_PROPERTY_DEF__TYPE:
        return getType();
      case DslPackage.SCHEDULER_PROPERTY_DEF__NAME:
        return getName();
      case DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE:
        return getBvalue();
      case DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE:
        return getIvalue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_PROPERTY_DEF__TYPE:
        setType((scheduling.dsl.String)newValue);
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__NAME:
        getName().clear();
        getName().addAll((Collection<? extends SchedulerPropertyName>)newValue);
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE:
        setBvalue((BoolValue)newValue);
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE:
        setIvalue((NumValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_PROPERTY_DEF__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__NAME:
        getName().clear();
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE:
        setBvalue((BoolValue)null);
        return;
      case DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE:
        setIvalue((NumValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCHEDULER_PROPERTY_DEF__TYPE:
        return type != TYPE_EDEFAULT;
      case DslPackage.SCHEDULER_PROPERTY_DEF__NAME:
        return name != null && !name.isEmpty();
      case DslPackage.SCHEDULER_PROPERTY_DEF__BVALUE:
        return bvalue != null;
      case DslPackage.SCHEDULER_PROPERTY_DEF__IVALUE:
        return ivalue != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(')');
    return result.toString();
  }

} //SchedulerPropertyDefImpl
