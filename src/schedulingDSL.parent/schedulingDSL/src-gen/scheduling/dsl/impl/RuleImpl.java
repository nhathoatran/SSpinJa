/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.Condition;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ENAME;
import scheduling.dsl.Rule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.RuleImpl#getRulename <em>Rulename</em>}</li>
 *   <li>{@link scheduling.dsl.impl.RuleImpl#getEname <em>Ename</em>}</li>
 *   <li>{@link scheduling.dsl.impl.RuleImpl#getPremise <em>Premise</em>}</li>
 *   <li>{@link scheduling.dsl.impl.RuleImpl#getConclude <em>Conclude</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleImpl extends MinimalEObjectImpl.Container implements Rule
{
  /**
   * The default value of the '{@link #getRulename() <em>Rulename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRulename()
   * @generated
   * @ordered
   */
  protected static final String RULENAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRulename() <em>Rulename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRulename()
   * @generated
   * @ordered
   */
  protected String rulename = RULENAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getEname() <em>Ename</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEname()
   * @generated
   * @ordered
   */
  protected ENAME ename;

  /**
   * The cached value of the '{@link #getPremise() <em>Premise</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPremise()
   * @generated
   * @ordered
   */
  protected Condition premise;

  /**
   * The cached value of the '{@link #getConclude() <em>Conclude</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConclude()
   * @generated
   * @ordered
   */
  protected Condition conclude;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getRule();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRulename()
  {
    return rulename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRulename(String newRulename)
  {
    String oldRulename = rulename;
    rulename = newRulename;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.RULE__RULENAME, oldRulename, rulename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENAME getEname()
  {
    return ename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEname(ENAME newEname, NotificationChain msgs)
  {
    ENAME oldEname = ename;
    ename = newEname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.RULE__ENAME, oldEname, newEname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEname(ENAME newEname)
  {
    if (newEname != ename)
    {
      NotificationChain msgs = null;
      if (ename != null)
        msgs = ((InternalEObject)ename).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__ENAME, null, msgs);
      if (newEname != null)
        msgs = ((InternalEObject)newEname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__ENAME, null, msgs);
      msgs = basicSetEname(newEname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.RULE__ENAME, newEname, newEname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getPremise()
  {
    return premise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPremise(Condition newPremise, NotificationChain msgs)
  {
    Condition oldPremise = premise;
    premise = newPremise;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.RULE__PREMISE, oldPremise, newPremise);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPremise(Condition newPremise)
  {
    if (newPremise != premise)
    {
      NotificationChain msgs = null;
      if (premise != null)
        msgs = ((InternalEObject)premise).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__PREMISE, null, msgs);
      if (newPremise != null)
        msgs = ((InternalEObject)newPremise).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__PREMISE, null, msgs);
      msgs = basicSetPremise(newPremise, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.RULE__PREMISE, newPremise, newPremise));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConclude()
  {
    return conclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConclude(Condition newConclude, NotificationChain msgs)
  {
    Condition oldConclude = conclude;
    conclude = newConclude;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.RULE__CONCLUDE, oldConclude, newConclude);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConclude(Condition newConclude)
  {
    if (newConclude != conclude)
    {
      NotificationChain msgs = null;
      if (conclude != null)
        msgs = ((InternalEObject)conclude).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__CONCLUDE, null, msgs);
      if (newConclude != null)
        msgs = ((InternalEObject)newConclude).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.RULE__CONCLUDE, null, msgs);
      msgs = basicSetConclude(newConclude, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.RULE__CONCLUDE, newConclude, newConclude));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.RULE__ENAME:
        return basicSetEname(null, msgs);
      case DslPackage.RULE__PREMISE:
        return basicSetPremise(null, msgs);
      case DslPackage.RULE__CONCLUDE:
        return basicSetConclude(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.RULE__RULENAME:
        return getRulename();
      case DslPackage.RULE__ENAME:
        return getEname();
      case DslPackage.RULE__PREMISE:
        return getPremise();
      case DslPackage.RULE__CONCLUDE:
        return getConclude();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.RULE__RULENAME:
        setRulename((String)newValue);
        return;
      case DslPackage.RULE__ENAME:
        setEname((ENAME)newValue);
        return;
      case DslPackage.RULE__PREMISE:
        setPremise((Condition)newValue);
        return;
      case DslPackage.RULE__CONCLUDE:
        setConclude((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.RULE__RULENAME:
        setRulename(RULENAME_EDEFAULT);
        return;
      case DslPackage.RULE__ENAME:
        setEname((ENAME)null);
        return;
      case DslPackage.RULE__PREMISE:
        setPremise((Condition)null);
        return;
      case DslPackage.RULE__CONCLUDE:
        setConclude((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.RULE__RULENAME:
        return RULENAME_EDEFAULT == null ? rulename != null : !RULENAME_EDEFAULT.equals(rulename);
      case DslPackage.RULE__ENAME:
        return ename != null;
      case DslPackage.RULE__PREMISE:
        return premise != null;
      case DslPackage.RULE__CONCLUDE:
        return conclude != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (rulename: ");
    result.append(rulename);
    result.append(')');
    return result.toString();
  }

} //RuleImpl
