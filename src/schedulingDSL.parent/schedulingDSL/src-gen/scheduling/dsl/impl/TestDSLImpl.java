/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.Configs;
import scheduling.dsl.DslPackage;
import scheduling.dsl.Permutation;
import scheduling.dsl.Rules;
import scheduling.dsl.Scenarios;
import scheduling.dsl.Specification;
import scheduling.dsl.TestDSL;
import scheduling.dsl.Verify;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test DSL</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getSpecification <em>Specification</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getConfigs <em>Configs</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getScenarios <em>Scenarios</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getPermutation <em>Permutation</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getRule <em>Rule</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TestDSLImpl#getVerify <em>Verify</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestDSLImpl extends MinimalEObjectImpl.Container implements TestDSL
{
  /**
   * The cached value of the '{@link #getSpecification() <em>Specification</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecification()
   * @generated
   * @ordered
   */
  protected Specification specification;

  /**
   * The cached value of the '{@link #getConfigs() <em>Configs</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfigs()
   * @generated
   * @ordered
   */
  protected Configs configs;

  /**
   * The cached value of the '{@link #getScenarios() <em>Scenarios</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScenarios()
   * @generated
   * @ordered
   */
  protected Scenarios scenarios;

  /**
   * The cached value of the '{@link #getPermutation() <em>Permutation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPermutation()
   * @generated
   * @ordered
   */
  protected Permutation permutation;

  /**
   * The cached value of the '{@link #getRule() <em>Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRule()
   * @generated
   * @ordered
   */
  protected Rules rule;

  /**
   * The cached value of the '{@link #getVerify() <em>Verify</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVerify()
   * @generated
   * @ordered
   */
  protected Verify verify;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestDSLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getTestDSL();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Specification getSpecification()
  {
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSpecification(Specification newSpecification, NotificationChain msgs)
  {
    Specification oldSpecification = specification;
    specification = newSpecification;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__SPECIFICATION, oldSpecification, newSpecification);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSpecification(Specification newSpecification)
  {
    if (newSpecification != specification)
    {
      NotificationChain msgs = null;
      if (specification != null)
        msgs = ((InternalEObject)specification).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__SPECIFICATION, null, msgs);
      if (newSpecification != null)
        msgs = ((InternalEObject)newSpecification).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__SPECIFICATION, null, msgs);
      msgs = basicSetSpecification(newSpecification, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__SPECIFICATION, newSpecification, newSpecification));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configs getConfigs()
  {
    return configs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfigs(Configs newConfigs, NotificationChain msgs)
  {
    Configs oldConfigs = configs;
    configs = newConfigs;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__CONFIGS, oldConfigs, newConfigs);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfigs(Configs newConfigs)
  {
    if (newConfigs != configs)
    {
      NotificationChain msgs = null;
      if (configs != null)
        msgs = ((InternalEObject)configs).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__CONFIGS, null, msgs);
      if (newConfigs != null)
        msgs = ((InternalEObject)newConfigs).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__CONFIGS, null, msgs);
      msgs = basicSetConfigs(newConfigs, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__CONFIGS, newConfigs, newConfigs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenarios getScenarios()
  {
    return scenarios;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetScenarios(Scenarios newScenarios, NotificationChain msgs)
  {
    Scenarios oldScenarios = scenarios;
    scenarios = newScenarios;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__SCENARIOS, oldScenarios, newScenarios);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScenarios(Scenarios newScenarios)
  {
    if (newScenarios != scenarios)
    {
      NotificationChain msgs = null;
      if (scenarios != null)
        msgs = ((InternalEObject)scenarios).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__SCENARIOS, null, msgs);
      if (newScenarios != null)
        msgs = ((InternalEObject)newScenarios).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__SCENARIOS, null, msgs);
      msgs = basicSetScenarios(newScenarios, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__SCENARIOS, newScenarios, newScenarios));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Permutation getPermutation()
  {
    return permutation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPermutation(Permutation newPermutation, NotificationChain msgs)
  {
    Permutation oldPermutation = permutation;
    permutation = newPermutation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__PERMUTATION, oldPermutation, newPermutation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPermutation(Permutation newPermutation)
  {
    if (newPermutation != permutation)
    {
      NotificationChain msgs = null;
      if (permutation != null)
        msgs = ((InternalEObject)permutation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__PERMUTATION, null, msgs);
      if (newPermutation != null)
        msgs = ((InternalEObject)newPermutation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__PERMUTATION, null, msgs);
      msgs = basicSetPermutation(newPermutation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__PERMUTATION, newPermutation, newPermutation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rules getRule()
  {
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRule(Rules newRule, NotificationChain msgs)
  {
    Rules oldRule = rule;
    rule = newRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__RULE, oldRule, newRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRule(Rules newRule)
  {
    if (newRule != rule)
    {
      NotificationChain msgs = null;
      if (rule != null)
        msgs = ((InternalEObject)rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__RULE, null, msgs);
      if (newRule != null)
        msgs = ((InternalEObject)newRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__RULE, null, msgs);
      msgs = basicSetRule(newRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__RULE, newRule, newRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Verify getVerify()
  {
    return verify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVerify(Verify newVerify, NotificationChain msgs)
  {
    Verify oldVerify = verify;
    verify = newVerify;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__VERIFY, oldVerify, newVerify);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVerify(Verify newVerify)
  {
    if (newVerify != verify)
    {
      NotificationChain msgs = null;
      if (verify != null)
        msgs = ((InternalEObject)verify).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__VERIFY, null, msgs);
      if (newVerify != null)
        msgs = ((InternalEObject)newVerify).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEST_DSL__VERIFY, null, msgs);
      msgs = basicSetVerify(newVerify, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEST_DSL__VERIFY, newVerify, newVerify));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.TEST_DSL__SPECIFICATION:
        return basicSetSpecification(null, msgs);
      case DslPackage.TEST_DSL__CONFIGS:
        return basicSetConfigs(null, msgs);
      case DslPackage.TEST_DSL__SCENARIOS:
        return basicSetScenarios(null, msgs);
      case DslPackage.TEST_DSL__PERMUTATION:
        return basicSetPermutation(null, msgs);
      case DslPackage.TEST_DSL__RULE:
        return basicSetRule(null, msgs);
      case DslPackage.TEST_DSL__VERIFY:
        return basicSetVerify(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.TEST_DSL__SPECIFICATION:
        return getSpecification();
      case DslPackage.TEST_DSL__CONFIGS:
        return getConfigs();
      case DslPackage.TEST_DSL__SCENARIOS:
        return getScenarios();
      case DslPackage.TEST_DSL__PERMUTATION:
        return getPermutation();
      case DslPackage.TEST_DSL__RULE:
        return getRule();
      case DslPackage.TEST_DSL__VERIFY:
        return getVerify();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.TEST_DSL__SPECIFICATION:
        setSpecification((Specification)newValue);
        return;
      case DslPackage.TEST_DSL__CONFIGS:
        setConfigs((Configs)newValue);
        return;
      case DslPackage.TEST_DSL__SCENARIOS:
        setScenarios((Scenarios)newValue);
        return;
      case DslPackage.TEST_DSL__PERMUTATION:
        setPermutation((Permutation)newValue);
        return;
      case DslPackage.TEST_DSL__RULE:
        setRule((Rules)newValue);
        return;
      case DslPackage.TEST_DSL__VERIFY:
        setVerify((Verify)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TEST_DSL__SPECIFICATION:
        setSpecification((Specification)null);
        return;
      case DslPackage.TEST_DSL__CONFIGS:
        setConfigs((Configs)null);
        return;
      case DslPackage.TEST_DSL__SCENARIOS:
        setScenarios((Scenarios)null);
        return;
      case DslPackage.TEST_DSL__PERMUTATION:
        setPermutation((Permutation)null);
        return;
      case DslPackage.TEST_DSL__RULE:
        setRule((Rules)null);
        return;
      case DslPackage.TEST_DSL__VERIFY:
        setVerify((Verify)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TEST_DSL__SPECIFICATION:
        return specification != null;
      case DslPackage.TEST_DSL__CONFIGS:
        return configs != null;
      case DslPackage.TEST_DSL__SCENARIOS:
        return scenarios != null;
      case DslPackage.TEST_DSL__PERMUTATION:
        return permutation != null;
      case DslPackage.TEST_DSL__RULE:
        return rule != null;
      case DslPackage.TEST_DSL__VERIFY:
        return verify != null;
    }
    return super.eIsSet(featureID);
  }

} //TestDSLImpl
