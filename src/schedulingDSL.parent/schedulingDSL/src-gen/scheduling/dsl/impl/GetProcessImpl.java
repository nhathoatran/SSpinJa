/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import scheduling.dsl.ChangeAction;
import scheduling.dsl.DslPackage;
import scheduling.dsl.Expression;
import scheduling.dsl.GetProcess;
import scheduling.dsl.SchedulerSet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Get Process</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.GetProcessImpl#getColFrom <em>Col From</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GetProcessImpl#getChange <em>Change</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GetProcessImpl#getTime <em>Time</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GetProcessImpl#getColTo <em>Col To</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GetProcessImpl extends StatementImpl implements GetProcess
{
  /**
   * The cached value of the '{@link #getColFrom() <em>Col From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColFrom()
   * @generated
   * @ordered
   */
  protected SchedulerSet colFrom;

  /**
   * The cached value of the '{@link #getChange() <em>Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChange()
   * @generated
   * @ordered
   */
  protected ChangeAction change;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected Expression time;

  /**
   * The cached value of the '{@link #getColTo() <em>Col To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColTo()
   * @generated
   * @ordered
   */
  protected SchedulerSet colTo;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GetProcessImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getGetProcess();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet getColFrom()
  {
    return colFrom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColFrom(SchedulerSet newColFrom, NotificationChain msgs)
  {
    SchedulerSet oldColFrom = colFrom;
    colFrom = newColFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__COL_FROM, oldColFrom, newColFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColFrom(SchedulerSet newColFrom)
  {
    if (newColFrom != colFrom)
    {
      NotificationChain msgs = null;
      if (colFrom != null)
        msgs = ((InternalEObject)colFrom).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__COL_FROM, null, msgs);
      if (newColFrom != null)
        msgs = ((InternalEObject)newColFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__COL_FROM, null, msgs);
      msgs = basicSetColFrom(newColFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__COL_FROM, newColFrom, newColFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeAction getChange()
  {
    return change;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChange(ChangeAction newChange, NotificationChain msgs)
  {
    ChangeAction oldChange = change;
    change = newChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__CHANGE, oldChange, newChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChange(ChangeAction newChange)
  {
    if (newChange != change)
    {
      NotificationChain msgs = null;
      if (change != null)
        msgs = ((InternalEObject)change).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__CHANGE, null, msgs);
      if (newChange != null)
        msgs = ((InternalEObject)newChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__CHANGE, null, msgs);
      msgs = basicSetChange(newChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__CHANGE, newChange, newChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(Expression newTime, NotificationChain msgs)
  {
    Expression oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(Expression newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet getColTo()
  {
    return colTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColTo(SchedulerSet newColTo, NotificationChain msgs)
  {
    SchedulerSet oldColTo = colTo;
    colTo = newColTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__COL_TO, oldColTo, newColTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColTo(SchedulerSet newColTo)
  {
    if (newColTo != colTo)
    {
      NotificationChain msgs = null;
      if (colTo != null)
        msgs = ((InternalEObject)colTo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__COL_TO, null, msgs);
      if (newColTo != null)
        msgs = ((InternalEObject)newColTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GET_PROCESS__COL_TO, null, msgs);
      msgs = basicSetColTo(newColTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GET_PROCESS__COL_TO, newColTo, newColTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.GET_PROCESS__COL_FROM:
        return basicSetColFrom(null, msgs);
      case DslPackage.GET_PROCESS__CHANGE:
        return basicSetChange(null, msgs);
      case DslPackage.GET_PROCESS__TIME:
        return basicSetTime(null, msgs);
      case DslPackage.GET_PROCESS__COL_TO:
        return basicSetColTo(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.GET_PROCESS__COL_FROM:
        return getColFrom();
      case DslPackage.GET_PROCESS__CHANGE:
        return getChange();
      case DslPackage.GET_PROCESS__TIME:
        return getTime();
      case DslPackage.GET_PROCESS__COL_TO:
        return getColTo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.GET_PROCESS__COL_FROM:
        setColFrom((SchedulerSet)newValue);
        return;
      case DslPackage.GET_PROCESS__CHANGE:
        setChange((ChangeAction)newValue);
        return;
      case DslPackage.GET_PROCESS__TIME:
        setTime((Expression)newValue);
        return;
      case DslPackage.GET_PROCESS__COL_TO:
        setColTo((SchedulerSet)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.GET_PROCESS__COL_FROM:
        setColFrom((SchedulerSet)null);
        return;
      case DslPackage.GET_PROCESS__CHANGE:
        setChange((ChangeAction)null);
        return;
      case DslPackage.GET_PROCESS__TIME:
        setTime((Expression)null);
        return;
      case DslPackage.GET_PROCESS__COL_TO:
        setColTo((SchedulerSet)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.GET_PROCESS__COL_FROM:
        return colFrom != null;
      case DslPackage.GET_PROCESS__CHANGE:
        return change != null;
      case DslPackage.GET_PROCESS__TIME:
        return time != null;
      case DslPackage.GET_PROCESS__COL_TO:
        return colTo != null;
    }
    return super.eIsSet(featureID);
  }

} //GetProcessImpl
