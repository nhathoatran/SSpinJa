/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.Behavior;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ND_Behavior;
import scheduling.dsl.SetTemplate;
import scheduling.dsl.Template;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Template</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.TemplateImpl#getTemplate <em>Template</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TemplateImpl#getBehavior <em>Behavior</em>}</li>
 *   <li>{@link scheduling.dsl.impl.TemplateImpl#getND_behavior <em>ND behavior</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TemplateImpl extends MinimalEObjectImpl.Container implements Template
{
  /**
   * The cached value of the '{@link #getTemplate() <em>Template</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTemplate()
   * @generated
   * @ordered
   */
  protected SetTemplate template;

  /**
   * The cached value of the '{@link #getBehavior() <em>Behavior</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBehavior()
   * @generated
   * @ordered
   */
  protected Behavior behavior;

  /**
   * The cached value of the '{@link #getND_behavior() <em>ND behavior</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getND_behavior()
   * @generated
   * @ordered
   */
  protected ND_Behavior nD_behavior;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TemplateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getTemplate();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetTemplate getTemplate()
  {
    return template;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTemplate(SetTemplate newTemplate, NotificationChain msgs)
  {
    SetTemplate oldTemplate = template;
    template = newTemplate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__TEMPLATE, oldTemplate, newTemplate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTemplate(SetTemplate newTemplate)
  {
    if (newTemplate != template)
    {
      NotificationChain msgs = null;
      if (template != null)
        msgs = ((InternalEObject)template).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__TEMPLATE, null, msgs);
      if (newTemplate != null)
        msgs = ((InternalEObject)newTemplate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__TEMPLATE, null, msgs);
      msgs = basicSetTemplate(newTemplate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__TEMPLATE, newTemplate, newTemplate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Behavior getBehavior()
  {
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBehavior(Behavior newBehavior, NotificationChain msgs)
  {
    Behavior oldBehavior = behavior;
    behavior = newBehavior;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__BEHAVIOR, oldBehavior, newBehavior);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBehavior(Behavior newBehavior)
  {
    if (newBehavior != behavior)
    {
      NotificationChain msgs = null;
      if (behavior != null)
        msgs = ((InternalEObject)behavior).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__BEHAVIOR, null, msgs);
      if (newBehavior != null)
        msgs = ((InternalEObject)newBehavior).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__BEHAVIOR, null, msgs);
      msgs = basicSetBehavior(newBehavior, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__BEHAVIOR, newBehavior, newBehavior));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ND_Behavior getND_behavior()
  {
    return nD_behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetND_behavior(ND_Behavior newND_behavior, NotificationChain msgs)
  {
    ND_Behavior oldND_behavior = nD_behavior;
    nD_behavior = newND_behavior;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__ND_BEHAVIOR, oldND_behavior, newND_behavior);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setND_behavior(ND_Behavior newND_behavior)
  {
    if (newND_behavior != nD_behavior)
    {
      NotificationChain msgs = null;
      if (nD_behavior != null)
        msgs = ((InternalEObject)nD_behavior).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__ND_BEHAVIOR, null, msgs);
      if (newND_behavior != null)
        msgs = ((InternalEObject)newND_behavior).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.TEMPLATE__ND_BEHAVIOR, null, msgs);
      msgs = basicSetND_behavior(newND_behavior, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.TEMPLATE__ND_BEHAVIOR, newND_behavior, newND_behavior));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.TEMPLATE__TEMPLATE:
        return basicSetTemplate(null, msgs);
      case DslPackage.TEMPLATE__BEHAVIOR:
        return basicSetBehavior(null, msgs);
      case DslPackage.TEMPLATE__ND_BEHAVIOR:
        return basicSetND_behavior(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.TEMPLATE__TEMPLATE:
        return getTemplate();
      case DslPackage.TEMPLATE__BEHAVIOR:
        return getBehavior();
      case DslPackage.TEMPLATE__ND_BEHAVIOR:
        return getND_behavior();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.TEMPLATE__TEMPLATE:
        setTemplate((SetTemplate)newValue);
        return;
      case DslPackage.TEMPLATE__BEHAVIOR:
        setBehavior((Behavior)newValue);
        return;
      case DslPackage.TEMPLATE__ND_BEHAVIOR:
        setND_behavior((ND_Behavior)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TEMPLATE__TEMPLATE:
        setTemplate((SetTemplate)null);
        return;
      case DslPackage.TEMPLATE__BEHAVIOR:
        setBehavior((Behavior)null);
        return;
      case DslPackage.TEMPLATE__ND_BEHAVIOR:
        setND_behavior((ND_Behavior)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.TEMPLATE__TEMPLATE:
        return template != null;
      case DslPackage.TEMPLATE__BEHAVIOR:
        return behavior != null;
      case DslPackage.TEMPLATE__ND_BEHAVIOR:
        return nD_behavior != null;
    }
    return super.eIsSet(featureID);
  }

} //TemplateImpl
