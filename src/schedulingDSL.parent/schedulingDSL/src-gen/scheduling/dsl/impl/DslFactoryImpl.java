/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import scheduling.dsl.ASSIGN;
import scheduling.dsl.Action;
import scheduling.dsl.And;
import scheduling.dsl.ArrayDec;
import scheduling.dsl.AssertStatement;
import scheduling.dsl.AssignParameters;
import scheduling.dsl.Atomic;
import scheduling.dsl.AttDef;
import scheduling.dsl.Attribute;
import scheduling.dsl.Behavior;
import scheduling.dsl.BlockStatement;
import scheduling.dsl.BoolConstant;
import scheduling.dsl.BoolValue;
import scheduling.dsl.BranchID;
import scheduling.dsl.CTL_AT;
import scheduling.dsl.CallFunction;
import scheduling.dsl.ChanDec;
import scheduling.dsl.ChangeAction;
import scheduling.dsl.ChangeListValue;
import scheduling.dsl.ChangeValue;
import scheduling.dsl.ChangeValueExpression;
import scheduling.dsl.ChangeValueUnOp;
import scheduling.dsl.CheckPoint;
import scheduling.dsl.CollectionInit;
import scheduling.dsl.CompVarDef;
import scheduling.dsl.CompVarDefination;
import scheduling.dsl.CompVarName;
import scheduling.dsl.ComparationDef;
import scheduling.dsl.ComparationName;
import scheduling.dsl.Comparison;
import scheduling.dsl.Component;
import scheduling.dsl.Condition;
import scheduling.dsl.Config;
import scheduling.dsl.ConfigProcess;
import scheduling.dsl.Configs;
import scheduling.dsl.Configuration;
import scheduling.dsl.ConstDec;
import scheduling.dsl.Constraint;
import scheduling.dsl.Constraints;
import scheduling.dsl.Constructor;
import scheduling.dsl.Contains;
import scheduling.dsl.CurentCore;
import scheduling.dsl.DataBlockDef;
import scheduling.dsl.DataDef;
import scheduling.dsl.DataSingleDef;
import scheduling.dsl.DeclareEvent;
import scheduling.dsl.DeclareList;
import scheduling.dsl.DeclareProcess;
import scheduling.dsl.DefBehaviorProc;
import scheduling.dsl.DefCore;
import scheduling.dsl.Define;
import scheduling.dsl.Directory;
import scheduling.dsl.DslFactory;
import scheduling.dsl.DslPackage;
import scheduling.dsl.ELABEL;
import scheduling.dsl.ELSEs;
import scheduling.dsl.ENAME;
import scheduling.dsl.Element;
import scheduling.dsl.EmptyExpression;
import scheduling.dsl.EnumDec;
import scheduling.dsl.EnumType;
import scheduling.dsl.Equality;
import scheduling.dsl.Event;
import scheduling.dsl.EventDef;
import scheduling.dsl.EventFunction;
import scheduling.dsl.EventOpt;
import scheduling.dsl.EventStm;
import scheduling.dsl.EventTemplate;
import scheduling.dsl.ExecuteProcess;
import scheduling.dsl.ExistExpression;
import scheduling.dsl.ExistP;
import scheduling.dsl.ExistPID;
import scheduling.dsl.Expression;
import scheduling.dsl.FileExtension;
import scheduling.dsl.FileName;
import scheduling.dsl.Flow;
import scheduling.dsl.FullExpression;
import scheduling.dsl.FuncPara;
import scheduling.dsl.Function;
import scheduling.dsl.FunctionName;
import scheduling.dsl.GUARD;
import scheduling.dsl.GenCodeStatement;
import scheduling.dsl.GenComponent;
import scheduling.dsl.GenConfiguration;
import scheduling.dsl.GenDSL;
import scheduling.dsl.GenLnCodeStatement;
import scheduling.dsl.GenPart;
import scheduling.dsl.Generate;
import scheduling.dsl.GenerateOption;
import scheduling.dsl.GetIDExpression;
import scheduling.dsl.GetInstance;
import scheduling.dsl.GetName;
import scheduling.dsl.GetPID;
import scheduling.dsl.GetProcess;
import scheduling.dsl.HandlerDef;
import scheduling.dsl.HasID;
import scheduling.dsl.HasIDINT;
import scheduling.dsl.HasNameExpression;
import scheduling.dsl.IFs;
import scheduling.dsl.ISR;
import scheduling.dsl.IfDef;
import scheduling.dsl.IfStatement;
import scheduling.dsl.Implies;
import scheduling.dsl.InExpression;
import scheduling.dsl.InPExpression;
import scheduling.dsl.InPIDExpression;
import scheduling.dsl.InstanceID;
import scheduling.dsl.IntConstant;
import scheduling.dsl.InterfaceDef;
import scheduling.dsl.InterfaceFunction;
import scheduling.dsl.InterfaceParameterDeclare;
import scheduling.dsl.InterfaceParameterList;
import scheduling.dsl.Invariants;
import scheduling.dsl.Invariatnts;
import scheduling.dsl.JavaCode;
import scheduling.dsl.LTE;
import scheduling.dsl.List;
import scheduling.dsl.ListDef;
import scheduling.dsl.ListElement;
import scheduling.dsl.LoopProcess;
import scheduling.dsl.Method;
import scheduling.dsl.Minus;
import scheduling.dsl.Model;
import scheduling.dsl.MoveProcess;
import scheduling.dsl.MulOrDiv;
import scheduling.dsl.ND_Behavior;
import scheduling.dsl.NewElement;
import scheduling.dsl.NewProcessStatement;
import scheduling.dsl.Not;
import scheduling.dsl.NullExpression;
import scheduling.dsl.NumValue;
import scheduling.dsl.OneDec;
import scheduling.dsl.Opt;
import scheduling.dsl.Options;
import scheduling.dsl.Or;
import scheduling.dsl.OrderType;
import scheduling.dsl.OrderingDef;
import scheduling.dsl.ParaListItem;
import scheduling.dsl.ParaValue;
import scheduling.dsl.ParameterAssign;
import scheduling.dsl.ParameterList;
import scheduling.dsl.ParameterName;
import scheduling.dsl.PeriodicProcess;
import scheduling.dsl.Permutation;
import scheduling.dsl.Plus;
import scheduling.dsl.PointID;
import scheduling.dsl.PrintLogStatement;
import scheduling.dsl.PrintStatement;
import scheduling.dsl.ProcType;
import scheduling.dsl.ProcessBehavior;
import scheduling.dsl.ProcessBehaviors;
import scheduling.dsl.ProcessConfig;
import scheduling.dsl.ProcessConfiguration;
import scheduling.dsl.ProcessDSL;
import scheduling.dsl.ProcessDataDef;
import scheduling.dsl.ProcessDef;
import scheduling.dsl.ProcessGeneration;
import scheduling.dsl.ProcessID;
import scheduling.dsl.ProcessInit;
import scheduling.dsl.ProcessName;
import scheduling.dsl.ProcessPropertyDef;
import scheduling.dsl.ProcessPropertyName;
import scheduling.dsl.ProcessType;
import scheduling.dsl.Proper;
import scheduling.dsl.PropertyAssignment;
import scheduling.dsl.QualifiedNames;
import scheduling.dsl.RTCTL;
import scheduling.dsl.Range;
import scheduling.dsl.RefList;
import scheduling.dsl.RefListItem;
import scheduling.dsl.RemoveProcess;
import scheduling.dsl.ReorderProcess;
import scheduling.dsl.ReturnStatement;
import scheduling.dsl.Rule;
import scheduling.dsl.Rules;
import scheduling.dsl.SKIP;
import scheduling.dsl.Scenarios;
import scheduling.dsl.SchedulerCollectionDef;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.SchedulerDataDef;
import scheduling.dsl.SchedulerDef;
import scheduling.dsl.SchedulerInit;
import scheduling.dsl.SchedulerPropertyDef;
import scheduling.dsl.SchedulerPropertyName;
import scheduling.dsl.SchedulerSet;
import scheduling.dsl.SequenceAction;
import scheduling.dsl.Set;
import scheduling.dsl.SetExecTime;
import scheduling.dsl.SetProcess;
import scheduling.dsl.SetProcessInstance;
import scheduling.dsl.SetReturnCol;
import scheduling.dsl.SetReturnSet;
import scheduling.dsl.SetTemplate;
import scheduling.dsl.Specification;
import scheduling.dsl.SporadicProcess;
import scheduling.dsl.StateID;
import scheduling.dsl.Statement;
import scheduling.dsl.Step;
import scheduling.dsl.StepGeneration;
import scheduling.dsl.Stm;
import scheduling.dsl.SysVar;
import scheduling.dsl.Template;
import scheduling.dsl.TestDSL;
import scheduling.dsl.TestPart;
import scheduling.dsl.TotalStep;
import scheduling.dsl.TypeName;
import scheduling.dsl.VDec;
import scheduling.dsl.Value;
import scheduling.dsl.VarBlockDef;
import scheduling.dsl.VarDec;
import scheduling.dsl.VarDecl;
import scheduling.dsl.VarDef;
import scheduling.dsl.VarDefinition;
import scheduling.dsl.VarInit;
import scheduling.dsl.VarName;
import scheduling.dsl.VarSingleDef;
import scheduling.dsl.Verify;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DslFactoryImpl extends EFactoryImpl implements DslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DslFactory init()
  {
    try
    {
      DslFactory theDslFactory = (DslFactory)EPackage.Registry.INSTANCE.getEFactory(DslPackage.eNS_URI);
      if (theDslFactory != null)
      {
        return theDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DslPackage.MODEL: return createModel();
      case DslPackage.GEN_DSL: return createGenDSL();
      case DslPackage.ISR: return createISR();
      case DslPackage.TEST_DSL: return createTestDSL();
      case DslPackage.CONFIGS: return createConfigs();
      case DslPackage.CONFIG: return createConfig();
      case DslPackage.CONFIGURATION: return createConfiguration();
      case DslPackage.VAR_INIT: return createVarInit();
      case DslPackage.COLLECTION_INIT: return createCollectionInit();
      case DslPackage.SCENARIOS: return createScenarios();
      case DslPackage.PERMUTATION: return createPermutation();
      case DslPackage.FLOW: return createFlow();
      case DslPackage.ENAME: return createENAME();
      case DslPackage.RULES: return createRules();
      case DslPackage.RULE: return createRule();
      case DslPackage.CONDITION: return createCondition();
      case DslPackage.SPECIFICATION: return createSpecification();
      case DslPackage.DECLARE_LIST: return createDeclareList();
      case DslPackage.ONE_DEC: return createOneDec();
      case DslPackage.ENUM_DEC: return createEnumDec();
      case DslPackage.ENUM_TYPE: return createEnumType();
      case DslPackage.CONST_DEC: return createConstDec();
      case DslPackage.VAR_DEC: return createVarDec();
      case DslPackage.VDEC: return createVDec();
      case DslPackage.ARRAY_DEC: return createArrayDec();
      case DslPackage.CHAN_DEC: return createChanDec();
      case DslPackage.DEFINE: return createDefine();
      case DslPackage.REF_LIST: return createRefList();
      case DslPackage.FUNCTION: return createFunction();
      case DslPackage.REF_LIST_ITEM: return createRefListItem();
      case DslPackage.FUNC_PARA: return createFuncPara();
      case DslPackage.DECLARE_EVENT: return createDeclareEvent();
      case DslPackage.EVENT: return createEvent();
      case DslPackage.EVENT_FUNCTION: return createEventFunction();
      case DslPackage.PARA_LIST_ITEM: return createParaListItem();
      case DslPackage.ELABEL: return createELABEL();
      case DslPackage.SEQUENCE_ACTION: return createSequenceAction();
      case DslPackage.ACTION: return createAction();
      case DslPackage.GUARD: return createGUARD();
      case DslPackage.IFS: return createIFs();
      case DslPackage.ASSIGN: return createASSIGN();
      case DslPackage.OPTIONS: return createOptions();
      case DslPackage.ELS_ES: return createELSEs();
      case DslPackage.SKIP: return createSKIP();
      case DslPackage.PROCESS_CONFIGURATION: return createProcessConfiguration();
      case DslPackage.DEF_BEHAVIOR_PROC: return createDefBehaviorProc();
      case DslPackage.PROC_TYPE: return createProcType();
      case DslPackage.PROCESS_TYPE: return createProcessType();
      case DslPackage.ATTRIBUTE: return createAttribute();
      case DslPackage.ATT_DEF: return createAttDef();
      case DslPackage.CONSTRAINTS: return createConstraints();
      case DslPackage.CONSTRAINT: return createConstraint();
      case DslPackage.PROCESS_BEHAVIORS: return createProcessBehaviors();
      case DslPackage.PROCESS_BEHAVIOR: return createProcessBehavior();
      case DslPackage.CONSTRUCTOR: return createConstructor();
      case DslPackage.METHOD: return createMethod();
      case DslPackage.INVARIANTS: return createInvariants();
      case DslPackage.ASSIGN_PARAMETERS: return createAssignParameters();
      case DslPackage.PROCESS_DSL: return createProcessDSL();
      case DslPackage.VALUE: return createValue();
      case DslPackage.LIST_DEF: return createListDef();
      case DslPackage.LIST: return createList();
      case DslPackage.RANGE: return createRange();
      case DslPackage.NUM_VALUE: return createNumValue();
      case DslPackage.BOOL_VALUE: return createBoolValue();
      case DslPackage.PROCESS_DATA_DEF: return createProcessDataDef();
      case DslPackage.PROCESS_PROPERTY_DEF: return createProcessPropertyDef();
      case DslPackage.PROCESS_PROPERTY_NAME: return createProcessPropertyName();
      case DslPackage.PROCESS_DEF: return createProcessDef();
      case DslPackage.PARAMETER_LIST: return createParameterList();
      case DslPackage.PARAMETER_ASSIGN: return createParameterAssign();
      case DslPackage.PARAMETER_NAME: return createParameterName();
      case DslPackage.PROCESS: return createProcess();
      case DslPackage.PROPERTY_ASSIGNMENT: return createPropertyAssignment();
      case DslPackage.PROCESS_CONFIG: return createProcessConfig();
      case DslPackage.CONFIG_PROCESS: return createConfigProcess();
      case DslPackage.SPORADIC_PROCESS: return createSporadicProcess();
      case DslPackage.PERIODIC_PROCESS: return createPeriodicProcess();
      case DslPackage.PROCESS_INIT: return createProcessInit();
      case DslPackage.SET: return createSet();
      case DslPackage.ELEMENT: return createElement();
      case DslPackage.SCHEDULER_DSL: return createSchedulerDSL();
      case DslPackage.DEF_CORE: return createDefCore();
      case DslPackage.RTCTL: return createRTCTL();
      case DslPackage.LTE: return createLTE();
      case DslPackage.CTL_AT: return createCTL_AT();
      case DslPackage.VERIFY: return createVerify();
      case DslPackage.ORDERING_DEF: return createOrderingDef();
      case DslPackage.COMP_VAR_DEF: return createCompVarDef();
      case DslPackage.COMP_VAR_DEFINATION: return createCompVarDefination();
      case DslPackage.COMP_VAR_NAME: return createCompVarName();
      case DslPackage.COMPARATION_DEF: return createComparationDef();
      case DslPackage.COMPARATION_NAME: return createComparationName();
      case DslPackage.RETURN_STATEMENT: return createReturnStatement();
      case DslPackage.SCHEDULER_DEF: return createSchedulerDef();
      case DslPackage.SCHEDULER_INIT: return createSchedulerInit();
      case DslPackage.IF_DEF: return createIfDef();
      case DslPackage.INTERFACE_DEF: return createInterfaceDef();
      case DslPackage.INTERFACE_FUNCTION: return createInterfaceFunction();
      case DslPackage.INTERFACE_PARAMETER_LIST: return createInterfaceParameterList();
      case DslPackage.INTERFACE_PARAMETER_DECLARE: return createInterfaceParameterDeclare();
      case DslPackage.FUNCTION_NAME: return createFunctionName();
      case DslPackage.VAR_DEF: return createVarDef();
      case DslPackage.VAR_DECL: return createVarDecl();
      case DslPackage.VAR_BLOCK_DEF: return createVarBlockDef();
      case DslPackage.VAR_SINGLE_DEF: return createVarSingleDef();
      case DslPackage.VAR_DEFINITION: return createVarDefinition();
      case DslPackage.VAR_NAME: return createVarName();
      case DslPackage.SCHEDULER_DATA_DEF: return createSchedulerDataDef();
      case DslPackage.DATA_DEF: return createDataDef();
      case DslPackage.DATA_BLOCK_DEF: return createDataBlockDef();
      case DslPackage.DATA_SINGLE_DEF: return createDataSingleDef();
      case DslPackage.SCHEDULER_PROPERTY_DEF: return createSchedulerPropertyDef();
      case DslPackage.SCHEDULER_PROPERTY_NAME: return createSchedulerPropertyName();
      case DslPackage.SCHEDULER_COLLECTION_DEF: return createSchedulerCollectionDef();
      case DslPackage.SCHEDULER_SET: return createSchedulerSet();
      case DslPackage.GENERATE: return createGenerate();
      case DslPackage.GEN_CONFIGURATION: return createGenConfiguration();
      case DslPackage.GENERATE_OPTION: return createGenerateOption();
      case DslPackage.DIRECTORY: return createDirectory();
      case DslPackage.FILE_NAME: return createFileName();
      case DslPackage.FILE_EXTENSION: return createFileExtension();
      case DslPackage.TEST_PART: return createTestPart();
      case DslPackage.GEN_PART: return createGenPart();
      case DslPackage.GEN_COMPONENT: return createGenComponent();
      case DslPackage.COMPONENT: return createComponent();
      case DslPackage.PROCESS_GENERATION: return createProcessGeneration();
      case DslPackage.STEP_GENERATION: return createStepGeneration();
      case DslPackage.TEMPLATE: return createTemplate();
      case DslPackage.SET_TEMPLATE: return createSetTemplate();
      case DslPackage.BEHAVIOR: return createBehavior();
      case DslPackage.EVENT_TEMPLATE: return createEventTemplate();
      case DslPackage.ND_BEHAVIOR: return createND_Behavior();
      case DslPackage.HANDLER_DEF: return createHandlerDef();
      case DslPackage.EVENT_DEF: return createEventDef();
      case DslPackage.EVENT_OPT: return createEventOpt();
      case DslPackage.OPT: return createOpt();
      case DslPackage.EVENT_STM: return createEventStm();
      case DslPackage.STM: return createStm();
      case DslPackage.STATEMENT: return createStatement();
      case DslPackage.JAVA_CODE: return createJavaCode();
      case DslPackage.DECLARE_PROCESS: return createDeclareProcess();
      case DslPackage.SET_PROCESS: return createSetProcess();
      case DslPackage.SET_EXEC_TIME: return createSetExecTime();
      case DslPackage.SET_RETURN_COL: return createSetReturnCol();
      case DslPackage.SET_RETURN_SET: return createSetReturnSet();
      case DslPackage.CHECK_POINT: return createCheckPoint();
      case DslPackage.POINT_ID: return createPointID();
      case DslPackage.CALL_FUNCTION: return createCallFunction();
      case DslPackage.REMOVE_PROCESS: return createRemoveProcess();
      case DslPackage.MOVE_PROCESS: return createMoveProcess();
      case DslPackage.REORDER_PROCESS: return createReorderProcess();
      case DslPackage.SET_PROCESS_INSTANCE: return createSetProcessInstance();
      case DslPackage.LOOP_PROCESS: return createLoopProcess();
      case DslPackage.CHANGE_ACTION: return createChangeAction();
      case DslPackage.GET_PROCESS: return createGetProcess();
      case DslPackage.EXECUTE_PROCESS: return createExecuteProcess();
      case DslPackage.IF_STATEMENT: return createIfStatement();
      case DslPackage.BLOCK_STATEMENT: return createBlockStatement();
      case DslPackage.NEW_PROCESS_STATEMENT: return createNewProcessStatement();
      case DslPackage.NEW_ELEMENT: return createNewElement();
      case DslPackage.PARA_VALUE: return createParaValue();
      case DslPackage.ASSERT_STATEMENT: return createAssertStatement();
      case DslPackage.PRINT_STATEMENT: return createPrintStatement();
      case DslPackage.PRINT_LOG_STATEMENT: return createPrintLogStatement();
      case DslPackage.GEN_CODE_STATEMENT: return createGenCodeStatement();
      case DslPackage.GEN_LN_CODE_STATEMENT: return createGenLnCodeStatement();
      case DslPackage.CHANGE_VALUE: return createChangeValue();
      case DslPackage.CHANGE_VALUE_UN_OP: return createChangeValueUnOp();
      case DslPackage.CHANGE_VALUE_EXPRESSION: return createChangeValueExpression();
      case DslPackage.CHANGE_LIST_VALUE: return createChangeListValue();
      case DslPackage.EXPRESSION: return createExpression();
      case DslPackage.GET_ID_EXPRESSION: return createGetIDExpression();
      case DslPackage.EMPTY_EXPRESSION: return createEmptyExpression();
      case DslPackage.FULL_EXPRESSION: return createFullExpression();
      case DslPackage.IN_EXPRESSION: return createInExpression();
      case DslPackage.IN_PID_EXPRESSION: return createInPIDExpression();
      case DslPackage.IN_PEXPRESSION: return createInPExpression();
      case DslPackage.EXIST_EXPRESSION: return createExistExpression();
      case DslPackage.EXIST_PID: return createExistPID();
      case DslPackage.EXIST_P: return createExistP();
      case DslPackage.NULL_EXPRESSION: return createNullExpression();
      case DslPackage.HAS_NAME_EXPRESSION: return createHasNameExpression();
      case DslPackage.HAS_ID: return createHasID();
      case DslPackage.HAS_IDINT: return createHasIDINT();
      case DslPackage.GET_NAME: return createGetName();
      case DslPackage.ATOMIC: return createAtomic();
      case DslPackage.SYS_VAR: return createSysVar();
      case DslPackage.QUALIFIED_NAMES: return createQualifiedNames();
      case DslPackage.PROPER: return createProper();
      case DslPackage.LIST_ELEMENT: return createListElement();
      case DslPackage.INVARIATNTS: return createInvariatnts();
      case DslPackage.OR: return createOr();
      case DslPackage.AND: return createAnd();
      case DslPackage.EQUALITY: return createEquality();
      case DslPackage.COMPARISON: return createComparison();
      case DslPackage.PLUS: return createPlus();
      case DslPackage.MINUS: return createMinus();
      case DslPackage.MUL_OR_DIV: return createMulOrDiv();
      case DslPackage.IMPLIES: return createImplies();
      case DslPackage.NOT: return createNot();
      case DslPackage.INT_CONSTANT: return createIntConstant();
      case DslPackage.CURENT_CORE: return createCurentCore();
      case DslPackage.BOOL_CONSTANT: return createBoolConstant();
      case DslPackage.STATE_ID: return createStateID();
      case DslPackage.BRANCH_ID: return createBranchID();
      case DslPackage.STEP: return createStep();
      case DslPackage.TOTAL_STEP: return createTotalStep();
      case DslPackage.GET_INSTANCE: return createGetInstance();
      case DslPackage.GET_PID: return createGetPID();
      case DslPackage.INSTANCE_ID: return createInstanceID();
      case DslPackage.PROCESS_ID: return createProcessID();
      case DslPackage.PROCESS_NAME: return createProcessName();
      case DslPackage.CONTAINS: return createContains();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DslPackage.TYPE_NAME:
        return createTypeNameFromString(eDataType, initialValue);
      case DslPackage.STRING:
        return createStringFromString(eDataType, initialValue);
      case DslPackage.ORDER_TYPE:
        return createOrderTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DslPackage.TYPE_NAME:
        return convertTypeNameToString(eDataType, instanceValue);
      case DslPackage.STRING:
        return convertStringToString(eDataType, instanceValue);
      case DslPackage.ORDER_TYPE:
        return convertOrderTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenDSL createGenDSL()
  {
    GenDSLImpl genDSL = new GenDSLImpl();
    return genDSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ISR createISR()
  {
    ISRImpl isr = new ISRImpl();
    return isr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestDSL createTestDSL()
  {
    TestDSLImpl testDSL = new TestDSLImpl();
    return testDSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configs createConfigs()
  {
    ConfigsImpl configs = new ConfigsImpl();
    return configs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Config createConfig()
  {
    ConfigImpl config = new ConfigImpl();
    return config;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configuration createConfiguration()
  {
    ConfigurationImpl configuration = new ConfigurationImpl();
    return configuration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarInit createVarInit()
  {
    VarInitImpl varInit = new VarInitImpl();
    return varInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CollectionInit createCollectionInit()
  {
    CollectionInitImpl collectionInit = new CollectionInitImpl();
    return collectionInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scenarios createScenarios()
  {
    ScenariosImpl scenarios = new ScenariosImpl();
    return scenarios;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Permutation createPermutation()
  {
    PermutationImpl permutation = new PermutationImpl();
    return permutation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Flow createFlow()
  {
    FlowImpl flow = new FlowImpl();
    return flow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ENAME createENAME()
  {
    ENAMEImpl ename = new ENAMEImpl();
    return ename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rules createRules()
  {
    RulesImpl rules = new RulesImpl();
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rule createRule()
  {
    RuleImpl rule = new RuleImpl();
    return rule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Specification createSpecification()
  {
    SpecificationImpl specification = new SpecificationImpl();
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclareList createDeclareList()
  {
    DeclareListImpl declareList = new DeclareListImpl();
    return declareList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OneDec createOneDec()
  {
    OneDecImpl oneDec = new OneDecImpl();
    return oneDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumDec createEnumDec()
  {
    EnumDecImpl enumDec = new EnumDecImpl();
    return enumDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumType createEnumType()
  {
    EnumTypeImpl enumType = new EnumTypeImpl();
    return enumType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstDec createConstDec()
  {
    ConstDecImpl constDec = new ConstDecImpl();
    return constDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDec createVarDec()
  {
    VarDecImpl varDec = new VarDecImpl();
    return varDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VDec createVDec()
  {
    VDecImpl vDec = new VDecImpl();
    return vDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDec createArrayDec()
  {
    ArrayDecImpl arrayDec = new ArrayDecImpl();
    return arrayDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChanDec createChanDec()
  {
    ChanDecImpl chanDec = new ChanDecImpl();
    return chanDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefList createRefList()
  {
    RefListImpl refList = new RefListImpl();
    return refList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefListItem createRefListItem()
  {
    RefListItemImpl refListItem = new RefListItemImpl();
    return refListItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncPara createFuncPara()
  {
    FuncParaImpl funcPara = new FuncParaImpl();
    return funcPara;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclareEvent createDeclareEvent()
  {
    DeclareEventImpl declareEvent = new DeclareEventImpl();
    return declareEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventFunction createEventFunction()
  {
    EventFunctionImpl eventFunction = new EventFunctionImpl();
    return eventFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParaListItem createParaListItem()
  {
    ParaListItemImpl paraListItem = new ParaListItemImpl();
    return paraListItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELABEL createELABEL()
  {
    ELABELImpl elabel = new ELABELImpl();
    return elabel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceAction createSequenceAction()
  {
    SequenceActionImpl sequenceAction = new SequenceActionImpl();
    return sequenceAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GUARD createGUARD()
  {
    GUARDImpl guard = new GUARDImpl();
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IFs createIFs()
  {
    IFsImpl iFs = new IFsImpl();
    return iFs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ASSIGN createASSIGN()
  {
    ASSIGNImpl assign = new ASSIGNImpl();
    return assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Options createOptions()
  {
    OptionsImpl options = new OptionsImpl();
    return options;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ELSEs createELSEs()
  {
    ELSEsImpl elsEs = new ELSEsImpl();
    return elsEs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SKIP createSKIP()
  {
    SKIPImpl skip = new SKIPImpl();
    return skip;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessConfiguration createProcessConfiguration()
  {
    ProcessConfigurationImpl processConfiguration = new ProcessConfigurationImpl();
    return processConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefBehaviorProc createDefBehaviorProc()
  {
    DefBehaviorProcImpl defBehaviorProc = new DefBehaviorProcImpl();
    return defBehaviorProc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcType createProcType()
  {
    ProcTypeImpl procType = new ProcTypeImpl();
    return procType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessType createProcessType()
  {
    ProcessTypeImpl processType = new ProcessTypeImpl();
    return processType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttDef createAttDef()
  {
    AttDefImpl attDef = new AttDefImpl();
    return attDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraints createConstraints()
  {
    ConstraintsImpl constraints = new ConstraintsImpl();
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessBehaviors createProcessBehaviors()
  {
    ProcessBehaviorsImpl processBehaviors = new ProcessBehaviorsImpl();
    return processBehaviors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessBehavior createProcessBehavior()
  {
    ProcessBehaviorImpl processBehavior = new ProcessBehaviorImpl();
    return processBehavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constructor createConstructor()
  {
    ConstructorImpl constructor = new ConstructorImpl();
    return constructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Method createMethod()
  {
    MethodImpl method = new MethodImpl();
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariants createInvariants()
  {
    InvariantsImpl invariants = new InvariantsImpl();
    return invariants;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssignParameters createAssignParameters()
  {
    AssignParametersImpl assignParameters = new AssignParametersImpl();
    return assignParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessDSL createProcessDSL()
  {
    ProcessDSLImpl processDSL = new ProcessDSLImpl();
    return processDSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListDef createListDef()
  {
    ListDefImpl listDef = new ListDefImpl();
    return listDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public List createList()
  {
    ListImpl list = new ListImpl();
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Range createRange()
  {
    RangeImpl range = new RangeImpl();
    return range;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumValue createNumValue()
  {
    NumValueImpl numValue = new NumValueImpl();
    return numValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolValue createBoolValue()
  {
    BoolValueImpl boolValue = new BoolValueImpl();
    return boolValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessDataDef createProcessDataDef()
  {
    ProcessDataDefImpl processDataDef = new ProcessDataDefImpl();
    return processDataDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessPropertyDef createProcessPropertyDef()
  {
    ProcessPropertyDefImpl processPropertyDef = new ProcessPropertyDefImpl();
    return processPropertyDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessPropertyName createProcessPropertyName()
  {
    ProcessPropertyNameImpl processPropertyName = new ProcessPropertyNameImpl();
    return processPropertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessDef createProcessDef()
  {
    ProcessDefImpl processDef = new ProcessDefImpl();
    return processDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterAssign createParameterAssign()
  {
    ParameterAssignImpl parameterAssign = new ParameterAssignImpl();
    return parameterAssign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterName createParameterName()
  {
    ParameterNameImpl parameterName = new ParameterNameImpl();
    return parameterName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process createProcess()
  {
    ProcessImpl process = new ProcessImpl();
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyAssignment createPropertyAssignment()
  {
    PropertyAssignmentImpl propertyAssignment = new PropertyAssignmentImpl();
    return propertyAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessConfig createProcessConfig()
  {
    ProcessConfigImpl processConfig = new ProcessConfigImpl();
    return processConfig;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConfigProcess createConfigProcess()
  {
    ConfigProcessImpl configProcess = new ConfigProcessImpl();
    return configProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SporadicProcess createSporadicProcess()
  {
    SporadicProcessImpl sporadicProcess = new SporadicProcessImpl();
    return sporadicProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PeriodicProcess createPeriodicProcess()
  {
    PeriodicProcessImpl periodicProcess = new PeriodicProcessImpl();
    return periodicProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessInit createProcessInit()
  {
    ProcessInitImpl processInit = new ProcessInitImpl();
    return processInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set createSet()
  {
    SetImpl set = new SetImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerDSL createSchedulerDSL()
  {
    SchedulerDSLImpl schedulerDSL = new SchedulerDSLImpl();
    return schedulerDSL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefCore createDefCore()
  {
    DefCoreImpl defCore = new DefCoreImpl();
    return defCore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RTCTL createRTCTL()
  {
    RTCTLImpl rtctl = new RTCTLImpl();
    return rtctl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LTE createLTE()
  {
    LTEImpl lte = new LTEImpl();
    return lte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CTL_AT createCTL_AT()
  {
    CTL_ATImpl ctL_AT = new CTL_ATImpl();
    return ctL_AT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Verify createVerify()
  {
    VerifyImpl verify = new VerifyImpl();
    return verify;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrderingDef createOrderingDef()
  {
    OrderingDefImpl orderingDef = new OrderingDefImpl();
    return orderingDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompVarDef createCompVarDef()
  {
    CompVarDefImpl compVarDef = new CompVarDefImpl();
    return compVarDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompVarDefination createCompVarDefination()
  {
    CompVarDefinationImpl compVarDefination = new CompVarDefinationImpl();
    return compVarDefination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CompVarName createCompVarName()
  {
    CompVarNameImpl compVarName = new CompVarNameImpl();
    return compVarName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparationDef createComparationDef()
  {
    ComparationDefImpl comparationDef = new ComparationDefImpl();
    return comparationDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparationName createComparationName()
  {
    ComparationNameImpl comparationName = new ComparationNameImpl();
    return comparationName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerDef createSchedulerDef()
  {
    SchedulerDefImpl schedulerDef = new SchedulerDefImpl();
    return schedulerDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerInit createSchedulerInit()
  {
    SchedulerInitImpl schedulerInit = new SchedulerInitImpl();
    return schedulerInit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfDef createIfDef()
  {
    IfDefImpl ifDef = new IfDefImpl();
    return ifDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceDef createInterfaceDef()
  {
    InterfaceDefImpl interfaceDef = new InterfaceDefImpl();
    return interfaceDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceFunction createInterfaceFunction()
  {
    InterfaceFunctionImpl interfaceFunction = new InterfaceFunctionImpl();
    return interfaceFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceParameterList createInterfaceParameterList()
  {
    InterfaceParameterListImpl interfaceParameterList = new InterfaceParameterListImpl();
    return interfaceParameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceParameterDeclare createInterfaceParameterDeclare()
  {
    InterfaceParameterDeclareImpl interfaceParameterDeclare = new InterfaceParameterDeclareImpl();
    return interfaceParameterDeclare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDef createVarDef()
  {
    VarDefImpl varDef = new VarDefImpl();
    return varDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDecl createVarDecl()
  {
    VarDeclImpl varDecl = new VarDeclImpl();
    return varDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarBlockDef createVarBlockDef()
  {
    VarBlockDefImpl varBlockDef = new VarBlockDefImpl();
    return varBlockDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarSingleDef createVarSingleDef()
  {
    VarSingleDefImpl varSingleDef = new VarSingleDefImpl();
    return varSingleDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarDefinition createVarDefinition()
  {
    VarDefinitionImpl varDefinition = new VarDefinitionImpl();
    return varDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarName createVarName()
  {
    VarNameImpl varName = new VarNameImpl();
    return varName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerDataDef createSchedulerDataDef()
  {
    SchedulerDataDefImpl schedulerDataDef = new SchedulerDataDefImpl();
    return schedulerDataDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataDef createDataDef()
  {
    DataDefImpl dataDef = new DataDefImpl();
    return dataDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataBlockDef createDataBlockDef()
  {
    DataBlockDefImpl dataBlockDef = new DataBlockDefImpl();
    return dataBlockDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataSingleDef createDataSingleDef()
  {
    DataSingleDefImpl dataSingleDef = new DataSingleDefImpl();
    return dataSingleDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerPropertyDef createSchedulerPropertyDef()
  {
    SchedulerPropertyDefImpl schedulerPropertyDef = new SchedulerPropertyDefImpl();
    return schedulerPropertyDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerPropertyName createSchedulerPropertyName()
  {
    SchedulerPropertyNameImpl schedulerPropertyName = new SchedulerPropertyNameImpl();
    return schedulerPropertyName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerCollectionDef createSchedulerCollectionDef()
  {
    SchedulerCollectionDefImpl schedulerCollectionDef = new SchedulerCollectionDefImpl();
    return schedulerCollectionDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SchedulerSet createSchedulerSet()
  {
    SchedulerSetImpl schedulerSet = new SchedulerSetImpl();
    return schedulerSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generate createGenerate()
  {
    GenerateImpl generate = new GenerateImpl();
    return generate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenConfiguration createGenConfiguration()
  {
    GenConfigurationImpl genConfiguration = new GenConfigurationImpl();
    return genConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenerateOption createGenerateOption()
  {
    GenerateOptionImpl generateOption = new GenerateOptionImpl();
    return generateOption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directory createDirectory()
  {
    DirectoryImpl directory = new DirectoryImpl();
    return directory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FileName createFileName()
  {
    FileNameImpl fileName = new FileNameImpl();
    return fileName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FileExtension createFileExtension()
  {
    FileExtensionImpl fileExtension = new FileExtensionImpl();
    return fileExtension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestPart createTestPart()
  {
    TestPartImpl testPart = new TestPartImpl();
    return testPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenPart createGenPart()
  {
    GenPartImpl genPart = new GenPartImpl();
    return genPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenComponent createGenComponent()
  {
    GenComponentImpl genComponent = new GenComponentImpl();
    return genComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessGeneration createProcessGeneration()
  {
    ProcessGenerationImpl processGeneration = new ProcessGenerationImpl();
    return processGeneration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StepGeneration createStepGeneration()
  {
    StepGenerationImpl stepGeneration = new StepGenerationImpl();
    return stepGeneration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Template createTemplate()
  {
    TemplateImpl template = new TemplateImpl();
    return template;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetTemplate createSetTemplate()
  {
    SetTemplateImpl setTemplate = new SetTemplateImpl();
    return setTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Behavior createBehavior()
  {
    BehaviorImpl behavior = new BehaviorImpl();
    return behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventTemplate createEventTemplate()
  {
    EventTemplateImpl eventTemplate = new EventTemplateImpl();
    return eventTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ND_Behavior createND_Behavior()
  {
    ND_BehaviorImpl nD_Behavior = new ND_BehaviorImpl();
    return nD_Behavior;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HandlerDef createHandlerDef()
  {
    HandlerDefImpl handlerDef = new HandlerDefImpl();
    return handlerDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventDef createEventDef()
  {
    EventDefImpl eventDef = new EventDefImpl();
    return eventDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventOpt createEventOpt()
  {
    EventOptImpl eventOpt = new EventOptImpl();
    return eventOpt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Opt createOpt()
  {
    OptImpl opt = new OptImpl();
    return opt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventStm createEventStm()
  {
    EventStmImpl eventStm = new EventStmImpl();
    return eventStm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Stm createStm()
  {
    StmImpl stm = new StmImpl();
    return stm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JavaCode createJavaCode()
  {
    JavaCodeImpl javaCode = new JavaCodeImpl();
    return javaCode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclareProcess createDeclareProcess()
  {
    DeclareProcessImpl declareProcess = new DeclareProcessImpl();
    return declareProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetProcess createSetProcess()
  {
    SetProcessImpl setProcess = new SetProcessImpl();
    return setProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetExecTime createSetExecTime()
  {
    SetExecTimeImpl setExecTime = new SetExecTimeImpl();
    return setExecTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetReturnCol createSetReturnCol()
  {
    SetReturnColImpl setReturnCol = new SetReturnColImpl();
    return setReturnCol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetReturnSet createSetReturnSet()
  {
    SetReturnSetImpl setReturnSet = new SetReturnSetImpl();
    return setReturnSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckPoint createCheckPoint()
  {
    CheckPointImpl checkPoint = new CheckPointImpl();
    return checkPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PointID createPointID()
  {
    PointIDImpl pointID = new PointIDImpl();
    return pointID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CallFunction createCallFunction()
  {
    CallFunctionImpl callFunction = new CallFunctionImpl();
    return callFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RemoveProcess createRemoveProcess()
  {
    RemoveProcessImpl removeProcess = new RemoveProcessImpl();
    return removeProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveProcess createMoveProcess()
  {
    MoveProcessImpl moveProcess = new MoveProcessImpl();
    return moveProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReorderProcess createReorderProcess()
  {
    ReorderProcessImpl reorderProcess = new ReorderProcessImpl();
    return reorderProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetProcessInstance createSetProcessInstance()
  {
    SetProcessInstanceImpl setProcessInstance = new SetProcessInstanceImpl();
    return setProcessInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopProcess createLoopProcess()
  {
    LoopProcessImpl loopProcess = new LoopProcessImpl();
    return loopProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeAction createChangeAction()
  {
    ChangeActionImpl changeAction = new ChangeActionImpl();
    return changeAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetProcess createGetProcess()
  {
    GetProcessImpl getProcess = new GetProcessImpl();
    return getProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExecuteProcess createExecuteProcess()
  {
    ExecuteProcessImpl executeProcess = new ExecuteProcessImpl();
    return executeProcess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStatement createBlockStatement()
  {
    BlockStatementImpl blockStatement = new BlockStatementImpl();
    return blockStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewProcessStatement createNewProcessStatement()
  {
    NewProcessStatementImpl newProcessStatement = new NewProcessStatementImpl();
    return newProcessStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewElement createNewElement()
  {
    NewElementImpl newElement = new NewElementImpl();
    return newElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParaValue createParaValue()
  {
    ParaValueImpl paraValue = new ParaValueImpl();
    return paraValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AssertStatement createAssertStatement()
  {
    AssertStatementImpl assertStatement = new AssertStatementImpl();
    return assertStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintStatement createPrintStatement()
  {
    PrintStatementImpl printStatement = new PrintStatementImpl();
    return printStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintLogStatement createPrintLogStatement()
  {
    PrintLogStatementImpl printLogStatement = new PrintLogStatementImpl();
    return printLogStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenCodeStatement createGenCodeStatement()
  {
    GenCodeStatementImpl genCodeStatement = new GenCodeStatementImpl();
    return genCodeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenLnCodeStatement createGenLnCodeStatement()
  {
    GenLnCodeStatementImpl genLnCodeStatement = new GenLnCodeStatementImpl();
    return genLnCodeStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeValue createChangeValue()
  {
    ChangeValueImpl changeValue = new ChangeValueImpl();
    return changeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeValueUnOp createChangeValueUnOp()
  {
    ChangeValueUnOpImpl changeValueUnOp = new ChangeValueUnOpImpl();
    return changeValueUnOp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeValueExpression createChangeValueExpression()
  {
    ChangeValueExpressionImpl changeValueExpression = new ChangeValueExpressionImpl();
    return changeValueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeListValue createChangeListValue()
  {
    ChangeListValueImpl changeListValue = new ChangeListValueImpl();
    return changeListValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetIDExpression createGetIDExpression()
  {
    GetIDExpressionImpl getIDExpression = new GetIDExpressionImpl();
    return getIDExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EmptyExpression createEmptyExpression()
  {
    EmptyExpressionImpl emptyExpression = new EmptyExpressionImpl();
    return emptyExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FullExpression createFullExpression()
  {
    FullExpressionImpl fullExpression = new FullExpressionImpl();
    return fullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InExpression createInExpression()
  {
    InExpressionImpl inExpression = new InExpressionImpl();
    return inExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InPIDExpression createInPIDExpression()
  {
    InPIDExpressionImpl inPIDExpression = new InPIDExpressionImpl();
    return inPIDExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InPExpression createInPExpression()
  {
    InPExpressionImpl inPExpression = new InPExpressionImpl();
    return inPExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistExpression createExistExpression()
  {
    ExistExpressionImpl existExpression = new ExistExpressionImpl();
    return existExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistPID createExistPID()
  {
    ExistPIDImpl existPID = new ExistPIDImpl();
    return existPID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExistP createExistP()
  {
    ExistPImpl existP = new ExistPImpl();
    return existP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NullExpression createNullExpression()
  {
    NullExpressionImpl nullExpression = new NullExpressionImpl();
    return nullExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HasNameExpression createHasNameExpression()
  {
    HasNameExpressionImpl hasNameExpression = new HasNameExpressionImpl();
    return hasNameExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HasID createHasID()
  {
    HasIDImpl hasID = new HasIDImpl();
    return hasID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HasIDINT createHasIDINT()
  {
    HasIDINTImpl hasIDINT = new HasIDINTImpl();
    return hasIDINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetName createGetName()
  {
    GetNameImpl getName = new GetNameImpl();
    return getName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Atomic createAtomic()
  {
    AtomicImpl atomic = new AtomicImpl();
    return atomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SysVar createSysVar()
  {
    SysVarImpl sysVar = new SysVarImpl();
    return sysVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualifiedNames createQualifiedNames()
  {
    QualifiedNamesImpl qualifiedNames = new QualifiedNamesImpl();
    return qualifiedNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Proper createProper()
  {
    ProperImpl proper = new ProperImpl();
    return proper;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListElement createListElement()
  {
    ListElementImpl listElement = new ListElementImpl();
    return listElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariatnts createInvariatnts()
  {
    InvariatntsImpl invariatnts = new InvariatntsImpl();
    return invariatnts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOrDiv createMulOrDiv()
  {
    MulOrDivImpl mulOrDiv = new MulOrDivImpl();
    return mulOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Implies createImplies()
  {
    ImpliesImpl implies = new ImpliesImpl();
    return implies;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CurentCore createCurentCore()
  {
    CurentCoreImpl curentCore = new CurentCoreImpl();
    return curentCore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateID createStateID()
  {
    StateIDImpl stateID = new StateIDImpl();
    return stateID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BranchID createBranchID()
  {
    BranchIDImpl branchID = new BranchIDImpl();
    return branchID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Step createStep()
  {
    StepImpl step = new StepImpl();
    return step;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TotalStep createTotalStep()
  {
    TotalStepImpl totalStep = new TotalStepImpl();
    return totalStep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetInstance createGetInstance()
  {
    GetInstanceImpl getInstance = new GetInstanceImpl();
    return getInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GetPID createGetPID()
  {
    GetPIDImpl getPID = new GetPIDImpl();
    return getPID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InstanceID createInstanceID()
  {
    InstanceIDImpl instanceID = new InstanceIDImpl();
    return instanceID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessID createProcessID()
  {
    ProcessIDImpl processID = new ProcessIDImpl();
    return processID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProcessName createProcessName()
  {
    ProcessNameImpl processName = new ProcessNameImpl();
    return processName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contains createContains()
  {
    ContainsImpl contains = new ContainsImpl();
    return contains;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeName createTypeNameFromString(EDataType eDataType, String initialValue)
  {
    TypeName result = TypeName.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeNameToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public scheduling.dsl.String createStringFromString(EDataType eDataType, String initialValue)
  {
    scheduling.dsl.String result = scheduling.dsl.String.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStringToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OrderType createOrderTypeFromString(EDataType eDataType, String initialValue)
  {
    OrderType result = OrderType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOrderTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DslPackage getDslPackage()
  {
    return (DslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DslPackage getPackage()
  {
    return DslPackage.eINSTANCE;
  }

} //DslFactoryImpl
