/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import java.lang.String;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import scheduling.dsl.Directory;
import scheduling.dsl.DslPackage;
import scheduling.dsl.FileExtension;
import scheduling.dsl.FileName;
import scheduling.dsl.GenConfiguration;
import scheduling.dsl.GenerateOption;
import scheduling.dsl.TestPart;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Configuration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getGenerateoption <em>Generateoption</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getDirectory <em>Directory</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getFilename <em>Filename</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getFileextension <em>Fileextension</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getTest <em>Test</em>}</li>
 *   <li>{@link scheduling.dsl.impl.GenConfigurationImpl#getTestpart <em>Testpart</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GenConfigurationImpl extends MinimalEObjectImpl.Container implements GenConfiguration
{
  /**
   * The cached value of the '{@link #getGenerateoption() <em>Generateoption</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGenerateoption()
   * @generated
   * @ordered
   */
  protected GenerateOption generateoption;

  /**
   * The cached value of the '{@link #getDirectory() <em>Directory</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirectory()
   * @generated
   * @ordered
   */
  protected Directory directory;

  /**
   * The cached value of the '{@link #getFilename() <em>Filename</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFilename()
   * @generated
   * @ordered
   */
  protected FileName filename;

  /**
   * The cached value of the '{@link #getFileextension() <em>Fileextension</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFileextension()
   * @generated
   * @ordered
   */
  protected FileExtension fileextension;

  /**
   * The default value of the '{@link #getTest() <em>Test</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected static final String TEST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected String test = TEST_EDEFAULT;

  /**
   * The cached value of the '{@link #getTestpart() <em>Testpart</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestpart()
   * @generated
   * @ordered
   */
  protected TestPart testpart;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GenConfigurationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getGenConfiguration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenerateOption getGenerateoption()
  {
    return generateoption;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGenerateoption(GenerateOption newGenerateoption, NotificationChain msgs)
  {
    GenerateOption oldGenerateoption = generateoption;
    generateoption = newGenerateoption;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__GENERATEOPTION, oldGenerateoption, newGenerateoption);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGenerateoption(GenerateOption newGenerateoption)
  {
    if (newGenerateoption != generateoption)
    {
      NotificationChain msgs = null;
      if (generateoption != null)
        msgs = ((InternalEObject)generateoption).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__GENERATEOPTION, null, msgs);
      if (newGenerateoption != null)
        msgs = ((InternalEObject)newGenerateoption).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__GENERATEOPTION, null, msgs);
      msgs = basicSetGenerateoption(newGenerateoption, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__GENERATEOPTION, newGenerateoption, newGenerateoption));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Directory getDirectory()
  {
    return directory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDirectory(Directory newDirectory, NotificationChain msgs)
  {
    Directory oldDirectory = directory;
    directory = newDirectory;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__DIRECTORY, oldDirectory, newDirectory);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirectory(Directory newDirectory)
  {
    if (newDirectory != directory)
    {
      NotificationChain msgs = null;
      if (directory != null)
        msgs = ((InternalEObject)directory).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__DIRECTORY, null, msgs);
      if (newDirectory != null)
        msgs = ((InternalEObject)newDirectory).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__DIRECTORY, null, msgs);
      msgs = basicSetDirectory(newDirectory, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__DIRECTORY, newDirectory, newDirectory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FileName getFilename()
  {
    return filename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFilename(FileName newFilename, NotificationChain msgs)
  {
    FileName oldFilename = filename;
    filename = newFilename;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__FILENAME, oldFilename, newFilename);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFilename(FileName newFilename)
  {
    if (newFilename != filename)
    {
      NotificationChain msgs = null;
      if (filename != null)
        msgs = ((InternalEObject)filename).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__FILENAME, null, msgs);
      if (newFilename != null)
        msgs = ((InternalEObject)newFilename).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__FILENAME, null, msgs);
      msgs = basicSetFilename(newFilename, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__FILENAME, newFilename, newFilename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FileExtension getFileextension()
  {
    return fileextension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFileextension(FileExtension newFileextension, NotificationChain msgs)
  {
    FileExtension oldFileextension = fileextension;
    fileextension = newFileextension;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__FILEEXTENSION, oldFileextension, newFileextension);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFileextension(FileExtension newFileextension)
  {
    if (newFileextension != fileextension)
    {
      NotificationChain msgs = null;
      if (fileextension != null)
        msgs = ((InternalEObject)fileextension).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__FILEEXTENSION, null, msgs);
      if (newFileextension != null)
        msgs = ((InternalEObject)newFileextension).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__FILEEXTENSION, null, msgs);
      msgs = basicSetFileextension(newFileextension, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__FILEEXTENSION, newFileextension, newFileextension));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTest()
  {
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTest(String newTest)
  {
    String oldTest = test;
    test = newTest;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__TEST, oldTest, test));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TestPart getTestpart()
  {
    return testpart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTestpart(TestPart newTestpart, NotificationChain msgs)
  {
    TestPart oldTestpart = testpart;
    testpart = newTestpart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__TESTPART, oldTestpart, newTestpart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTestpart(TestPart newTestpart)
  {
    if (newTestpart != testpart)
    {
      NotificationChain msgs = null;
      if (testpart != null)
        msgs = ((InternalEObject)testpart).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__TESTPART, null, msgs);
      if (newTestpart != null)
        msgs = ((InternalEObject)newTestpart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.GEN_CONFIGURATION__TESTPART, null, msgs);
      msgs = basicSetTestpart(newTestpart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.GEN_CONFIGURATION__TESTPART, newTestpart, newTestpart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.GEN_CONFIGURATION__GENERATEOPTION:
        return basicSetGenerateoption(null, msgs);
      case DslPackage.GEN_CONFIGURATION__DIRECTORY:
        return basicSetDirectory(null, msgs);
      case DslPackage.GEN_CONFIGURATION__FILENAME:
        return basicSetFilename(null, msgs);
      case DslPackage.GEN_CONFIGURATION__FILEEXTENSION:
        return basicSetFileextension(null, msgs);
      case DslPackage.GEN_CONFIGURATION__TESTPART:
        return basicSetTestpart(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.GEN_CONFIGURATION__GENERATEOPTION:
        return getGenerateoption();
      case DslPackage.GEN_CONFIGURATION__DIRECTORY:
        return getDirectory();
      case DslPackage.GEN_CONFIGURATION__FILENAME:
        return getFilename();
      case DslPackage.GEN_CONFIGURATION__FILEEXTENSION:
        return getFileextension();
      case DslPackage.GEN_CONFIGURATION__TEST:
        return getTest();
      case DslPackage.GEN_CONFIGURATION__TESTPART:
        return getTestpart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.GEN_CONFIGURATION__GENERATEOPTION:
        setGenerateoption((GenerateOption)newValue);
        return;
      case DslPackage.GEN_CONFIGURATION__DIRECTORY:
        setDirectory((Directory)newValue);
        return;
      case DslPackage.GEN_CONFIGURATION__FILENAME:
        setFilename((FileName)newValue);
        return;
      case DslPackage.GEN_CONFIGURATION__FILEEXTENSION:
        setFileextension((FileExtension)newValue);
        return;
      case DslPackage.GEN_CONFIGURATION__TEST:
        setTest((String)newValue);
        return;
      case DslPackage.GEN_CONFIGURATION__TESTPART:
        setTestpart((TestPart)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.GEN_CONFIGURATION__GENERATEOPTION:
        setGenerateoption((GenerateOption)null);
        return;
      case DslPackage.GEN_CONFIGURATION__DIRECTORY:
        setDirectory((Directory)null);
        return;
      case DslPackage.GEN_CONFIGURATION__FILENAME:
        setFilename((FileName)null);
        return;
      case DslPackage.GEN_CONFIGURATION__FILEEXTENSION:
        setFileextension((FileExtension)null);
        return;
      case DslPackage.GEN_CONFIGURATION__TEST:
        setTest(TEST_EDEFAULT);
        return;
      case DslPackage.GEN_CONFIGURATION__TESTPART:
        setTestpart((TestPart)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.GEN_CONFIGURATION__GENERATEOPTION:
        return generateoption != null;
      case DslPackage.GEN_CONFIGURATION__DIRECTORY:
        return directory != null;
      case DslPackage.GEN_CONFIGURATION__FILENAME:
        return filename != null;
      case DslPackage.GEN_CONFIGURATION__FILEEXTENSION:
        return fileextension != null;
      case DslPackage.GEN_CONFIGURATION__TEST:
        return TEST_EDEFAULT == null ? test != null : !TEST_EDEFAULT.equals(test);
      case DslPackage.GEN_CONFIGURATION__TESTPART:
        return testpart != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (test: ");
    result.append(test);
    result.append(')');
    return result.toString();
  }

} //GenConfigurationImpl
