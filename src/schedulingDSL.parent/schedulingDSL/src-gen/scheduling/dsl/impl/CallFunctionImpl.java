/**
 * generated by Xtext 2.10.0
 */
package scheduling.dsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import scheduling.dsl.CallFunction;
import scheduling.dsl.DslPackage;
import scheduling.dsl.FunctionName;
import scheduling.dsl.InterfaceParameterList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Call Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link scheduling.dsl.impl.CallFunctionImpl#getFuncName <em>Func Name</em>}</li>
 *   <li>{@link scheduling.dsl.impl.CallFunctionImpl#getProcess <em>Process</em>}</li>
 *   <li>{@link scheduling.dsl.impl.CallFunctionImpl#getParameterlist <em>Parameterlist</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CallFunctionImpl extends StatementImpl implements CallFunction
{
  /**
   * The cached value of the '{@link #getFuncName() <em>Func Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFuncName()
   * @generated
   * @ordered
   */
  protected FunctionName funcName;

  /**
   * The cached value of the '{@link #getProcess() <em>Process</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcess()
   * @generated
   * @ordered
   */
  protected scheduling.dsl.Process process;

  /**
   * The cached value of the '{@link #getParameterlist() <em>Parameterlist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterlist()
   * @generated
   * @ordered
   */
  protected InterfaceParameterList parameterlist;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CallFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.eINSTANCE.getCallFunction();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionName getFuncName()
  {
    return funcName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFuncName(FunctionName newFuncName, NotificationChain msgs)
  {
    FunctionName oldFuncName = funcName;
    funcName = newFuncName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__FUNC_NAME, oldFuncName, newFuncName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFuncName(FunctionName newFuncName)
  {
    if (newFuncName != funcName)
    {
      NotificationChain msgs = null;
      if (funcName != null)
        msgs = ((InternalEObject)funcName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__FUNC_NAME, null, msgs);
      if (newFuncName != null)
        msgs = ((InternalEObject)newFuncName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__FUNC_NAME, null, msgs);
      msgs = basicSetFuncName(newFuncName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__FUNC_NAME, newFuncName, newFuncName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public scheduling.dsl.Process getProcess()
  {
    return process;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcess(scheduling.dsl.Process newProcess, NotificationChain msgs)
  {
    scheduling.dsl.Process oldProcess = process;
    process = newProcess;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__PROCESS, oldProcess, newProcess);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProcess(scheduling.dsl.Process newProcess)
  {
    if (newProcess != process)
    {
      NotificationChain msgs = null;
      if (process != null)
        msgs = ((InternalEObject)process).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__PROCESS, null, msgs);
      if (newProcess != null)
        msgs = ((InternalEObject)newProcess).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__PROCESS, null, msgs);
      msgs = basicSetProcess(newProcess, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__PROCESS, newProcess, newProcess));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceParameterList getParameterlist()
  {
    return parameterlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParameterlist(InterfaceParameterList newParameterlist, NotificationChain msgs)
  {
    InterfaceParameterList oldParameterlist = parameterlist;
    parameterlist = newParameterlist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__PARAMETERLIST, oldParameterlist, newParameterlist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParameterlist(InterfaceParameterList newParameterlist)
  {
    if (newParameterlist != parameterlist)
    {
      NotificationChain msgs = null;
      if (parameterlist != null)
        msgs = ((InternalEObject)parameterlist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__PARAMETERLIST, null, msgs);
      if (newParameterlist != null)
        msgs = ((InternalEObject)newParameterlist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.CALL_FUNCTION__PARAMETERLIST, null, msgs);
      msgs = basicSetParameterlist(newParameterlist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.CALL_FUNCTION__PARAMETERLIST, newParameterlist, newParameterlist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.CALL_FUNCTION__FUNC_NAME:
        return basicSetFuncName(null, msgs);
      case DslPackage.CALL_FUNCTION__PROCESS:
        return basicSetProcess(null, msgs);
      case DslPackage.CALL_FUNCTION__PARAMETERLIST:
        return basicSetParameterlist(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.CALL_FUNCTION__FUNC_NAME:
        return getFuncName();
      case DslPackage.CALL_FUNCTION__PROCESS:
        return getProcess();
      case DslPackage.CALL_FUNCTION__PARAMETERLIST:
        return getParameterlist();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.CALL_FUNCTION__FUNC_NAME:
        setFuncName((FunctionName)newValue);
        return;
      case DslPackage.CALL_FUNCTION__PROCESS:
        setProcess((scheduling.dsl.Process)newValue);
        return;
      case DslPackage.CALL_FUNCTION__PARAMETERLIST:
        setParameterlist((InterfaceParameterList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CALL_FUNCTION__FUNC_NAME:
        setFuncName((FunctionName)null);
        return;
      case DslPackage.CALL_FUNCTION__PROCESS:
        setProcess((scheduling.dsl.Process)null);
        return;
      case DslPackage.CALL_FUNCTION__PARAMETERLIST:
        setParameterlist((InterfaceParameterList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.CALL_FUNCTION__FUNC_NAME:
        return funcName != null;
      case DslPackage.CALL_FUNCTION__PROCESS:
        return process != null;
      case DslPackage.CALL_FUNCTION__PARAMETERLIST:
        return parameterlist != null;
    }
    return super.eIsSet(featureID);
  }

} //CallFunctionImpl
