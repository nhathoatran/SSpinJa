/*
 * generated by Xtext 2.10.0
 */
package scheduling.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGenAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGenGenDSLParserRuleCall_0_0 = (RuleCall)cGenAssignment_0.eContents().get(0);
		private final Assignment cProcessconfigAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProcessconfigProcessConfigurationParserRuleCall_1_0 = (RuleCall)cProcessconfigAssignment_1.eContents().get(0);
		private final Assignment cProcAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cProcProcessDSLParserRuleCall_2_0 = (RuleCall)cProcAssignment_2.eContents().get(0);
		private final Assignment cSchAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSchSchedulerDSLParserRuleCall_3_0 = (RuleCall)cSchAssignment_3.eContents().get(0);
		private final Assignment cTestAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTestTestDSLParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		
		//Model:
		//	gen=GenDSL | processconfig=ProcessConfiguration | proc=ProcessDSL | sch=SchedulerDSL | test=TestDSL;
		@Override public ParserRule getRule() { return rule; }
		
		//gen=GenDSL | processconfig=ProcessConfiguration | proc=ProcessDSL | sch=SchedulerDSL | test=TestDSL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gen=GenDSL
		public Assignment getGenAssignment_0() { return cGenAssignment_0; }
		
		//GenDSL
		public RuleCall getGenGenDSLParserRuleCall_0_0() { return cGenGenDSLParserRuleCall_0_0; }
		
		//processconfig=ProcessConfiguration
		public Assignment getProcessconfigAssignment_1() { return cProcessconfigAssignment_1; }
		
		//ProcessConfiguration
		public RuleCall getProcessconfigProcessConfigurationParserRuleCall_1_0() { return cProcessconfigProcessConfigurationParserRuleCall_1_0; }
		
		//proc=ProcessDSL
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }
		
		//ProcessDSL
		public RuleCall getProcProcessDSLParserRuleCall_2_0() { return cProcProcessDSLParserRuleCall_2_0; }
		
		//sch=SchedulerDSL
		public Assignment getSchAssignment_3() { return cSchAssignment_3; }
		
		//SchedulerDSL
		public RuleCall getSchSchedulerDSLParserRuleCall_3_0() { return cSchSchedulerDSLParserRuleCall_3_0; }
		
		//test=TestDSL
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }
		
		//TestDSL
		public RuleCall getTestTestDSLParserRuleCall_4_0() { return cTestTestDSLParserRuleCall_4_0; }
	}
	public class GenDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGenGenerateParserRuleCall_0_0 = (RuleCall)cGenAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionInterfaceDefParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cIsrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsrISRParserRuleCall_2_0 = (RuleCall)cIsrAssignment_2.eContents().get(0);
		
		////| spec = Specification;
		//GenDSL:
		//	gen=Generate
		//	function=InterfaceDef?
		//	isr=ISR;
		@Override public ParserRule getRule() { return rule; }
		
		//gen=Generate function=InterfaceDef? isr=ISR
		public Group getGroup() { return cGroup; }
		
		//gen=Generate
		public Assignment getGenAssignment_0() { return cGenAssignment_0; }
		
		//Generate
		public RuleCall getGenGenerateParserRuleCall_0_0() { return cGenGenerateParserRuleCall_0_0; }
		
		//function=InterfaceDef?
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//InterfaceDef
		public RuleCall getFunctionInterfaceDefParserRuleCall_1_0() { return cFunctionInterfaceDefParserRuleCall_1_0; }
		
		//isr=ISR
		public Assignment getIsrAssignment_2() { return cIsrAssignment_2; }
		
		//ISR
		public RuleCall getIsrISRParserRuleCall_2_0() { return cIsrISRParserRuleCall_2_0; }
	}
	public class ISRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ISR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cISRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartINTTerminalRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndINTTerminalRuleCall_6_0 = (RuleCall)cEndAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLimitedKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cMaxAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_8_1_0 = (RuleCall)cMaxAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ISR:
		//	'ISR' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'ISR' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';'
		public Group getGroup() { return cGroup; }
		
		//'ISR'
		public Keyword getISRKeyword_0() { return cISRKeyword_0; }
		
		//element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//start=INT
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_4_0() { return cStartINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//end=INT
		public Assignment getEndAssignment_6() { return cEndAssignment_6; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_6_0() { return cEndINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('limited' max=INT)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'limited'
		public Keyword getLimitedKeyword_8_0() { return cLimitedKeyword_8_0; }
		
		//max=INT
		public Assignment getMaxAssignment_8_1() { return cMaxAssignment_8_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_8_1_0() { return cMaxINTTerminalRuleCall_8_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class TestDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.TestDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationAssignment_2.eContents().get(0);
		private final Assignment cConfigsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigsConfigsParserRuleCall_3_0 = (RuleCall)cConfigsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cScenariosAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cScenariosScenariosParserRuleCall_4_0_0 = (RuleCall)cScenariosAssignment_4_0.eContents().get(0);
		private final Assignment cPermutationAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPermutationPermutationParserRuleCall_4_1_0 = (RuleCall)cPermutationAssignment_4_1.eContents().get(0);
		private final Assignment cRuleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRuleRulesParserRuleCall_5_0 = (RuleCall)cRuleAssignment_5.eContents().get(0);
		private final Assignment cVerifyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVerifyVerifyParserRuleCall_6_0 = (RuleCall)cVerifyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TestDSL:
		//	'system' '{'
		//	specification=Specification
		//	configs=Configs? (scenarios=Scenarios | permutation=Permutation) rule=Rules?
		//	verify=Verify?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' '{' specification=Specification configs=Configs? (scenarios=Scenarios | permutation=Permutation) rule=Rules?
		//verify=Verify? '}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//specification=Specification
		public Assignment getSpecificationAssignment_2() { return cSpecificationAssignment_2; }
		
		//Specification
		public RuleCall getSpecificationSpecificationParserRuleCall_2_0() { return cSpecificationSpecificationParserRuleCall_2_0; }
		
		//configs=Configs?
		public Assignment getConfigsAssignment_3() { return cConfigsAssignment_3; }
		
		//Configs
		public RuleCall getConfigsConfigsParserRuleCall_3_0() { return cConfigsConfigsParserRuleCall_3_0; }
		
		//(scenarios=Scenarios | permutation=Permutation)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//scenarios=Scenarios
		public Assignment getScenariosAssignment_4_0() { return cScenariosAssignment_4_0; }
		
		//Scenarios
		public RuleCall getScenariosScenariosParserRuleCall_4_0_0() { return cScenariosScenariosParserRuleCall_4_0_0; }
		
		//permutation=Permutation
		public Assignment getPermutationAssignment_4_1() { return cPermutationAssignment_4_1; }
		
		//Permutation
		public RuleCall getPermutationPermutationParserRuleCall_4_1_0() { return cPermutationPermutationParserRuleCall_4_1_0; }
		
		//rule=Rules?
		public Assignment getRuleAssignment_5() { return cRuleAssignment_5; }
		
		//Rules
		public RuleCall getRuleRulesParserRuleCall_5_0() { return cRuleRulesParserRuleCall_5_0; }
		
		//verify=Verify?
		public Assignment getVerifyAssignment_6() { return cVerifyAssignment_6; }
		
		//Verify
		public RuleCall getVerifyVerifyParserRuleCall_6_0() { return cVerifyVerifyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConfigsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Configs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConfigAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConfigConfigParserRuleCall_3_0 = (RuleCall)cConfigAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////---------------------------------------------------------------------------------
		//Configs:
		//	{Configs}
		//	'configuration' '{'
		//	config+=Config*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Configs} 'configuration' '{' config+=Config* '}'
		public Group getGroup() { return cGroup; }
		
		//{Configs}
		public Action getConfigsAction_0() { return cConfigsAction_0; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//config+=Config*
		public Assignment getConfigAssignment_3() { return cConfigAssignment_3; }
		
		//Config
		public RuleCall getConfigConfigParserRuleCall_3_0() { return cConfigConfigParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConfigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfigConfigurationParserRuleCall_1_0 = (RuleCall)cConfigAssignment_1.eContents().get(0);
		
		//Config:
		//	name=ID config=Configuration;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID config=Configuration
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//config=Configuration
		public Assignment getConfigAssignment_1() { return cConfigAssignment_1; }
		
		//Configuration
		public RuleCall getConfigConfigurationParserRuleCall_1_0() { return cConfigConfigurationParserRuleCall_1_0; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarVarInitParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Assignment cCollectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollectionCollectionInitParserRuleCall_3_0 = (RuleCall)cCollectionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cProcAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cProcIDTerminalRuleCall_4_0_0 = (RuleCall)cProcAssignment_4_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Alternatives cAlternatives_4_2 = (Alternatives)cGroup_4.eContents().get(2);
		private final Assignment cNulAssignment_4_2_0 = (Assignment)cAlternatives_4_2.eContents().get(0);
		private final Keyword cNulNullKeyword_4_2_0_0 = (Keyword)cNulAssignment_4_2_0.eContents().get(0);
		private final Assignment cElementAssignment_4_2_1 = (Assignment)cAlternatives_4_2.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_4_2_1_0 = (RuleCall)cElementAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Configuration:
		//	{Configuration}
		//	'{'
		//	var+=VarInit*
		//	collection+=CollectionInit* (proc=ID '=' (nul='null' | element=Element) ';')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Configuration} '{' var+=VarInit* collection+=CollectionInit* (proc=ID '=' (nul='null' | element=Element) ';')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//var+=VarInit*
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//VarInit
		public RuleCall getVarVarInitParserRuleCall_2_0() { return cVarVarInitParserRuleCall_2_0; }
		
		//collection+=CollectionInit*
		public Assignment getCollectionAssignment_3() { return cCollectionAssignment_3; }
		
		//CollectionInit
		public RuleCall getCollectionCollectionInitParserRuleCall_3_0() { return cCollectionCollectionInitParserRuleCall_3_0; }
		
		//(proc=ID '=' (nul='null' | element=Element) ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//proc=ID
		public Assignment getProcAssignment_4_0() { return cProcAssignment_4_0; }
		
		//ID
		public RuleCall getProcIDTerminalRuleCall_4_0_0() { return cProcIDTerminalRuleCall_4_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//(nul='null' | element=Element)
		public Alternatives getAlternatives_4_2() { return cAlternatives_4_2; }
		
		//nul='null'
		public Assignment getNulAssignment_4_2_0() { return cNulAssignment_4_2_0; }
		
		//'null'
		public Keyword getNulNullKeyword_4_2_0_0() { return cNulNullKeyword_4_2_0_0; }
		
		//element=Element
		public Assignment getElementAssignment_4_2_1() { return cElementAssignment_4_2_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_4_2_1_0() { return cElementElementParserRuleCall_4_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class VarInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarNameIDTerminalRuleCall_0_0 = (RuleCall)cVarNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValValueParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarInit:
		//	varName=ID '=' val=Value ';';
		@Override public ParserRule getRule() { return rule; }
		
		//varName=ID '=' val=Value ';'
		public Group getGroup() { return cGroup; }
		
		//varName=ID
		public Assignment getVarNameAssignment_0() { return cVarNameAssignment_0; }
		
		//ID
		public RuleCall getVarNameIDTerminalRuleCall_0_0() { return cVarNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=Value
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//Value
		public RuleCall getValValueParserRuleCall_2_0() { return cValValueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class CollectionInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CollectionInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColNameSchedulerSetParserRuleCall_0_0 = (RuleCall)cColNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSetAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSetSetParserRuleCall_2_0_0 = (RuleCall)cSetAssignment_2_0.eContents().get(0);
		private final Assignment cEmptyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cEmptyEmptyKeyword_2_1_0 = (Keyword)cEmptyAssignment_2_1.eContents().get(0);
		private final Assignment cFullAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cFullFullKeyword_2_2_0 = (Keyword)cFullAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CollectionInit:
		//	colName=SchedulerSet '=' (set=Set | empty='empty' | full='full') ';';
		@Override public ParserRule getRule() { return rule; }
		
		////colName=[SchedulerSet|FQN] '=' (set=Set | empty='empty' | full = 'full') ';'
		//colName=SchedulerSet '=' (set=Set | empty='empty' | full='full') ';'
		public Group getGroup() { return cGroup; }
		
		////colName=[SchedulerSet|FQN] '=' (set=Set | empty='empty' | full = 'full') ';'
		//colName=SchedulerSet
		public Assignment getColNameAssignment_0() { return cColNameAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColNameSchedulerSetParserRuleCall_0_0() { return cColNameSchedulerSetParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//(set=Set | empty='empty' | full='full')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//set=Set
		public Assignment getSetAssignment_2_0() { return cSetAssignment_2_0; }
		
		//Set
		public RuleCall getSetSetParserRuleCall_2_0_0() { return cSetSetParserRuleCall_2_0_0; }
		
		//empty='empty'
		public Assignment getEmptyAssignment_2_1() { return cEmptyAssignment_2_1; }
		
		//'empty'
		public Keyword getEmptyEmptyKeyword_2_1_0() { return cEmptyEmptyKeyword_2_1_0; }
		
		//full='full'
		public Assignment getFullAssignment_2_2() { return cFullAssignment_2_2; }
		
		//'full'
		public Keyword getFullFullKeyword_2_2_0() { return cFullFullKeyword_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ScenariosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Scenarios");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScenariosAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlowFlowParserRuleCall_3_0 = (RuleCall)cFlowAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Scenarios:
		//	{Scenarios}
		//	'scenario' '{'
		//	flow+=Flow*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Scenarios} 'scenario' '{' flow+=Flow* '}'
		public Group getGroup() { return cGroup; }
		
		//{Scenarios}
		public Action getScenariosAction_0() { return cScenariosAction_0; }
		
		//'scenario'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//flow+=Flow*
		public Assignment getFlowAssignment_3() { return cFlowAssignment_3; }
		
		//Flow
		public RuleCall getFlowFlowParserRuleCall_3_0() { return cFlowFlowParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PermutationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Permutation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPermutationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStepKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStepAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepINTTerminalRuleCall_5_0 = (RuleCall)cStepAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Permutation:
		//	'scenario' 'permutation' 'with' 'step' '=' step=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' 'permutation' 'with' 'step' '=' step=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//'permutation'
		public Keyword getPermutationKeyword_1() { return cPermutationKeyword_1; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'step'
		public Keyword getStepKeyword_3() { return cStepKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//step=INT
		public Assignment getStepAssignment_5() { return cStepAssignment_5; }
		
		//INT
		public RuleCall getStepINTTerminalRuleCall_5_0() { return cStepINTTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventENAMEParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEventAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventENAMEParserRuleCall_1_1_0 = (RuleCall)cEventAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Flow:
		//	event+=ENAME ('->' event+=ENAME)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//event+=ENAME ('->' event+=ENAME)* ';'
		public Group getGroup() { return cGroup; }
		
		//event+=ENAME
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//ENAME
		public RuleCall getEventENAMEParserRuleCall_0_0() { return cEventENAMEParserRuleCall_0_0; }
		
		//('->' event+=ENAME)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//event+=ENAME
		public Assignment getEventAssignment_1_1() { return cEventAssignment_1_1; }
		
		//ENAME
		public RuleCall getEventENAMEParserRuleCall_1_1_0() { return cEventENAMEParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ENAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ENAME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElabelAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElabelELABELParserRuleCall_0_0 = (RuleCall)cElabelAssignment_0.eContents().get(0);
		private final Assignment cScheventnameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cScheventnameEventNameEnumRuleCall_1_0 = (RuleCall)cScheventnameAssignment_1.eContents().get(0);
		
		//ENAME:
		//	elabel=ELABEL | scheventname=EventName;
		@Override public ParserRule getRule() { return rule; }
		
		//elabel=ELABEL | scheventname=EventName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elabel=ELABEL
		public Assignment getElabelAssignment_0() { return cElabelAssignment_0; }
		
		//ELABEL
		public RuleCall getElabelELABELParserRuleCall_0_0() { return cElabelELABELParserRuleCall_0_0; }
		
		//scheventname=EventName
		public Assignment getScheventnameAssignment_1() { return cScheventnameAssignment_1; }
		
		//EventName
		public RuleCall getScheventnameEventNameEnumRuleCall_1_0() { return cScheventnameEventNameEnumRuleCall_1_0; }
	}
	public class RulesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Rules");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRulesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRRuleParserRuleCall_3_0 = (RuleCall)cRAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Rules:
		//	{Rules}
		//	'rule' '{'
		//	r+=Rule*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Rules} 'rule' '{' r+=Rule* '}'
		public Group getGroup() { return cGroup; }
		
		//{Rules}
		public Action getRulesAction_0() { return cRulesAction_0; }
		
		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//r+=Rule*
		public Assignment getRAssignment_3() { return cRAssignment_3; }
		
		//Rule
		public RuleCall getRRuleParserRuleCall_3_0() { return cRRuleParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRulenameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRulenameIDTerminalRuleCall_0_0 = (RuleCall)cRulenameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnameENAMEParserRuleCall_3_0 = (RuleCall)cEnameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPremiseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPremiseConditionParserRuleCall_4_1_0 = (RuleCall)cPremiseAssignment_4_1.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConcludeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConcludeConditionParserRuleCall_6_0 = (RuleCall)cConcludeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Rule:
		//	rulename=ID '{'
		//	'when' ename=ENAME ('where' premise=Condition)?
		//	'then' conclude=Condition
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//rulename=ID '{' 'when' ename=ENAME ('where' premise=Condition)? 'then' conclude=Condition '}'
		public Group getGroup() { return cGroup; }
		
		//rulename=ID
		public Assignment getRulenameAssignment_0() { return cRulenameAssignment_0; }
		
		//ID
		public RuleCall getRulenameIDTerminalRuleCall_0_0() { return cRulenameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'when'
		public Keyword getWhenKeyword_2() { return cWhenKeyword_2; }
		
		//ename=ENAME
		public Assignment getEnameAssignment_3() { return cEnameAssignment_3; }
		
		//ENAME
		public RuleCall getEnameENAMEParserRuleCall_3_0() { return cEnameENAMEParserRuleCall_3_0; }
		
		//('where' premise=Condition)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'where'
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }
		
		//premise=Condition
		public Assignment getPremiseAssignment_4_1() { return cPremiseAssignment_4_1; }
		
		//Condition
		public RuleCall getPremiseConditionParserRuleCall_4_1_0() { return cPremiseConditionParserRuleCall_4_1_0; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//conclude=Condition
		public Assignment getConcludeAssignment_6() { return cConcludeAssignment_6; }
		
		//Condition
		public RuleCall getConcludeConditionParserRuleCall_6_0() { return cConcludeConditionParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Condition");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//Condition:
		//	expr=Or;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Or
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//Or
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }
	}
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpecificationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDecl_lstAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecl_lstDeclareListParserRuleCall_3_0 = (RuleCall)cDecl_lstAssignment_3.eContents().get(0);
		private final Assignment cDefineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefineDefineParserRuleCall_4_0 = (RuleCall)cDefineAssignment_4.eContents().get(0);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEventDeclareEventParserRuleCall_5_0 = (RuleCall)cEventAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////-----------------------------------------------
		//Specification:
		//	{Specification}
		//	'specification' '{'
		//	//		decl_sch = DeclareSch ?
		//	decl_lst=DeclareList?
		//	define=Define?
		//	event+=DeclareEvent*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Specification} 'specification' '{' //		decl_sch = DeclareSch ?
		//decl_lst=DeclareList? define=Define? event+=DeclareEvent* '}'
		public Group getGroup() { return cGroup; }
		
		//{Specification}
		public Action getSpecificationAction_0() { return cSpecificationAction_0; }
		
		//'specification'
		public Keyword getSpecificationKeyword_1() { return cSpecificationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////		decl_sch = DeclareSch ?
		//decl_lst=DeclareList?
		public Assignment getDecl_lstAssignment_3() { return cDecl_lstAssignment_3; }
		
		//DeclareList
		public RuleCall getDecl_lstDeclareListParserRuleCall_3_0() { return cDecl_lstDeclareListParserRuleCall_3_0; }
		
		//define=Define?
		public Assignment getDefineAssignment_4() { return cDefineAssignment_4; }
		
		//Define
		public RuleCall getDefineDefineParserRuleCall_4_0() { return cDefineDefineParserRuleCall_4_0; }
		
		//event+=DeclareEvent*
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//DeclareEvent
		public RuleCall getEventDeclareEventParserRuleCall_5_0() { return cEventDeclareEventParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DeclareSchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DeclareSch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSchedulerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeclareSch:
		//	'using' 'scheduler' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'using' 'scheduler' ';'
		public Group getGroup() { return cGroup; }
		
		//'using'
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }
		
		//'scheduler'
		public Keyword getSchedulerKeyword_1() { return cSchedulerKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DeclareListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DeclareList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecOneDecParserRuleCall_0_0 = (RuleCall)cDecAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDecAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDecOneDecParserRuleCall_1_1_0 = (RuleCall)cDecAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Module :
		////	 |  //proctype = ProcType   // | init = Init | never = Never | sporadic = Sporadic 
		////;
		//DeclareList:
		//	dec+=OneDec (';' dec+=OneDec)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//dec+=OneDec (';' dec+=OneDec)* ';'
		public Group getGroup() { return cGroup; }
		
		//dec+=OneDec
		public Assignment getDecAssignment_0() { return cDecAssignment_0; }
		
		//OneDec
		public RuleCall getDecOneDecParserRuleCall_0_0() { return cDecOneDecParserRuleCall_0_0; }
		
		//(';' dec+=OneDec)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//dec+=OneDec
		public Assignment getDecAssignment_1_1() { return cDecAssignment_1_1; }
		
		//OneDec
		public RuleCall getDecOneDecParserRuleCall_1_1_0() { return cDecOneDecParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class OneDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.OneDec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstConstDecParserRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarVarDecParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cEnumdecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEnumdecEnumDecParserRuleCall_2_0 = (RuleCall)cEnumdecAssignment_2.eContents().get(0);
		
		//OneDec:
		//	const=ConstDec | var=VarDec | enumdec=EnumDec;
		@Override public ParserRule getRule() { return rule; }
		
		//const=ConstDec | var=VarDec | enumdec=EnumDec
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const=ConstDec
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//ConstDec
		public RuleCall getConstConstDecParserRuleCall_0_0() { return cConstConstDecParserRuleCall_0_0; }
		
		//var=VarDec
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VarDec
		public RuleCall getVarVarDecParserRuleCall_1_0() { return cVarVarDecParserRuleCall_1_0; }
		
		//enumdec=EnumDec
		public Assignment getEnumdecAssignment_2() { return cEnumdecAssignment_2; }
		
		//EnumDec
		public RuleCall getEnumdecEnumDecParserRuleCall_2_0() { return cEnumdecEnumDecParserRuleCall_2_0; }
	}
	public class EnumDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EnumDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumtypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEnumTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEnumeleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEnumeleIDTerminalRuleCall_4_0 = (RuleCall)cEnumeleAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEnumeleAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEnumeleIDTerminalRuleCall_5_1_0 = (RuleCall)cEnumeleAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// | arrayDec = ArrayDec ;// | chan = ChanDec;
		//EnumDec:
		//	'enumtype' type=EnumType '=' '{' enumele+=ID (',' enumele+=ID)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumtype' type=EnumType '=' '{' enumele+=ID (',' enumele+=ID)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumtype'
		public Keyword getEnumtypeKeyword_0() { return cEnumtypeKeyword_0; }
		
		//type=EnumType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EnumType
		public RuleCall getTypeEnumTypeParserRuleCall_1_0() { return cTypeEnumTypeParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//enumele+=ID
		public Assignment getEnumeleAssignment_4() { return cEnumeleAssignment_4; }
		
		//ID
		public RuleCall getEnumeleIDTerminalRuleCall_4_0() { return cEnumeleIDTerminalRuleCall_4_0; }
		
		//(',' enumele+=ID)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//enumele+=ID
		public Assignment getEnumeleAssignment_5_1() { return cEnumeleAssignment_5_1; }
		
		//ID
		public RuleCall getEnumeleIDTerminalRuleCall_5_1_0() { return cEnumeleIDTerminalRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EnumType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConstDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ConstDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBvalueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBvalueBoolValueParserRuleCall_3_0_0 = (RuleCall)cBvalueAssignment_3_0.eContents().get(0);
		private final Assignment cIvalueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIvalueNumValueParserRuleCall_3_1_0 = (RuleCall)cIvalueAssignment_3_1.eContents().get(0);
		
		//ConstDec:
		//	'const' name=ID '=' (bvalue=BoolValue | ivalue=NumValue);
		@Override public ParserRule getRule() { return rule; }
		
		//'const' name=ID '=' (bvalue=BoolValue | ivalue=NumValue)
		public Group getGroup() { return cGroup; }
		
		//'const'
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//(bvalue=BoolValue | ivalue=NumValue)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//bvalue=BoolValue
		public Assignment getBvalueAssignment_3_0() { return cBvalueAssignment_3_0; }
		
		//BoolValue
		public RuleCall getBvalueBoolValueParserRuleCall_3_0_0() { return cBvalueBoolValueParserRuleCall_3_0_0; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_3_1() { return cIvalueAssignment_3_1; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_3_1_0() { return cIvalueNumValueParserRuleCall_3_1_0; }
	}
	public class VarDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypeTypeNameEnumRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cEnumtypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cEnumtypeEnumTypeCrossReference_0_1_0 = (CrossReference)cEnumtypeAssignment_0_1.eContents().get(0);
		private final RuleCall cEnumtypeEnumTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cEnumtypeEnumTypeCrossReference_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVDecParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameVDecParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//VarDec:
		//	(type=TypeName | enumtype=[EnumType]) name+=VDec (',' name+=VDec)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=TypeName | enumtype=[EnumType]) name+=VDec (',' name+=VDec)*
		public Group getGroup() { return cGroup; }
		
		//(type=TypeName | enumtype=[EnumType])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//TypeName
		public RuleCall getTypeTypeNameEnumRuleCall_0_0_0() { return cTypeTypeNameEnumRuleCall_0_0_0; }
		
		//enumtype=[EnumType]
		public Assignment getEnumtypeAssignment_0_1() { return cEnumtypeAssignment_0_1; }
		
		//[EnumType]
		public CrossReference getEnumtypeEnumTypeCrossReference_0_1_0() { return cEnumtypeEnumTypeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getEnumtypeEnumTypeIDTerminalRuleCall_0_1_0_1() { return cEnumtypeEnumTypeIDTerminalRuleCall_0_1_0_1; }
		
		//name+=VDec
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VDec
		public RuleCall getNameVDecParserRuleCall_1_0() { return cNameVDecParserRuleCall_1_0; }
		
		//(',' name+=VDec)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=VDec
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//VDec
		public RuleCall getNameVDecParserRuleCall_2_1_0() { return cNameVDecParserRuleCall_2_1_0; }
	}
	public class VDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cBvalueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cBvalueBoolValueParserRuleCall_1_1_0_0 = (RuleCall)cBvalueAssignment_1_1_0.eContents().get(0);
		private final Assignment cIvalueAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cIvalueNumValueParserRuleCall_1_1_1_0 = (RuleCall)cIvalueAssignment_1_1_1.eContents().get(0);
		
		//VDec:
		//	name=ID ('=' (bvalue=BoolValue | ivalue=NumValue))?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('=' (bvalue=BoolValue | ivalue=NumValue))?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' (bvalue=BoolValue | ivalue=NumValue))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//(bvalue=BoolValue | ivalue=NumValue)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//bvalue=BoolValue
		public Assignment getBvalueAssignment_1_1_0() { return cBvalueAssignment_1_1_0; }
		
		//BoolValue
		public RuleCall getBvalueBoolValueParserRuleCall_1_1_0_0() { return cBvalueBoolValueParserRuleCall_1_1_0_0; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_1_1_1() { return cIvalueAssignment_1_1_1; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_1_1_1_0() { return cIvalueNumValueParserRuleCall_1_1_1_0; }
	}
	public class ArrayDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ArrayDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeNameEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cANameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cANameIDTerminalRuleCall_1_0 = (RuleCall)cANameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumNumValueParserRuleCall_3_0 = (RuleCall)cNumAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ArrayDec:
		//	type=TypeName aName=ID '[' num=NumValue ']' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeName aName=ID '[' num=NumValue ']' ';'
		public Group getGroup() { return cGroup; }
		
		//type=TypeName
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeName
		public RuleCall getTypeTypeNameEnumRuleCall_0_0() { return cTypeTypeNameEnumRuleCall_0_0; }
		
		//aName=ID
		public Assignment getANameAssignment_1() { return cANameAssignment_1; }
		
		//ID
		public RuleCall getANameIDTerminalRuleCall_1_0() { return cANameIDTerminalRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//num=NumValue
		public Assignment getNumAssignment_3() { return cNumAssignment_3; }
		
		//NumValue
		public RuleCall getNumNumValueParserRuleCall_3_0() { return cNumNumValueParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ChanDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChanDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCnameIDTerminalRuleCall_1_0 = (RuleCall)cCnameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIvalueNumValueParserRuleCall_4_0 = (RuleCall)cIvalueAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeTypeNameEnumRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ChanDec:
		//	'chan' cname=ID '=' '[' ivalue=NumValue ']' 'of' '{' type=TypeName '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'chan' cname=ID '=' '[' ivalue=NumValue ']' 'of' '{' type=TypeName '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'chan'
		public Keyword getChanKeyword_0() { return cChanKeyword_0; }
		
		//cname=ID
		public Assignment getCnameAssignment_1() { return cCnameAssignment_1; }
		
		//ID
		public RuleCall getCnameIDTerminalRuleCall_1_0() { return cCnameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_4() { return cIvalueAssignment_4; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_4_0() { return cIvalueNumValueParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//'of'
		public Keyword getOfKeyword_6() { return cOfKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//type=TypeName
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }
		
		//TypeName
		public RuleCall getTypeTypeNameEnumRuleCall_8_0() { return cTypeTypeNameEnumRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReflistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReflistRefListParserRuleCall_3_0 = (RuleCall)cReflistAssignment_3.eContents().get(0);
		private final Assignment cFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionFunctionParserRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Define:
		//	{Define} 'define' '{'
		//	reflist+=RefList*
		//	function+=Function*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Define} 'define' '{' reflist+=RefList* function+=Function* '}'
		public Group getGroup() { return cGroup; }
		
		//{Define}
		public Action getDefineAction_0() { return cDefineAction_0; }
		
		//'define'
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//reflist+=RefList*
		public Assignment getReflistAssignment_3() { return cReflistAssignment_3; }
		
		//RefList
		public RuleCall getReflistRefListParserRuleCall_3_0() { return cReflistRefListParserRuleCall_3_0; }
		
		//function+=Function*
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_4_0() { return cFunctionFunctionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RefListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.RefList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemRefListItemParserRuleCall_3_0 = (RuleCall)cItemAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cItemAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cItemRefListItemParserRuleCall_4_1_0 = (RuleCall)cItemAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RefList:
		//	name=ID '=' '[' item+=RefListItem (',' item+=RefListItem)* ']' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' '[' item+=RefListItem (',' item+=RefListItem)* ']' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//item+=RefListItem
		public Assignment getItemAssignment_3() { return cItemAssignment_3; }
		
		//RefListItem
		public RuleCall getItemRefListItemParserRuleCall_3_0() { return cItemRefListItemParserRuleCall_3_0; }
		
		//(',' item+=RefListItem)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//item+=RefListItem
		public Assignment getItemAssignment_4_1() { return cItemAssignment_4_1; }
		
		//RefListItem
		public RuleCall getItemRefListItemParserRuleCall_4_1_0() { return cItemRefListItemParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuncparaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFuncparaFuncParaParserRuleCall_2_0 = (RuleCall)cFuncparaAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSequenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSequenceSequenceActionParserRuleCall_5_0 = (RuleCall)cSequenceAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function:
		//	name=ID '(' funcpara=FuncPara? ')' '{'
		//	sequence=SequenceAction
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' funcpara=FuncPara? ')' '{' sequence=SequenceAction '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//funcpara=FuncPara?
		public Assignment getFuncparaAssignment_2() { return cFuncparaAssignment_2; }
		
		//FuncPara
		public RuleCall getFuncparaFuncParaParserRuleCall_2_0() { return cFuncparaFuncParaParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//sequence=SequenceAction
		public Assignment getSequenceAssignment_5() { return cSequenceAssignment_5; }
		
		//SequenceAction
		public RuleCall getSequenceSequenceActionParserRuleCall_5_0() { return cSequenceSequenceActionParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RefListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.RefListItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBvalueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBvalueBoolValueParserRuleCall_0_0 = (RuleCall)cBvalueAssignment_0.eContents().get(0);
		private final Assignment cIvalueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIvalueNumValueParserRuleCall_1_0 = (RuleCall)cIvalueAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//RefListItem:
		//	bvalue=BoolValue | ivalue=NumValue | id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//bvalue=BoolValue | ivalue=NumValue | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bvalue=BoolValue
		public Assignment getBvalueAssignment_0() { return cBvalueAssignment_0; }
		
		//BoolValue
		public RuleCall getBvalueBoolValueParserRuleCall_0_0() { return cBvalueBoolValueParserRuleCall_0_0; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_1() { return cIvalueAssignment_1; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_1_0() { return cIvalueNumValueParserRuleCall_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}
	public class FuncParaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FuncPara");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParaIDTerminalRuleCall_0_0 = (RuleCall)cParaAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParaIDTerminalRuleCall_1_1_0 = (RuleCall)cParaAssignment_1_1.eContents().get(0);
		
		//FuncPara:
		//	para+=ID (',' para+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//para+=ID (',' para+=ID)*
		public Group getGroup() { return cGroup; }
		
		//para+=ID
		public Assignment getParaAssignment_0() { return cParaAssignment_0; }
		
		//ID
		public RuleCall getParaIDTerminalRuleCall_0_0() { return cParaIDTerminalRuleCall_0_0; }
		
		//(',' para+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//para+=ID
		public Assignment getParaAssignment_1_1() { return cParaAssignment_1_1; }
		
		//ID
		public RuleCall getParaIDTerminalRuleCall_1_1_0() { return cParaIDTerminalRuleCall_1_1_0; }
	}
	public class DeclareEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DeclareEvent");
		private final Assignment cEventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_0 = (RuleCall)cEventAssignment.eContents().get(0);
		
		//DeclareEvent:
		//	event=Event;
		@Override public ParserRule getRule() { return rule; }
		
		//event=Event
		public Assignment getEventAssignment() { return cEventAssignment; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_0() { return cEventEventParserRuleCall_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElabelELABELParserRuleCall_1_0 = (RuleCall)cElabelAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGuardAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_3_1_0 = (RuleCall)cGuardAssignment_3_1.eContents().get(0);
		private final Keyword cThenKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSequenceAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cSequenceSequenceActionParserRuleCall_4_0_0 = (RuleCall)cSequenceAssignment_4_0.eContents().get(0);
		private final Assignment cEventfunctionAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEventfunctionEventFunctionParserRuleCall_4_1_0 = (RuleCall)cEventfunctionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Event:
		//	'event' elabel=ELABEL '{' ('when' guard=Expression 'then')? (sequence=SequenceAction | eventfunction=EventFunction)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' elabel=ELABEL '{' ('when' guard=Expression 'then')? (sequence=SequenceAction | eventfunction=EventFunction) '}'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//elabel=ELABEL
		public Assignment getElabelAssignment_1() { return cElabelAssignment_1; }
		
		//ELABEL
		public RuleCall getElabelELABELParserRuleCall_1_0() { return cElabelELABELParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('when' guard=Expression 'then')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'when'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }
		
		//guard=Expression
		public Assignment getGuardAssignment_3_1() { return cGuardAssignment_3_1; }
		
		//Expression
		public RuleCall getGuardExpressionParserRuleCall_3_1_0() { return cGuardExpressionParserRuleCall_3_1_0; }
		
		//'then'
		public Keyword getThenKeyword_3_2() { return cThenKeyword_3_2; }
		
		//(sequence=SequenceAction | eventfunction=EventFunction)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//sequence=SequenceAction
		public Assignment getSequenceAssignment_4_0() { return cSequenceAssignment_4_0; }
		
		//SequenceAction
		public RuleCall getSequenceSequenceActionParserRuleCall_4_0_0() { return cSequenceSequenceActionParserRuleCall_4_0_0; }
		
		//eventfunction=EventFunction
		public Assignment getEventfunctionAssignment_4_1() { return cEventfunctionAssignment_4_1; }
		
		//EventFunction
		public RuleCall getEventfunctionEventFunctionParserRuleCall_4_1_0() { return cEventfunctionEventFunctionParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EventFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFuncparaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFuncparaParaListItemParserRuleCall_2_0 = (RuleCall)cFuncparaAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventFunction:
		//	name=ID '(' funcpara=ParaListItem? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' funcpara=ParaListItem? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//funcpara=ParaListItem?
		public Assignment getFuncparaAssignment_2() { return cFuncparaAssignment_2; }
		
		//ParaListItem
		public RuleCall getFuncparaParaListItemParserRuleCall_2_0() { return cFuncparaParaListItemParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ParaListItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ParaListItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cItemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cItemRefListItemParserRuleCall_0_0 = (RuleCall)cItemAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cItemAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cItemRefListItemParserRuleCall_1_1_0 = (RuleCall)cItemAssignment_1_1.eContents().get(0);
		
		//ParaListItem:
		//	item+=RefListItem (',' item+=RefListItem)*;
		@Override public ParserRule getRule() { return rule; }
		
		//item+=RefListItem (',' item+=RefListItem)*
		public Group getGroup() { return cGroup; }
		
		//item+=RefListItem
		public Assignment getItemAssignment_0() { return cItemAssignment_0; }
		
		//RefListItem
		public RuleCall getItemRefListItemParserRuleCall_0_0() { return cItemRefListItemParserRuleCall_0_0; }
		
		//(',' item+=RefListItem)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//item+=RefListItem
		public Assignment getItemAssignment_1_1() { return cItemAssignment_1_1; }
		
		//RefListItem
		public RuleCall getItemRefListItemParserRuleCall_1_1_0() { return cItemRefListItemParserRuleCall_1_1_0; }
	}
	public class ELABELElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ELABEL");
		private final Assignment cLabelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_0 = (RuleCall)cLabelAssignment.eContents().get(0);
		
		//ELABEL:
		//	label=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//label=ID
		public Assignment getLabelAssignment() { return cLabelAssignment; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_0() { return cLabelIDTerminalRuleCall_0; }
	}
	public class SequenceActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SequenceAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//SequenceAction:
		//	action+=Action action+=Action*;
		@Override public ParserRule getRule() { return rule; }
		
		//action+=Action action+=Action*
		public Group getGroup() { return cGroup; }
		
		//action+=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_0_0() { return cActionActionParserRuleCall_0_0; }
		
		//action+=Action*
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIFsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cASSIGNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSKIPParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGUARDParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Action:
		//	IFs | ASSIGN | SKIP | GUARD;
		@Override public ParserRule getRule() { return rule; }
		
		//IFs | ASSIGN | SKIP | GUARD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IFs
		public RuleCall getIFsParserRuleCall_0() { return cIFsParserRuleCall_0; }
		
		//ASSIGN
		public RuleCall getASSIGNParserRuleCall_1() { return cASSIGNParserRuleCall_1; }
		
		//SKIP
		public RuleCall getSKIPParserRuleCall_2() { return cSKIPParserRuleCall_2; }
		
		//GUARD
		public RuleCall getGUARDParserRuleCall_3() { return cGUARDParserRuleCall_3; }
	}
	public class GUARDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GUARD");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSequenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSequenceActionParserRuleCall_2_0 = (RuleCall)cSequenceAssignment_2.eContents().get(0);
		
		////  ;
		////		MoveProcess |
		////		MoveSelectedProcess |
		////		GetProcess |
		//////		ChangeValue |
		////		IfStatement |
		////		BlockStatement ;
		//GUARD:
		//	expr=Expression '->' sequence=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expression '->' sequence=Action
		public Group getGroup() { return cGroup; }
		
		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//sequence=Action
		public Assignment getSequenceAssignment_2() { return cSequenceAssignment_2; }
		
		//Action
		public RuleCall getSequenceActionParserRuleCall_2_0() { return cSequenceActionParserRuleCall_2_0; }
	}
	public class IFsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.IFs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIFsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionOptionsParserRuleCall_2_0 = (RuleCall)cOptionAssignment_2.eContents().get(0);
		private final Keyword cFiKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IFs:
		//	{IFs}
		//	'if'
		//	option=Options
		//	'fi' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{IFs} 'if' option=Options 'fi' ';'
		public Group getGroup() { return cGroup; }
		
		//{IFs}
		public Action getIFsAction_0() { return cIFsAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//option=Options
		public Assignment getOptionAssignment_2() { return cOptionAssignment_2; }
		
		//Options
		public RuleCall getOptionOptionsParserRuleCall_2_0() { return cOptionOptionsParserRuleCall_2_0; }
		
		//'fi'
		public Keyword getFiKeyword_3() { return cFiKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ASSIGNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ASSIGN");
		private final RuleCall cChangeValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ASSIGN:
		//	ChangeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//ChangeValue
		public RuleCall getChangeValueParserRuleCall() { return cChangeValueParserRuleCall; }
	}
	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSequenceSequenceActionParserRuleCall_1_0 = (RuleCall)cSequenceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSequenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSequenceSequenceActionParserRuleCall_2_1_0 = (RuleCall)cSequenceAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElsesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElsesELSEsParserRuleCall_3_1_0 = (RuleCall)cElsesAssignment_3_1.eContents().get(0);
		
		//Options:
		//	'::' sequence+=SequenceAction ('::' sequence+=SequenceAction)* ('::' elses=ELSEs)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'::' sequence+=SequenceAction ('::' sequence+=SequenceAction)* ('::' elses=ELSEs)?
		public Group getGroup() { return cGroup; }
		
		//'::'
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }
		
		//sequence+=SequenceAction
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }
		
		//SequenceAction
		public RuleCall getSequenceSequenceActionParserRuleCall_1_0() { return cSequenceSequenceActionParserRuleCall_1_0; }
		
		//('::' sequence+=SequenceAction)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'::'
		public Keyword getColonColonKeyword_2_0() { return cColonColonKeyword_2_0; }
		
		//sequence+=SequenceAction
		public Assignment getSequenceAssignment_2_1() { return cSequenceAssignment_2_1; }
		
		//SequenceAction
		public RuleCall getSequenceSequenceActionParserRuleCall_2_1_0() { return cSequenceSequenceActionParserRuleCall_2_1_0; }
		
		//('::' elses=ELSEs)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'::'
		public Keyword getColonColonKeyword_3_0() { return cColonColonKeyword_3_0; }
		
		//elses=ELSEs
		public Assignment getElsesAssignment_3_1() { return cElsesAssignment_3_1; }
		
		//ELSEs
		public RuleCall getElsesELSEsParserRuleCall_3_1_0() { return cElsesELSEsParserRuleCall_3_1_0; }
	}
	public class ELSEsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ELSEs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSequenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSequenceActionParserRuleCall_2_0 = (RuleCall)cSequenceAssignment_2.eContents().get(0);
		
		//ELSEs:
		//	'else' '->' sequence=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' '->' sequence=Action
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//sequence=Action
		public Assignment getSequenceAssignment_2() { return cSequenceAssignment_2; }
		
		//Action
		public RuleCall getSequenceActionParserRuleCall_2_0() { return cSequenceActionParserRuleCall_2_0; }
	}
	public class SKIPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SKIP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSKIPAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SKIP:
		//	{SKIP} 'skip' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{SKIP} 'skip' ';'
		public Group getGroup() { return cGroup; }
		
		//{SKIP}
		public Action getSKIPAction_0() { return cSKIPAction_0; }
		
		//'skip'
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ProcessConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefinesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParentIDTerminalRuleCall_2_1_0 = (RuleCall)cParentAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributeAttributeParserRuleCall_4_0 = (RuleCall)cAttributeAssignment_4.eContents().get(0);
		private final Assignment cDefbehaviorprocAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefbehaviorprocDefBehaviorProcParserRuleCall_5_0 = (RuleCall)cDefbehaviorprocAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cConfigurationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cProcessconfigAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cProcessconfigProcessConfigParserRuleCall_9_0 = (RuleCall)cProcessconfigAssignment_9.eContents().get(0);
		private final Assignment cProcessinitAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProcessinitProcessInitParserRuleCall_10_0 = (RuleCall)cProcessinitAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		////VarDef : {VarDef}	'variable' '{' vard += VarDefination*   '}';
		////VarDefination :  (type=VariableType) name+=VarName (',' name+=VarName)* ('=' (bvalue = BoolValue |  ivalue = INT) )? ';' ;
		////VarName : name = ID ;
		////ProcType :
		////	(active = Active)? 'proctype' proctype=Process '(' (paralist = ParameterList)? ')'
		////	'{'
		////		sequence = Sequence
		////	'}'
		////;
		////
		////Active : {Active}
		////	'active' ('[' num = NumValue ']')?
		////;
		////
		////Init :
		////	'init' '{' seq = Sequence '}'
		////;
		////
		////Never:
		////	'never' '{' seq = Sequence '}'
		////;
		////
		////Sporadic :
		////	'sporadic' '{' 
		////		(decl_lst += DeclareList)*
		////		seq = Sequence 
		////	'}'
		////;
		////
		//////enum Separator : semi_colon = ';' | arrow = '->';
		////
		////Sequence : sequence += Step (';' sequence += Step)* ;
		////
		////
		////Step:
		////	IF | DO |  D_STEP | pATOMIC | AssertStatement | API | GUARD | EXEC | SKIP | LABEL | GOTO | CHANSEND | CHANRECEIVE
		////;
		////ARRAYASSIGN : var=AVAR '=' exp=Expression ';';
		////GUARD :
		////	expr = Expression '->' seq = Sequence
		////;
		////IF : {IF}
		////	'if' 
		////		option = Options				 
		////	'fi'  
		////;
		////
		////DO : {DO}
		////	'do'
		////		option = Options
		////	'od' 
		////;
		////
		////Options :
		////	'::' sequence += Sequence 
		////	('::' sequence += Sequence )*
		////;
		////FOR : 'for' '(' varfef = VarRef ':' expr1 = Expression '..' expr2 = Expression ')' '{' sequence = Sequence '}';
		////FORIN : 'for' '(' varfef1 = VarRef 'in' varref2 = VarRef ')' '{' sequence = Sequence'}' ; 
		////
		////
		////ASSIGN : ChangeValue ;
		////
		////D_STEP :
		////	'd_step''{' sequence = Sequence '}' 
		////;
		////
		////pATOMIC :
		////	'atomic' '{' sequence = Sequence '}' 
		////;
		////Assert:
		////	'assert' '(' expr = Expression ')'
		////;
		////API : s = 'terminate' '(' ')' ;
		////Array : name = ID;
		////Channel: name = ID;
		////VarRef: name = ID ('[' expr1 = Expression ']')? ('.' expr2 = VarRef)?;
		////EXEC:
		////	'exec' element = Element 
		////;
		////
		////SKIP:
		////	s = 'skip' 
		////;
		////
		////LABEL : name = ID ':' seq = Sequence;
		////
		////GOTO: 'goto' label = ID ;
		////
		////CHANSEND: cname = ID '!' value = ID ;
		////CHANRECEIVE: cname = ID '?' value = ID ;
		////............................................
		//ProcessConfiguration:
		//	'process' name=ID ('refines' parent=ID)? '{'
		//	attribute=Attribute?
		//	defbehaviorproc=DefBehaviorProc
		//	'}'
		//	'configuration' '{'
		//	processconfig=ProcessConfig?
		//	processinit=ProcessInit
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' name=ID ('refines' parent=ID)? '{' attribute=Attribute? defbehaviorproc=DefBehaviorProc '}' 'configuration'
		//'{' processconfig=ProcessConfig? processinit=ProcessInit '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('refines' parent=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'refines'
		public Keyword getRefinesKeyword_2_0() { return cRefinesKeyword_2_0; }
		
		//parent=ID
		public Assignment getParentAssignment_2_1() { return cParentAssignment_2_1; }
		
		//ID
		public RuleCall getParentIDTerminalRuleCall_2_1_0() { return cParentIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//attribute=Attribute?
		public Assignment getAttributeAssignment_4() { return cAttributeAssignment_4; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_4_0() { return cAttributeAttributeParserRuleCall_4_0; }
		
		//defbehaviorproc=DefBehaviorProc
		public Assignment getDefbehaviorprocAssignment_5() { return cDefbehaviorprocAssignment_5; }
		
		//DefBehaviorProc
		public RuleCall getDefbehaviorprocDefBehaviorProcParserRuleCall_5_0() { return cDefbehaviorprocDefBehaviorProcParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_7() { return cConfigurationKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//processconfig=ProcessConfig?
		public Assignment getProcessconfigAssignment_9() { return cProcessconfigAssignment_9; }
		
		//ProcessConfig
		public RuleCall getProcessconfigProcessConfigParserRuleCall_9_0() { return cProcessconfigProcessConfigParserRuleCall_9_0; }
		
		//processinit=ProcessInit
		public Assignment getProcessinitAssignment_10() { return cProcessinitAssignment_10; }
		
		//ProcessInit
		public RuleCall getProcessinitProcessInitParserRuleCall_10_0() { return cProcessinitProcessInitParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DefBehaviorProcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DefBehaviorProc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProcessbehaviorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProcessbehaviorsProcessBehaviorsParserRuleCall_0_0 = (RuleCall)cProcessbehaviorsAssignment_0.eContents().get(0);
		private final Assignment cProctypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProctypeProcTypeParserRuleCall_1_0 = (RuleCall)cProctypeAssignment_1.eContents().get(0);
		
		//DefBehaviorProc:
		//	processbehaviors=ProcessBehaviors | proctype=ProcType;
		@Override public ParserRule getRule() { return rule; }
		
		//processbehaviors=ProcessBehaviors | proctype=ProcType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//processbehaviors=ProcessBehaviors
		public Assignment getProcessbehaviorsAssignment_0() { return cProcessbehaviorsAssignment_0; }
		
		//ProcessBehaviors
		public RuleCall getProcessbehaviorsProcessBehaviorsParserRuleCall_0_0() { return cProcessbehaviorsProcessBehaviorsParserRuleCall_0_0; }
		
		//proctype=ProcType
		public Assignment getProctypeAssignment_1() { return cProctypeAssignment_1; }
		
		//ProcType
		public RuleCall getProctypeProcTypeParserRuleCall_1_0() { return cProctypeProcTypeParserRuleCall_1_0; }
	}
	public class ProcTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cProctypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProctypeProcessTypeParserRuleCall_1_0 = (RuleCall)cProctypeAssignment_1.eContents().get(0);
		
		//ProcType:
		//	{ProcType} proctype+=ProcessType*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcType} proctype+=ProcessType*
		public Group getGroup() { return cGroup; }
		
		//{ProcType}
		public Action getProcTypeAction_0() { return cProcTypeAction_0; }
		
		//proctype+=ProcessType*
		public Assignment getProctypeAssignment_1() { return cProctypeAssignment_1; }
		
		//ProcessType
		public RuleCall getProctypeProcessTypeParserRuleCall_1_0() { return cProctypeProcessTypeParserRuleCall_1_0; }
	}
	public class ProcessTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProctypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsConstraintsParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Assignment cProcessbehaviorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessbehaviorProcessBehaviorParserRuleCall_4_0 = (RuleCall)cProcessbehaviorAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProcessType:
		//	'proctype' name=ID '{'
		//	constraints=Constraints?
		//	processbehavior+=ProcessBehavior*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'proctype' name=ID '{' constraints=Constraints? processbehavior+=ProcessBehavior* '}'
		public Group getGroup() { return cGroup; }
		
		//'proctype'
		public Keyword getProctypeKeyword_0() { return cProctypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//constraints=Constraints?
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_3_0() { return cConstraintsConstraintsParserRuleCall_3_0; }
		
		//processbehavior+=ProcessBehavior*
		public Assignment getProcessbehaviorAssignment_4() { return cProcessbehaviorAssignment_4; }
		
		//ProcessBehavior
		public RuleCall getProcessbehaviorProcessBehaviorParserRuleCall_4_0() { return cProcessbehaviorProcessBehaviorParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttAttDefParserRuleCall_3_0 = (RuleCall)cAttAssignment_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintsConstraintsParserRuleCall_4_0 = (RuleCall)cConstraintsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attribute:
		//	{Attribute} 'attribute' '{'
		//	att+=AttDef*
		//	constraints=Constraints?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} 'attribute' '{' att+=AttDef* constraints=Constraints? '}'
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//att+=AttDef*
		public Assignment getAttAssignment_3() { return cAttAssignment_3; }
		
		//AttDef
		public RuleCall getAttAttDefParserRuleCall_3_0() { return cAttAttDefParserRuleCall_3_0; }
		
		//constraints=Constraints?
		public Assignment getConstraintsAssignment_4() { return cConstraintsAssignment_4; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_4_0() { return cConstraintsConstraintsParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.AttDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeVariableTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cValueKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cListAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cListListDefParserRuleCall_5_3_0 = (RuleCall)cListAssignment_5_3.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDefaultKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDefaultAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDefaultValueParserRuleCall_9_0 = (RuleCall)cDefaultAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AttDef:
		//	name=ID ':' 'type' '=' type=VariableType (',' 'value' '=' list=ListDef)? ',' 'default' '=' default=Value ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' 'type' '=' type=VariableType (',' 'value' '=' list=ListDef)? ',' 'default' '=' default=Value ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//type=VariableType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_4_0() { return cTypeVariableTypeEnumRuleCall_4_0; }
		
		//(',' 'value' '=' list=ListDef)?
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//'value'
		public Keyword getValueKeyword_5_1() { return cValueKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//list=ListDef
		public Assignment getListAssignment_5_3() { return cListAssignment_5_3; }
		
		//ListDef
		public RuleCall getListListDefParserRuleCall_5_3_0() { return cListListDefParserRuleCall_5_3_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'default'
		public Keyword getDefaultKeyword_7() { return cDefaultKeyword_7; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//default=Value
		public Assignment getDefaultAssignment_9() { return cDefaultAssignment_9; }
		
		//Value
		public RuleCall getDefaultValueParserRuleCall_9_0() { return cDefaultValueParserRuleCall_9_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class ConstraintsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Constraints");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintConstraintParserRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraints:
		//	{Constraints} 'constraint' '{' constraint+=Constraint* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constraints} 'constraint' '{' constraint+=Constraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{Constraints}
		public Action getConstraintsAction_0() { return cConstraintsAction_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//constraint+=Constraint*
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_3_0() { return cConstraintConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Constraint:
		//	condition=Condition ';';
		@Override public ParserRule getRule() { return rule; }
		
		//condition=Condition ';'
		public Group getGroup() { return cGroup; }
		
		//condition=Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ProcessBehaviorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessBehaviors");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessBehaviorsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessbehaviorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessbehaviorProcessBehaviorParserRuleCall_3_0 = (RuleCall)cProcessbehaviorAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessBehaviors:
		//	{ProcessBehaviors}
		//	'behavior' '{'
		//	processbehavior+=ProcessBehavior*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessBehaviors} 'behavior' '{' processbehavior+=ProcessBehavior* '}'
		public Group getGroup() { return cGroup; }
		
		//{ProcessBehaviors}
		public Action getProcessBehaviorsAction_0() { return cProcessBehaviorsAction_0; }
		
		//'behavior'
		public Keyword getBehaviorKeyword_1() { return cBehaviorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//processbehavior+=ProcessBehavior*
		public Assignment getProcessbehaviorAssignment_3() { return cProcessbehaviorAssignment_3; }
		
		//ProcessBehavior
		public RuleCall getProcessbehaviorProcessBehaviorParserRuleCall_3_0() { return cProcessbehaviorProcessBehaviorParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcessBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessBehavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstructorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstructorConstructorParserRuleCall_0_0 = (RuleCall)cConstructorAssignment_0.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMethodMethodParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		
		//ProcessBehavior:
		//	constructor=Constructor | method=Method;
		@Override public ParserRule getRule() { return rule; }
		
		//constructor=Constructor | method=Method
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//constructor=Constructor
		public Assignment getConstructorAssignment_0() { return cConstructorAssignment_0; }
		
		//Constructor
		public RuleCall getConstructorConstructorParserRuleCall_0_0() { return cConstructorConstructorParserRuleCall_0_0; }
		
		//method=Method
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }
		
		//Method
		public RuleCall getMethodMethodParserRuleCall_1_0() { return cMethodMethodParserRuleCall_1_0; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstructorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessnameIDTerminalRuleCall_2_0 = (RuleCall)cProcessnameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParalistAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParalistParameterListParserRuleCall_4_0 = (RuleCall)cParalistAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Constructor:
		//	'constructor' ':' processname=ID '(' paralist=ParameterList? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'constructor' ':' processname=ID '(' paralist=ParameterList? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'constructor'
		public Keyword getConstructorKeyword_0() { return cConstructorKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//processname=ID
		public Assignment getProcessnameAssignment_2() { return cProcessnameAssignment_2; }
		
		//ID
		public RuleCall getProcessnameIDTerminalRuleCall_2_0() { return cProcessnameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//paralist=ParameterList?
		public Assignment getParalistAssignment_4() { return cParalistAssignment_4; }
		
		//ParameterList
		public RuleCall getParalistParameterListParserRuleCall_4_0() { return cParalistParameterListParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionnameFunctionNameParserRuleCall_2_0 = (RuleCall)cFunctionnameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterlistAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterlistInterfaceParameterListParserRuleCall_3_1_1_0 = (RuleCall)cParameterlistAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Assignment cAssignparametersAssignment_3_1_4 = (Assignment)cGroup_3_1.eContents().get(4);
		private final RuleCall cAssignparametersAssignParametersParserRuleCall_3_1_4_0 = (RuleCall)cAssignparametersAssignment_3_1_4.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1_5 = (Assignment)cGroup_3_1.eContents().get(5);
		private final RuleCall cConstraintsConstraintsParserRuleCall_3_1_5_0 = (RuleCall)cConstraintsAssignment_3_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_6 = (Keyword)cGroup_3_1.eContents().get(6);
		
		//Method:
		//	'method' ':' functionname=FunctionName ('(' ')' ';' | '(' parameterlist=InterfaceParameterList ')' '{'
		//	assignparameters+=AssignParameters*
		//	constraints=Constraints?
		//	'}');
		@Override public ParserRule getRule() { return rule; }
		
		//'method' ':' functionname=FunctionName ('(' ')' ';' | '(' parameterlist=InterfaceParameterList ')' '{'
		//assignparameters+=AssignParameters* constraints=Constraints? '}')
		public Group getGroup() { return cGroup; }
		
		//'method'
		public Keyword getMethodKeyword_0() { return cMethodKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//functionname=FunctionName
		public Assignment getFunctionnameAssignment_2() { return cFunctionnameAssignment_2; }
		
		//FunctionName
		public RuleCall getFunctionnameFunctionNameParserRuleCall_2_0() { return cFunctionnameFunctionNameParserRuleCall_2_0; }
		
		//('(' ')' ';' | '(' parameterlist=InterfaceParameterList ')' '{' assignparameters+=AssignParameters*
		//constraints=Constraints? '}')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'(' ')' ';'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0_0() { return cLeftParenthesisKeyword_3_0_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0_1() { return cRightParenthesisKeyword_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_2() { return cSemicolonKeyword_3_0_2; }
		
		//'(' parameterlist=InterfaceParameterList ')' '{' assignparameters+=AssignParameters* constraints=Constraints? '}'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1_0() { return cLeftParenthesisKeyword_3_1_0; }
		
		//parameterlist=InterfaceParameterList
		public Assignment getParameterlistAssignment_3_1_1() { return cParameterlistAssignment_3_1_1; }
		
		//InterfaceParameterList
		public RuleCall getParameterlistInterfaceParameterListParserRuleCall_3_1_1_0() { return cParameterlistInterfaceParameterListParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1_3() { return cLeftCurlyBracketKeyword_3_1_3; }
		
		//assignparameters+=AssignParameters*
		public Assignment getAssignparametersAssignment_3_1_4() { return cAssignparametersAssignment_3_1_4; }
		
		//AssignParameters
		public RuleCall getAssignparametersAssignParametersParserRuleCall_3_1_4_0() { return cAssignparametersAssignParametersParserRuleCall_3_1_4_0; }
		
		//constraints=Constraints?
		public Assignment getConstraintsAssignment_3_1_5() { return cConstraintsAssignment_3_1_5; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_3_1_5_0() { return cConstraintsConstraintsParserRuleCall_3_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_1_6() { return cRightCurlyBracketKeyword_3_1_6; }
	}
	public class InvariantsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Invariants");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariatntsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInvariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInvariantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInvariantConstraintParserRuleCall_3_0 = (RuleCall)cInvariantAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Invariants:
		//	{Invariatnts} 'invariant' '{' invariant+=Constraint* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Invariatnts} 'invariant' '{' invariant+=Constraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{Invariatnts}
		public Action getInvariatntsAction_0() { return cInvariatntsAction_0; }
		
		//'invariant'
		public Keyword getInvariantKeyword_1() { return cInvariantKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//invariant+=Constraint*
		public Assignment getInvariantAssignment_3() { return cInvariantAssignment_3; }
		
		//Constraint
		public RuleCall getInvariantConstraintParserRuleCall_3_0() { return cInvariantConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AssignParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.AssignParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParanameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParanameIDTerminalRuleCall_0_0 = (RuleCall)cParanameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cListListDefParserRuleCall_4_0 = (RuleCall)cListAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AssignParameters:
		//	paraname=ID ':' 'value' '=' list=ListDef ';';
		@Override public ParserRule getRule() { return rule; }
		
		//paraname=ID ':' 'value' '=' list=ListDef ';'
		public Group getGroup() { return cGroup; }
		
		//paraname=ID
		public Assignment getParanameAssignment_0() { return cParanameAssignment_0; }
		
		//ID
		public RuleCall getParanameIDTerminalRuleCall_0_0() { return cParanameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'value'
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//list=ListDef
		public Assignment getListAssignment_4() { return cListAssignment_4; }
		
		//ListDef
		public RuleCall getListListDefParserRuleCall_4_0() { return cListListDefParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ProcessDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessDSLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProcessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParentIDTerminalRuleCall_4_1_0 = (RuleCall)cParentAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProcessdataAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProcessdataProcessDataDefParserRuleCall_6_0 = (RuleCall)cProcessdataAssignment_6.eContents().get(0);
		private final Assignment cConstraintsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstraintsConstraintsParserRuleCall_7_0 = (RuleCall)cConstraintsAssignment_7.eContents().get(0);
		private final Assignment cProcessAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProcessProcessDefParserRuleCall_8_0 = (RuleCall)cProcessAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cProcessconfigAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cProcessconfigProcessConfigParserRuleCall_10_0 = (RuleCall)cProcessconfigAssignment_10.eContents().get(0);
		private final Assignment cProcessinitAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cProcessinitProcessInitParserRuleCall_11_0 = (RuleCall)cProcessinitAssignment_11.eContents().get(0);
		
		////---------------------------------------------------------------------------------
		//ProcessDSL:
		//	{ProcessDSL}
		//	//procvard +=VarDefinition * //for promela files
		//
		//	'def' 'process' name=ID ('refines' parent=ID)? '{'
		//	processdata=ProcessDataDef?
		//	constraints=Constraints?
		//	process+=ProcessDef*
		//	'}'
		//	processconfig=ProcessConfig?
		//	processinit=ProcessInit?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessDSL} //procvard +=VarDefinition * //for promela files
		//'def' 'process' name=ID ('refines' parent=ID)? '{' processdata=ProcessDataDef? constraints=Constraints?
		//process+=ProcessDef* '}' processconfig=ProcessConfig? processinit=ProcessInit?
		public Group getGroup() { return cGroup; }
		
		//{ProcessDSL}
		public Action getProcessDSLAction_0() { return cProcessDSLAction_0; }
		
		////procvard +=VarDefinition * //for promela files
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//'process'
		public Keyword getProcessKeyword_2() { return cProcessKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('refines' parent=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//parent=ID
		public Assignment getParentAssignment_4_1() { return cParentAssignment_4_1; }
		
		//ID
		public RuleCall getParentIDTerminalRuleCall_4_1_0() { return cParentIDTerminalRuleCall_4_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//processdata=ProcessDataDef?
		public Assignment getProcessdataAssignment_6() { return cProcessdataAssignment_6; }
		
		//ProcessDataDef
		public RuleCall getProcessdataProcessDataDefParserRuleCall_6_0() { return cProcessdataProcessDataDefParserRuleCall_6_0; }
		
		//constraints=Constraints?
		public Assignment getConstraintsAssignment_7() { return cConstraintsAssignment_7; }
		
		//Constraints
		public RuleCall getConstraintsConstraintsParserRuleCall_7_0() { return cConstraintsConstraintsParserRuleCall_7_0; }
		
		//process+=ProcessDef*
		public Assignment getProcessAssignment_8() { return cProcessAssignment_8; }
		
		//ProcessDef
		public RuleCall getProcessProcessDefParserRuleCall_8_0() { return cProcessProcessDefParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//processconfig=ProcessConfig?
		public Assignment getProcessconfigAssignment_10() { return cProcessconfigAssignment_10; }
		
		//ProcessConfig
		public RuleCall getProcessconfigProcessConfigParserRuleCall_10_0() { return cProcessconfigProcessConfigParserRuleCall_10_0; }
		
		//processinit=ProcessInit?
		public Assignment getProcessinitAssignment_11() { return cProcessinitAssignment_11; }
		
		//ProcessInit
		public RuleCall getProcessinitProcessInitParserRuleCall_11_0() { return cProcessinitProcessInitParserRuleCall_11_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNumAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumNumValueParserRuleCall_0_1_0 = (RuleCall)cNumAssignment_0_1.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBoolBoolValueParserRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		private final Assignment cNondefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cNondefQuestionMarkKeyword_2_0 = (Keyword)cNondefAssignment_2.eContents().get(0);
		private final Assignment cListAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cListListDefParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		//Value:
		//	{Value} num=NumValue | bool=BoolValue | nondef='?' | list=ListDef;
		@Override public ParserRule getRule() { return rule; }
		
		//{Value} num=NumValue | bool=BoolValue | nondef='?' | list=ListDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Value} num=NumValue
		public Group getGroup_0() { return cGroup_0; }
		
		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }
		
		//num=NumValue
		public Assignment getNumAssignment_0_1() { return cNumAssignment_0_1; }
		
		//NumValue
		public RuleCall getNumNumValueParserRuleCall_0_1_0() { return cNumNumValueParserRuleCall_0_1_0; }
		
		//bool=BoolValue
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//BoolValue
		public RuleCall getBoolBoolValueParserRuleCall_1_0() { return cBoolBoolValueParserRuleCall_1_0; }
		
		//nondef='?'
		public Assignment getNondefAssignment_2() { return cNondefAssignment_2; }
		
		//'?'
		public Keyword getNondefQuestionMarkKeyword_2_0() { return cNondefQuestionMarkKeyword_2_0; }
		
		//list=ListDef
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//ListDef
		public RuleCall getListListDefParserRuleCall_3_0() { return cListListDefParserRuleCall_3_0; }
	}
	public class ListDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ListDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cListListParserRuleCall_2_1_0 = (RuleCall)cListAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListDef:
		//	'[' list+=List (',' list+=List)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' list+=List (',' list+=List)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list+=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }
		
		//(',' list+=List)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//list+=List
		public Assignment getListAssignment_2_1() { return cListAssignment_2_1; }
		
		//List
		public RuleCall getListListParserRuleCall_2_1_0() { return cListListParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.List");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRangeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRangeRangeParserRuleCall_0_0 = (RuleCall)cRangeAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumNumValueParserRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cBoolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBoolBoolValueParserRuleCall_3_0 = (RuleCall)cBoolAssignment_3.eContents().get(0);
		
		//List:
		//	range=Range | num=NumValue | id=ID | bool=BoolValue;
		@Override public ParserRule getRule() { return rule; }
		
		//range=Range | num=NumValue | id=ID | bool=BoolValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//range=Range
		public Assignment getRangeAssignment_0() { return cRangeAssignment_0; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_0_0() { return cRangeRangeParserRuleCall_0_0; }
		
		//num=NumValue
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//NumValue
		public RuleCall getNumNumValueParserRuleCall_1_0() { return cNumNumValueParserRuleCall_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//bool=BoolValue
		public Assignment getBoolAssignment_3() { return cBoolAssignment_3; }
		
		//BoolValue
		public RuleCall getBoolBoolValueParserRuleCall_3_0() { return cBoolBoolValueParserRuleCall_3_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartNumValueParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndNumValueParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//Range:
		//	start=NumValue '..' end=NumValue;
		@Override public ParserRule getRule() { return rule; }
		
		//start=NumValue '..' end=NumValue
		public Group getGroup() { return cGroup; }
		
		//start=NumValue
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//NumValue
		public RuleCall getStartNumValueParserRuleCall_0_0() { return cStartNumValueParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//end=NumValue
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//NumValue
		public RuleCall getEndNumValueParserRuleCall_2_0() { return cEndNumValueParserRuleCall_2_0; }
	}
	public class NumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.NumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinusAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMinusHyphenMinusKeyword_0_0 = (Keyword)cMinusAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NumValue:
		//	minus='-'? value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//minus='-'? value=INT
		public Group getGroup() { return cGroup; }
		
		//minus='-'?
		public Assignment getMinusAssignment_0() { return cMinusAssignment_0; }
		
		//'-'
		public Keyword getMinusHyphenMinusKeyword_0_0() { return cMinusHyphenMinusKeyword_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.BoolValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BoolValue:
		//	value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class ProcessDataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessDataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessDataDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAttributeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesProcessPropertyDefParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessDataDef:
		//	{ProcessDataDef} 'attribute' '{' properties+=ProcessPropertyDef* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessDataDef} 'attribute' '{' properties+=ProcessPropertyDef* '}'
		public Group getGroup() { return cGroup; }
		
		//{ProcessDataDef}
		public Action getProcessDataDefAction_0() { return cProcessDataDefAction_0; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1() { return cAttributeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//properties+=ProcessPropertyDef*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//ProcessPropertyDef
		public RuleCall getPropertiesProcessPropertyDefParserRuleCall_3_0() { return cPropertiesProcessPropertyDefParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProcessPropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessPropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessPropertyDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cVarVarKeyword_1_0_0 = (Keyword)cVarAssignment_1_0.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cValValKeyword_1_1_0 = (Keyword)cValAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVariableTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameProcessPropertyNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameProcessPropertyNameParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPvalueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPvalueValueParserRuleCall_5_1_0 = (RuleCall)cPvalueAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcessPropertyDef:
		//	{ProcessPropertyDef} (var?='var' | val?='val')? type=VariableType name+=ProcessPropertyName (','
		//	name+=ProcessPropertyName)* ('=' pvalue=Value)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessPropertyDef} (var?='var' | val?='val')? type=VariableType name+=ProcessPropertyName (','
		//name+=ProcessPropertyName)* ('=' pvalue=Value)? ';'
		public Group getGroup() { return cGroup; }
		
		//{ProcessPropertyDef}
		public Action getProcessPropertyDefAction_0() { return cProcessPropertyDefAction_0; }
		
		//(var?='var' | val?='val')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//var?='var'
		public Assignment getVarAssignment_1_0() { return cVarAssignment_1_0; }
		
		//'var'
		public Keyword getVarVarKeyword_1_0_0() { return cVarVarKeyword_1_0_0; }
		
		//val?='val'
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//'val'
		public Keyword getValValKeyword_1_1_0() { return cValValKeyword_1_1_0; }
		
		//type=VariableType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_2_0() { return cTypeVariableTypeEnumRuleCall_2_0; }
		
		//name+=ProcessPropertyName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ProcessPropertyName
		public RuleCall getNameProcessPropertyNameParserRuleCall_3_0() { return cNameProcessPropertyNameParserRuleCall_3_0; }
		
		//(',' name+=ProcessPropertyName)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//name+=ProcessPropertyName
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }
		
		//ProcessPropertyName
		public RuleCall getNameProcessPropertyNameParserRuleCall_4_1_0() { return cNameProcessPropertyNameParserRuleCall_4_1_0; }
		
		//('=' pvalue=Value)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }
		
		//pvalue=Value
		public Assignment getPvalueAssignment_5_1() { return cPvalueAssignment_5_1; }
		
		//Value
		public RuleCall getPvalueValueParserRuleCall_5_1_0() { return cPvalueValueParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ProcessPropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessPropertyName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProcessPropertyName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProcessDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProctypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProctypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProctypeProcessParserRuleCall_1_0 = (RuleCall)cProctypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParalistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParalistParameterListParserRuleCall_3_0 = (RuleCall)cParalistAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertyassignmentAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertyassignmentPropertyAssignmentParserRuleCall_6_0 = (RuleCall)cPropertyassignmentAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ProcessDef:
		//	'proctype' proctype=Process '(' paralist=ParameterList? ')'
		//	'{'
		//	propertyassignment+=PropertyAssignment*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'proctype' proctype=Process '(' paralist=ParameterList? ')' '{' propertyassignment+=PropertyAssignment* '}'
		public Group getGroup() { return cGroup; }
		
		//'proctype'
		public Keyword getProctypeKeyword_0() { return cProctypeKeyword_0; }
		
		//proctype=Process
		public Assignment getProctypeAssignment_1() { return cProctypeAssignment_1; }
		
		//Process
		public RuleCall getProctypeProcessParserRuleCall_1_0() { return cProctypeProcessParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//paralist=ParameterList?
		public Assignment getParalistAssignment_3() { return cParalistAssignment_3; }
		
		//ParameterList
		public RuleCall getParalistParameterListParserRuleCall_3_0() { return cParalistParameterListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//propertyassignment+=PropertyAssignment*
		public Assignment getPropertyassignmentAssignment_6() { return cPropertyassignmentAssignment_6; }
		
		//PropertyAssignment
		public RuleCall getPropertyassignmentPropertyAssignmentParserRuleCall_6_0() { return cPropertyassignmentPropertyAssignmentParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParaParameterAssignParserRuleCall_0_0 = (RuleCall)cParaAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParaParameterAssignParserRuleCall_1_1_0 = (RuleCall)cParaAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	para+=ParameterAssign (';' para+=ParameterAssign)*;
		@Override public ParserRule getRule() { return rule; }
		
		//para+=ParameterAssign (';' para+=ParameterAssign)*
		public Group getGroup() { return cGroup; }
		
		//para+=ParameterAssign
		public Assignment getParaAssignment_0() { return cParaAssignment_0; }
		
		//ParameterAssign
		public RuleCall getParaParameterAssignParserRuleCall_0_0() { return cParaParameterAssignParserRuleCall_0_0; }
		
		//(';' para+=ParameterAssign)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//para+=ParameterAssign
		public Assignment getParaAssignment_1_1() { return cParaAssignment_1_1; }
		
		//ParameterAssign
		public RuleCall getParaParameterAssignParserRuleCall_1_1_0() { return cParaParameterAssignParserRuleCall_1_1_0; }
	}
	public class ParameterAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ParameterAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParanameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParanameParameterNameParserRuleCall_1_0 = (RuleCall)cParanameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParanameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParanameParameterNameParserRuleCall_2_1_0 = (RuleCall)cParanameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValValueParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		
		//ParameterAssign:
		//	type=VariableType paraname+=ParameterName (',' paraname+=ParameterName)* ('=' val=Value)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType paraname+=ParameterName (',' paraname+=ParameterName)* ('=' val=Value)?
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_0_0() { return cTypeVariableTypeEnumRuleCall_0_0; }
		
		//paraname+=ParameterName
		public Assignment getParanameAssignment_1() { return cParanameAssignment_1; }
		
		//ParameterName
		public RuleCall getParanameParameterNameParserRuleCall_1_0() { return cParanameParameterNameParserRuleCall_1_0; }
		
		//(',' paraname+=ParameterName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//paraname+=ParameterName
		public Assignment getParanameAssignment_2_1() { return cParanameAssignment_2_1; }
		
		//ParameterName
		public RuleCall getParanameParameterNameParserRuleCall_2_1_0() { return cParanameParameterNameParserRuleCall_2_1_0; }
		
		//('=' val=Value)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//val=Value
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//Value
		public RuleCall getValValueParserRuleCall_3_1_0() { return cValValueParserRuleCall_3_1_0; }
	}
	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ParameterName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ParameterName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Process");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Process:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PropertyAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PropertyAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cThisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPropersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropersProcessPropertyNameParserRuleCall_2_0 = (RuleCall)cPropersAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cPvalueAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cPvalueValueParserRuleCall_4_0_0 = (RuleCall)cPvalueAssignment_4_0.eContents().get(0);
		private final Assignment cPnameAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPnameParameterNameParserRuleCall_4_1_0 = (RuleCall)cPnameAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyAssignment:
		//	{PropertyAssignment} ('this' '.')? propers=ProcessPropertyName '=' (pvalue=Value | pname=ParameterName) ';'
		//	//	name = QualifiedNames '=' (pvalue = Value | pname = [ParameterName]) ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertyAssignment} ('this' '.')? propers=ProcessPropertyName '=' (pvalue=Value | pname=ParameterName) ';'
		public Group getGroup() { return cGroup; }
		
		//{PropertyAssignment}
		public Action getPropertyAssignmentAction_0() { return cPropertyAssignmentAction_0; }
		
		//('this' '.')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'this'
		public Keyword getThisKeyword_1_0() { return cThisKeyword_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//propers=ProcessPropertyName
		public Assignment getPropersAssignment_2() { return cPropersAssignment_2; }
		
		//ProcessPropertyName
		public RuleCall getPropersProcessPropertyNameParserRuleCall_2_0() { return cPropersProcessPropertyNameParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(pvalue=Value | pname=ParameterName)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//pvalue=Value
		public Assignment getPvalueAssignment_4_0() { return cPvalueAssignment_4_0; }
		
		//Value
		public RuleCall getPvalueValueParserRuleCall_4_0_0() { return cPvalueValueParserRuleCall_4_0_0; }
		
		//pname=ParameterName
		public Assignment getPnameAssignment_4_1() { return cPnameAssignment_4_1; }
		
		//ParameterName
		public RuleCall getPnameParameterNameParserRuleCall_4_1_0() { return cPnameParameterNameParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ProcessConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessConfig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessConfigAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcinitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcinitConfigProcessParserRuleCall_3_0 = (RuleCall)cProcinitAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProcessConfig:
		//	{ProcessConfig}
		//	'config' '{'
		//	procinit+=ConfigProcess*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessConfig} 'config' '{' procinit+=ConfigProcess* '}'
		public Group getGroup() { return cGroup; }
		
		//{ProcessConfig}
		public Action getProcessConfigAction_0() { return cProcessConfigAction_0; }
		
		//'config'
		public Keyword getConfigKeyword_1() { return cConfigKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//procinit+=ConfigProcess*
		public Assignment getProcinitAssignment_3() { return cProcinitAssignment_3; }
		
		//ConfigProcess
		public RuleCall getProcinitConfigProcessParserRuleCall_3_0() { return cProcinitConfigProcessParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ConfigProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ConfigProcess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSporadicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSporadicSporadicProcessParserRuleCall_0_0 = (RuleCall)cSporadicAssignment_0.eContents().get(0);
		private final Assignment cPeriodicAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPeriodicPeriodicProcessParserRuleCall_1_0 = (RuleCall)cPeriodicAssignment_1.eContents().get(0);
		
		//ConfigProcess:
		//	sporadic=SporadicProcess | periodic=PeriodicProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//sporadic=SporadicProcess | periodic=PeriodicProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sporadic=SporadicProcess
		public Assignment getSporadicAssignment_0() { return cSporadicAssignment_0; }
		
		//SporadicProcess
		public RuleCall getSporadicSporadicProcessParserRuleCall_0_0() { return cSporadicSporadicProcessParserRuleCall_0_0; }
		
		//periodic=PeriodicProcess
		public Assignment getPeriodicAssignment_1() { return cPeriodicAssignment_1; }
		
		//PeriodicProcess
		public RuleCall getPeriodicPeriodicProcessParserRuleCall_1_0() { return cPeriodicPeriodicProcessParserRuleCall_1_0; }
	}
	public class SporadicProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SporadicProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSporadicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartINTTerminalRuleCall_5_0 = (RuleCall)cStartAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndINTTerminalRuleCall_7_0 = (RuleCall)cEndAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLimitedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cMaxAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_9_1_0 = (RuleCall)cMaxAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//SporadicProcess:
		//	'sporadic' 'process' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'sporadic' 'process' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';'
		public Group getGroup() { return cGroup; }
		
		//'sporadic'
		public Keyword getSporadicKeyword_0() { return cSporadicKeyword_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//start=INT
		public Assignment getStartAssignment_5() { return cStartAssignment_5; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_5_0() { return cStartINTTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//end=INT
		public Assignment getEndAssignment_7() { return cEndAssignment_7; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_7_0() { return cEndINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//('limited' max=INT)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'limited'
		public Keyword getLimitedKeyword_9_0() { return cLimitedKeyword_9_0; }
		
		//max=INT
		public Assignment getMaxAssignment_9_1() { return cMaxAssignment_9_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_9_1_0() { return cMaxINTTerminalRuleCall_9_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class PeriodicProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PeriodicProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPeriodicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cOffsetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOffsetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOffsetNumValueParserRuleCall_5_0 = (RuleCall)cOffsetAssignment_5.eContents().get(0);
		private final Keyword cPeriodKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPeriodAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPeriodNumValueParserRuleCall_8_0 = (RuleCall)cPeriodAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLimitedKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cMaxAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_9_1_0 = (RuleCall)cMaxAssignment_9_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//PeriodicProcess:
		//	'periodic' 'process' element=Element 'offset' '=' offset=NumValue 'period' '=' period=NumValue ('limited' max=INT)?
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//'periodic' 'process' element=Element 'offset' '=' offset=NumValue 'period' '=' period=NumValue ('limited' max=INT)? ';'
		public Group getGroup() { return cGroup; }
		
		//'periodic'
		public Keyword getPeriodicKeyword_0() { return cPeriodicKeyword_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//'offset'
		public Keyword getOffsetKeyword_3() { return cOffsetKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//offset=NumValue
		public Assignment getOffsetAssignment_5() { return cOffsetAssignment_5; }
		
		//NumValue
		public RuleCall getOffsetNumValueParserRuleCall_5_0() { return cOffsetNumValueParserRuleCall_5_0; }
		
		//'period'
		public Keyword getPeriodKeyword_6() { return cPeriodKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//period=NumValue
		public Assignment getPeriodAssignment_8() { return cPeriodAssignment_8; }
		
		//NumValue
		public RuleCall getPeriodNumValueParserRuleCall_8_0() { return cPeriodNumValueParserRuleCall_8_0; }
		
		//('limited' max=INT)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'limited'
		public Keyword getLimitedKeyword_9_0() { return cLimitedKeyword_9_0; }
		
		//max=INT
		public Assignment getMaxAssignment_9_1() { return cMaxAssignment_9_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_9_1_0() { return cMaxINTTerminalRuleCall_9_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}
	public class ProcessInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOrderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOrderSetParserRuleCall_3_0 = (RuleCall)cOrderAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrderSetParserRuleCall_4_1_0 = (RuleCall)cOrderAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProcessInit:
		//	'init' '{'
		//	'[' order+=Set (',' order+=Set)* ']'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'init' '{' '[' order+=Set (',' order+=Set)* ']' '}'
		public Group getGroup() { return cGroup; }
		
		//'init'
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//order+=Set
		public Assignment getOrderAssignment_3() { return cOrderAssignment_3; }
		
		//Set
		public RuleCall getOrderSetParserRuleCall_3_0() { return cOrderSetParserRuleCall_3_0; }
		
		//(',' order+=Set)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//order+=Set
		public Assignment getOrderAssignment_4_1() { return cOrderAssignment_4_1; }
		
		//Set
		public RuleCall getOrderSetParserRuleCall_4_1_0() { return cOrderSetParserRuleCall_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSetLeftCurlyBracketKeyword_0_0 = (Keyword)cSetAssignment_0.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_2_1_0 = (RuleCall)cElementAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Set:
		//	set='{' element+=Element (',' element+=Element)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//set='{' element+=Element (',' element+=Element)* '}'
		public Group getGroup() { return cGroup; }
		
		//set='{'
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }
		
		//'{'
		public Keyword getSetLeftCurlyBracketKeyword_0_0() { return cSetLeftCurlyBracketKeyword_0_0; }
		
		//element+=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
		
		//(',' element+=Element)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//element+=Element
		public Assignment getElementAssignment_2_1() { return cElementAssignment_2_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_1_0() { return cElementElementParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessProcessParserRuleCall_0_0 = (RuleCall)cProcessAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParaAssignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParaAssignValueParserRuleCall_2_0_0 = (RuleCall)cParaAssignAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParaAssignAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParaAssignValueParserRuleCall_2_1_1_0 = (RuleCall)cParaAssignAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Element:
		//	process=Process '(' (paraAssign+=Value (',' paraAssign+=Value)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//process=Process '(' (paraAssign+=Value (',' paraAssign+=Value)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//process=Process
		public Assignment getProcessAssignment_0() { return cProcessAssignment_0; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_0_0() { return cProcessProcessParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(paraAssign+=Value (',' paraAssign+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//paraAssign+=Value
		public Assignment getParaAssignAssignment_2_0() { return cParaAssignAssignment_2_0; }
		
		//Value
		public RuleCall getParaAssignValueParserRuleCall_2_0_0() { return cParaAssignValueParserRuleCall_2_0_0; }
		
		//(',' paraAssign+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//paraAssign+=Value
		public Assignment getParaAssignAssignment_2_1_1() { return cParaAssignAssignment_2_1_1; }
		
		//Value
		public RuleCall getParaAssignValueParserRuleCall_2_1_1_0() { return cParaAssignValueParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SchedulerDSLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerDSL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefcoreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefcoreDefCoreParserRuleCall_0_0 = (RuleCall)cDefcoreAssignment_0.eContents().get(0);
		private final Assignment cSchedulerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSchedulerSchedulerDefParserRuleCall_1_0 = (RuleCall)cSchedulerAssignment_1.eContents().get(0);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderOrderingDefParserRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		private final Assignment cVerifyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVerifyVerifyParserRuleCall_3_0 = (RuleCall)cVerifyAssignment_3.eContents().get(0);
		
		////............................................
		//SchedulerDSL:
		//	defcore=DefCore?
		//	scheduler=SchedulerDef
		//	order=OrderingDef?
		//	verify=Verify?
		//	//gentemplate = GenTemplate?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//defcore=DefCore? scheduler=SchedulerDef order=OrderingDef? verify=Verify?
		public Group getGroup() { return cGroup; }
		
		//defcore=DefCore?
		public Assignment getDefcoreAssignment_0() { return cDefcoreAssignment_0; }
		
		//DefCore
		public RuleCall getDefcoreDefCoreParserRuleCall_0_0() { return cDefcoreDefCoreParserRuleCall_0_0; }
		
		//scheduler=SchedulerDef
		public Assignment getSchedulerAssignment_1() { return cSchedulerAssignment_1; }
		
		//SchedulerDef
		public RuleCall getSchedulerSchedulerDefParserRuleCall_1_0() { return cSchedulerSchedulerDefParserRuleCall_1_0; }
		
		//order=OrderingDef?
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }
		
		//OrderingDef
		public RuleCall getOrderOrderingDefParserRuleCall_2_0() { return cOrderOrderingDefParserRuleCall_2_0; }
		
		//verify=Verify?
		public Assignment getVerifyAssignment_3() { return cVerifyAssignment_3; }
		
		//Verify
		public RuleCall getVerifyVerifyParserRuleCall_3_0() { return cVerifyVerifyParserRuleCall_3_0; }
	}
	public class DefCoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DefCore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNum_coreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumcoreAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumcoreINTTerminalRuleCall_4_0 = (RuleCall)cNumcoreAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DefCore:
		//	'#' 'def' 'num_core' '=' numcore=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'#' 'def' 'num_core' '=' numcore=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//'num_core'
		public Keyword getNum_coreKeyword_2() { return cNum_coreKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//numcore=INT
		public Assignment getNumcoreAssignment_4() { return cNumcoreAssignment_4; }
		
		//INT
		public RuleCall getNumcoreINTTerminalRuleCall_4_0() { return cNumcoreINTTerminalRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class RTCTLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.RTCTL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cOpLeftParenthesisKeyword_0_0_0 = (Keyword)cOpAssignment_0_0.eContents().get(0);
		private final Assignment cExpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_0_1_0 = (RuleCall)cExpAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOpNotKeyword_1_0_0 = (Keyword)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cFAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFRTCTLParserRuleCall_1_1_0 = (RuleCall)cFAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cOpOrKeyword_2_0_0 = (Keyword)cOpAssignment_2_0.eContents().get(0);
		private final Assignment cF1Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cF1RTCTLParserRuleCall_2_1_0 = (RuleCall)cF1Assignment_2_1.eContents().get(0);
		private final Assignment cF2Assignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cF2RTCTLParserRuleCall_2_2_0 = (RuleCall)cF2Assignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cOpImpliesKeyword_3_0_0 = (Keyword)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cF1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cF1RTCTLParserRuleCall_3_1_0 = (RuleCall)cF1Assignment_3_1.eContents().get(0);
		private final Assignment cF2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cF2RTCTLParserRuleCall_3_2_0 = (RuleCall)cF2Assignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cOpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOpAXKeyword_4_0_0 = (Keyword)cOpAssignment_4_0.eContents().get(0);
		private final Assignment cFAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFRTCTLParserRuleCall_4_1_0 = (RuleCall)cFAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOpAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOpAFKeyword_5_0_0 = (Keyword)cOpAssignment_5_0.eContents().get(0);
		private final Assignment cLteAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_5_1_0 = (RuleCall)cLteAssignment_5_1.eContents().get(0);
		private final Assignment cFAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cFRTCTLParserRuleCall_5_2_0 = (RuleCall)cFAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOpAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cOpAGKeyword_6_0_0 = (Keyword)cOpAssignment_6_0.eContents().get(0);
		private final Assignment cLteAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_6_1_0 = (RuleCall)cLteAssignment_6_1.eContents().get(0);
		private final Assignment cFAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFRTCTLParserRuleCall_6_2_0 = (RuleCall)cFAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cOpAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cOpEXKeyword_7_0_0 = (Keyword)cOpAssignment_7_0.eContents().get(0);
		private final Assignment cFAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFRTCTLParserRuleCall_7_1_0 = (RuleCall)cFAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cOpAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cOpEFKeyword_8_0_0 = (Keyword)cOpAssignment_8_0.eContents().get(0);
		private final Assignment cLteAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_8_1_0 = (RuleCall)cLteAssignment_8_1.eContents().get(0);
		private final Assignment cFAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cFRTCTLParserRuleCall_8_2_0 = (RuleCall)cFAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cOpAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cOpEGKeyword_9_0_0 = (Keyword)cOpAssignment_9_0.eContents().get(0);
		private final Assignment cLteAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_9_1_0 = (RuleCall)cLteAssignment_9_1.eContents().get(0);
		private final Assignment cFAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cFRTCTLParserRuleCall_9_2_0 = (RuleCall)cFAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cOpAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cOpAUKeyword_10_0_0 = (Keyword)cOpAssignment_10_0.eContents().get(0);
		private final Assignment cLteAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_10_1_0 = (RuleCall)cLteAssignment_10_1.eContents().get(0);
		private final Assignment cF1Assignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cF1RTCTLParserRuleCall_10_2_0 = (RuleCall)cF1Assignment_10_2.eContents().get(0);
		private final Assignment cF2Assignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cF2RTCTLParserRuleCall_10_3_0 = (RuleCall)cF2Assignment_10_3.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cOpAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cOpEUKeyword_11_0_0 = (Keyword)cOpAssignment_11_0.eContents().get(0);
		private final Assignment cLteAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cLteLTEParserRuleCall_11_1_0 = (RuleCall)cLteAssignment_11_1.eContents().get(0);
		private final Assignment cF1Assignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cF1RTCTLParserRuleCall_11_2_0 = (RuleCall)cF1Assignment_11_2.eContents().get(0);
		private final Assignment cF2Assignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cF2RTCTLParserRuleCall_11_3_0 = (RuleCall)cF2Assignment_11_3.eContents().get(0);
		
		////---------------------------------------------------------------------------------
		////RTCTL formula
		//RTCTL:
		//	op='(' exp=Expression ')' | op='not' f=RTCTL | op='or' f1=RTCTL f2=RTCTL | op='implies' f1=RTCTL f2=RTCTL | op='AX'
		//	f=RTCTL | op='AF' lte=LTE? f=RTCTL | op='AG' lte=LTE? f=RTCTL | op='EX' f=RTCTL | op='EF' lte=LTE? f=RTCTL | op='EG'
		//	lte=LTE? f=RTCTL | op='AU' lte=LTE? f1=RTCTL f2=RTCTL | op='EU' lte=LTE? f1=RTCTL f2=RTCTL;
		@Override public ParserRule getRule() { return rule; }
		
		//op='(' exp=Expression ')' | op='not' f=RTCTL | op='or' f1=RTCTL f2=RTCTL | op='implies' f1=RTCTL f2=RTCTL | op='AX'
		//f=RTCTL | op='AF' lte=LTE? f=RTCTL | op='AG' lte=LTE? f=RTCTL | op='EX' f=RTCTL | op='EF' lte=LTE? f=RTCTL | op='EG'
		//lte=LTE? f=RTCTL | op='AU' lte=LTE? f1=RTCTL f2=RTCTL | op='EU' lte=LTE? f1=RTCTL f2=RTCTL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op='(' exp=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//op='('
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }
		
		//'('
		public Keyword getOpLeftParenthesisKeyword_0_0_0() { return cOpLeftParenthesisKeyword_0_0_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_0_1() { return cExpAssignment_0_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_0_1_0() { return cExpExpressionParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//op='not' f=RTCTL
		public Group getGroup_1() { return cGroup_1; }
		
		//op='not'
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//'not'
		public Keyword getOpNotKeyword_1_0_0() { return cOpNotKeyword_1_0_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_1_1() { return cFAssignment_1_1; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_1_1_0() { return cFRTCTLParserRuleCall_1_1_0; }
		
		//op='or' f1=RTCTL f2=RTCTL
		public Group getGroup_2() { return cGroup_2; }
		
		//op='or'
		public Assignment getOpAssignment_2_0() { return cOpAssignment_2_0; }
		
		//'or'
		public Keyword getOpOrKeyword_2_0_0() { return cOpOrKeyword_2_0_0; }
		
		//f1=RTCTL
		public Assignment getF1Assignment_2_1() { return cF1Assignment_2_1; }
		
		//RTCTL
		public RuleCall getF1RTCTLParserRuleCall_2_1_0() { return cF1RTCTLParserRuleCall_2_1_0; }
		
		//f2=RTCTL
		public Assignment getF2Assignment_2_2() { return cF2Assignment_2_2; }
		
		//RTCTL
		public RuleCall getF2RTCTLParserRuleCall_2_2_0() { return cF2RTCTLParserRuleCall_2_2_0; }
		
		//op='implies' f1=RTCTL f2=RTCTL
		public Group getGroup_3() { return cGroup_3; }
		
		//op='implies'
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }
		
		//'implies'
		public Keyword getOpImpliesKeyword_3_0_0() { return cOpImpliesKeyword_3_0_0; }
		
		//f1=RTCTL
		public Assignment getF1Assignment_3_1() { return cF1Assignment_3_1; }
		
		//RTCTL
		public RuleCall getF1RTCTLParserRuleCall_3_1_0() { return cF1RTCTLParserRuleCall_3_1_0; }
		
		//f2=RTCTL
		public Assignment getF2Assignment_3_2() { return cF2Assignment_3_2; }
		
		//RTCTL
		public RuleCall getF2RTCTLParserRuleCall_3_2_0() { return cF2RTCTLParserRuleCall_3_2_0; }
		
		//op='AX' f=RTCTL
		public Group getGroup_4() { return cGroup_4; }
		
		//op='AX'
		public Assignment getOpAssignment_4_0() { return cOpAssignment_4_0; }
		
		//'AX'
		public Keyword getOpAXKeyword_4_0_0() { return cOpAXKeyword_4_0_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_4_1() { return cFAssignment_4_1; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_4_1_0() { return cFRTCTLParserRuleCall_4_1_0; }
		
		//op='AF' lte=LTE? f=RTCTL
		public Group getGroup_5() { return cGroup_5; }
		
		//op='AF'
		public Assignment getOpAssignment_5_0() { return cOpAssignment_5_0; }
		
		//'AF'
		public Keyword getOpAFKeyword_5_0_0() { return cOpAFKeyword_5_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_5_1() { return cLteAssignment_5_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_5_1_0() { return cLteLTEParserRuleCall_5_1_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_5_2() { return cFAssignment_5_2; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_5_2_0() { return cFRTCTLParserRuleCall_5_2_0; }
		
		//op='AG' lte=LTE? f=RTCTL
		public Group getGroup_6() { return cGroup_6; }
		
		//op='AG'
		public Assignment getOpAssignment_6_0() { return cOpAssignment_6_0; }
		
		//'AG'
		public Keyword getOpAGKeyword_6_0_0() { return cOpAGKeyword_6_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_6_1() { return cLteAssignment_6_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_6_1_0() { return cLteLTEParserRuleCall_6_1_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_6_2() { return cFAssignment_6_2; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_6_2_0() { return cFRTCTLParserRuleCall_6_2_0; }
		
		//op='EX' f=RTCTL
		public Group getGroup_7() { return cGroup_7; }
		
		//op='EX'
		public Assignment getOpAssignment_7_0() { return cOpAssignment_7_0; }
		
		//'EX'
		public Keyword getOpEXKeyword_7_0_0() { return cOpEXKeyword_7_0_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_7_1() { return cFAssignment_7_1; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_7_1_0() { return cFRTCTLParserRuleCall_7_1_0; }
		
		//op='EF' lte=LTE? f=RTCTL
		public Group getGroup_8() { return cGroup_8; }
		
		//op='EF'
		public Assignment getOpAssignment_8_0() { return cOpAssignment_8_0; }
		
		//'EF'
		public Keyword getOpEFKeyword_8_0_0() { return cOpEFKeyword_8_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_8_1() { return cLteAssignment_8_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_8_1_0() { return cLteLTEParserRuleCall_8_1_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_8_2() { return cFAssignment_8_2; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_8_2_0() { return cFRTCTLParserRuleCall_8_2_0; }
		
		//op='EG' lte=LTE? f=RTCTL
		public Group getGroup_9() { return cGroup_9; }
		
		//op='EG'
		public Assignment getOpAssignment_9_0() { return cOpAssignment_9_0; }
		
		//'EG'
		public Keyword getOpEGKeyword_9_0_0() { return cOpEGKeyword_9_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_9_1() { return cLteAssignment_9_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_9_1_0() { return cLteLTEParserRuleCall_9_1_0; }
		
		//f=RTCTL
		public Assignment getFAssignment_9_2() { return cFAssignment_9_2; }
		
		//RTCTL
		public RuleCall getFRTCTLParserRuleCall_9_2_0() { return cFRTCTLParserRuleCall_9_2_0; }
		
		//op='AU' lte=LTE? f1=RTCTL f2=RTCTL
		public Group getGroup_10() { return cGroup_10; }
		
		//op='AU'
		public Assignment getOpAssignment_10_0() { return cOpAssignment_10_0; }
		
		//'AU'
		public Keyword getOpAUKeyword_10_0_0() { return cOpAUKeyword_10_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_10_1() { return cLteAssignment_10_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_10_1_0() { return cLteLTEParserRuleCall_10_1_0; }
		
		//f1=RTCTL
		public Assignment getF1Assignment_10_2() { return cF1Assignment_10_2; }
		
		//RTCTL
		public RuleCall getF1RTCTLParserRuleCall_10_2_0() { return cF1RTCTLParserRuleCall_10_2_0; }
		
		//f2=RTCTL
		public Assignment getF2Assignment_10_3() { return cF2Assignment_10_3; }
		
		//RTCTL
		public RuleCall getF2RTCTLParserRuleCall_10_3_0() { return cF2RTCTLParserRuleCall_10_3_0; }
		
		//op='EU' lte=LTE? f1=RTCTL f2=RTCTL
		public Group getGroup_11() { return cGroup_11; }
		
		//op='EU'
		public Assignment getOpAssignment_11_0() { return cOpAssignment_11_0; }
		
		//'EU'
		public Keyword getOpEUKeyword_11_0_0() { return cOpEUKeyword_11_0_0; }
		
		//lte=LTE?
		public Assignment getLteAssignment_11_1() { return cLteAssignment_11_1; }
		
		//LTE
		public RuleCall getLteLTEParserRuleCall_11_1_0() { return cLteLTEParserRuleCall_11_1_0; }
		
		//f1=RTCTL
		public Assignment getF1Assignment_11_2() { return cF1Assignment_11_2; }
		
		//RTCTL
		public RuleCall getF1RTCTLParserRuleCall_11_2_0() { return cF1RTCTLParserRuleCall_11_2_0; }
		
		//f2=RTCTL
		public Assignment getF2Assignment_11_3() { return cF2Assignment_11_3; }
		
		//RTCTL
		public RuleCall getF2RTCTLParserRuleCall_11_3_0() { return cF2RTCTLParserRuleCall_11_3_0; }
	}
	public class LTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.LTE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		////
		////RTCTLOr returns RTCTL: 
		////	RTCTLImplies ({RTCTLOr.f1=current} op = '||' f2=RTCTLImplies)* 
		////;
		////
		////RTCTLImplies returns RTCTL: 
		////	RTCTL ({RTCTLImplies.f1=current} op = '=>' f2=RTCTL)* 
		////;
		//LTE:
		//	'<=' num=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'<=' num=INT
		public Group getGroup() { return cGroup; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }
		
		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }
	}
	public class CTL_ATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CTL_AT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CTL_AT:
		//	'@' cond=Expression ':';
		@Override public ParserRule getRule() { return rule; }
		
		//'@' cond=Expression ':'
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}
	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtCTL_ATParserRuleCall_2_0 = (RuleCall)cAtAssignment_2.eContents().get(0);
		private final Assignment cFormulaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFormulaRTCTLParserRuleCall_3_0 = (RuleCall)cFormulaAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Verify:
		//	'verify' '{' at=CTL_AT? formula=RTCTL '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'verify' '{' at=CTL_AT? formula=RTCTL '}'
		public Group getGroup() { return cGroup; }
		
		//'verify'
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//at=CTL_AT?
		public Assignment getAtAssignment_2() { return cAtAssignment_2; }
		
		//CTL_AT
		public RuleCall getAtCTL_ATParserRuleCall_2_0() { return cAtCTL_ATParserRuleCall_2_0; }
		
		//formula=RTCTL
		public Assignment getFormulaAssignment_3() { return cFormulaAssignment_3; }
		
		//RTCTL
		public RuleCall getFormulaRTCTLParserRuleCall_3_0() { return cFormulaRTCTLParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OrderingDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.OrderingDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderingDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComparatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarsCompVarDefParserRuleCall_3_0 = (RuleCall)cVarsAssignment_3.eContents().get(0);
		private final Assignment cCompareAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCompareComparationDefParserRuleCall_4_0 = (RuleCall)cCompareAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OrderingDef:
		//	{OrderingDef}
		//	'comparator' '{'
		//	vars=CompVarDef?
		//	compare+=ComparationDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrderingDef} 'comparator' '{' vars=CompVarDef? compare+=ComparationDef* '}'
		public Group getGroup() { return cGroup; }
		
		//{OrderingDef}
		public Action getOrderingDefAction_0() { return cOrderingDefAction_0; }
		
		//'comparator'
		public Keyword getComparatorKeyword_1() { return cComparatorKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//vars=CompVarDef?
		public Assignment getVarsAssignment_3() { return cVarsAssignment_3; }
		
		//CompVarDef
		public RuleCall getVarsCompVarDefParserRuleCall_3_0() { return cVarsCompVarDefParserRuleCall_3_0; }
		
		//compare+=ComparationDef*
		public Assignment getCompareAssignment_4() { return cCompareAssignment_4; }
		
		//ComparationDef
		public RuleCall getCompareComparationDefParserRuleCall_4_0() { return cCompareComparationDefParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CompVarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CompVarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVardCompVarDefinationParserRuleCall_3_0 = (RuleCall)cVardAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompVarDef:
		//	{CompVarDef} 'variable' '{' vard+=CompVarDefination* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CompVarDef} 'variable' '{' vard+=CompVarDefination* '}'
		public Group getGroup() { return cGroup; }
		
		//{CompVarDef}
		public Action getCompVarDefAction_0() { return cCompVarDefAction_0; }
		
		//'variable'
		public Keyword getVariableKeyword_1() { return cVariableKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//vard+=CompVarDefination*
		public Assignment getVardAssignment_3() { return cVardAssignment_3; }
		
		//CompVarDefination
		public RuleCall getVardCompVarDefinationParserRuleCall_3_0() { return cVardCompVarDefinationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CompVarDefinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CompVarDefination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameCompVarNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameCompVarNameParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPvalueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPvalueValueParserRuleCall_3_1_0 = (RuleCall)cPvalueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CompVarDefination:
		//	type=VariableType name+=CompVarName (',' name+=CompVarName)* ('=' pvalue=Value)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType name+=CompVarName (',' name+=CompVarName)* ('=' pvalue=Value)? ';'
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_0_0() { return cTypeVariableTypeEnumRuleCall_0_0; }
		
		//name+=CompVarName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//CompVarName
		public RuleCall getNameCompVarNameParserRuleCall_1_0() { return cNameCompVarNameParserRuleCall_1_0; }
		
		//(',' name+=CompVarName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=CompVarName
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//CompVarName
		public RuleCall getNameCompVarNameParserRuleCall_2_1_0() { return cNameCompVarNameParserRuleCall_2_1_0; }
		
		//('=' pvalue=Value)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//pvalue=Value
		public Assignment getPvalueAssignment_3_1() { return cPvalueAssignment_3_1; }
		
		//Value
		public RuleCall getPvalueValueParserRuleCall_3_1_0() { return cPvalueValueParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class CompVarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CompVarName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CompVarName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ComparationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ComparationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComparetypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCnameComparationNameParserRuleCall_1_0 = (RuleCall)cCnameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcess1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcess1ProcessParserRuleCall_4_0 = (RuleCall)cProcess1Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProcess2Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProcess2ProcessParserRuleCall_6_0 = (RuleCall)cProcess2Assignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsStatementParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ComparationDef:
		//	'comparetype' cname=ComparationName '(' 'process' process1=Process ',' process2=Process ')' '{'
		//	statements+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'comparetype' cname=ComparationName '(' 'process' process1=Process ',' process2=Process ')' '{' statements+=Statement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'comparetype'
		public Keyword getComparetypeKeyword_0() { return cComparetypeKeyword_0; }
		
		//cname=ComparationName
		public Assignment getCnameAssignment_1() { return cCnameAssignment_1; }
		
		//ComparationName
		public RuleCall getCnameComparationNameParserRuleCall_1_0() { return cCnameComparationNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'process'
		public Keyword getProcessKeyword_3() { return cProcessKeyword_3; }
		
		//process1=Process
		public Assignment getProcess1Assignment_4() { return cProcess1Assignment_4; }
		
		//Process
		public RuleCall getProcess1ProcessParserRuleCall_4_0() { return cProcess1ProcessParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//process2=Process
		public Assignment getProcess2Assignment_6() { return cProcess2Assignment_6; }
		
		//Process
		public RuleCall getProcess2ProcessParserRuleCall_6_0() { return cProcess2ProcessParserRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_0() { return cStatementsStatementParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class ComparationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ComparationName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ComparationName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOrderTypeEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ReturnStatement:
		//	'return' value=OrderType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return' value=OrderType ';'
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//value=OrderType
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//OrderType
		public RuleCall getValueOrderTypeEnumRuleCall_1_0() { return cValueOrderTypeEnumRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SchedulerDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchedulerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterlistParameterListParserRuleCall_3_0 = (RuleCall)cParameterlistAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParentIDTerminalRuleCall_5_1_0 = (RuleCall)cParentAssignment_5_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cGenAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGenGenerateParserRuleCall_7_0 = (RuleCall)cGenAssignment_7.eContents().get(0);
		private final Assignment cSvarAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSvarVarDefParserRuleCall_8_0 = (RuleCall)cSvarAssignment_8.eContents().get(0);
		private final Assignment cSchedulerdataAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cSchedulerdataSchedulerDataDefParserRuleCall_9_0 = (RuleCall)cSchedulerdataAssignment_9.eContents().get(0);
		private final Assignment cSchedulerinitAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSchedulerinitSchedulerInitParserRuleCall_10_0 = (RuleCall)cSchedulerinitAssignment_10.eContents().get(0);
		private final Assignment cHandlerAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cHandlerHandlerDefParserRuleCall_11_0 = (RuleCall)cHandlerAssignment_11.eContents().get(0);
		private final Assignment cInterfaceAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInterfaceInterfaceDefParserRuleCall_12_0 = (RuleCall)cInterfaceAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//SchedulerDef:
		//	'scheduler' name=ID '(' parameterlist=ParameterList? ')' ('refines' parent=ID)? '{'
		//	gen=Generate?
		//	svar=VarDef?
		//	schedulerdata=SchedulerDataDef?
		//	schedulerinit=SchedulerInit?
		//	handler=HandlerDef?
		//	interface=InterfaceDef?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'scheduler' name=ID '(' parameterlist=ParameterList? ')' ('refines' parent=ID)? '{' gen=Generate? svar=VarDef?
		//schedulerdata=SchedulerDataDef? schedulerinit=SchedulerInit? handler=HandlerDef? interface=InterfaceDef? '}'
		public Group getGroup() { return cGroup; }
		
		//'scheduler'
		public Keyword getSchedulerKeyword_0() { return cSchedulerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameterlist=ParameterList?
		public Assignment getParameterlistAssignment_3() { return cParameterlistAssignment_3; }
		
		//ParameterList
		public RuleCall getParameterlistParameterListParserRuleCall_3_0() { return cParameterlistParameterListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('refines' parent=ID)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }
		
		//parent=ID
		public Assignment getParentAssignment_5_1() { return cParentAssignment_5_1; }
		
		//ID
		public RuleCall getParentIDTerminalRuleCall_5_1_0() { return cParentIDTerminalRuleCall_5_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//gen=Generate?
		public Assignment getGenAssignment_7() { return cGenAssignment_7; }
		
		//Generate
		public RuleCall getGenGenerateParserRuleCall_7_0() { return cGenGenerateParserRuleCall_7_0; }
		
		//svar=VarDef?
		public Assignment getSvarAssignment_8() { return cSvarAssignment_8; }
		
		//VarDef
		public RuleCall getSvarVarDefParserRuleCall_8_0() { return cSvarVarDefParserRuleCall_8_0; }
		
		//schedulerdata=SchedulerDataDef?
		public Assignment getSchedulerdataAssignment_9() { return cSchedulerdataAssignment_9; }
		
		//SchedulerDataDef
		public RuleCall getSchedulerdataSchedulerDataDefParserRuleCall_9_0() { return cSchedulerdataSchedulerDataDefParserRuleCall_9_0; }
		
		//schedulerinit=SchedulerInit?
		public Assignment getSchedulerinitAssignment_10() { return cSchedulerinitAssignment_10; }
		
		//SchedulerInit
		public RuleCall getSchedulerinitSchedulerInitParserRuleCall_10_0() { return cSchedulerinitSchedulerInitParserRuleCall_10_0; }
		
		//handler=HandlerDef?
		public Assignment getHandlerAssignment_11() { return cHandlerAssignment_11; }
		
		//HandlerDef
		public RuleCall getHandlerHandlerDefParserRuleCall_11_0() { return cHandlerHandlerDefParserRuleCall_11_0; }
		
		//interface=InterfaceDef?
		public Assignment getInterfaceAssignment_12() { return cInterfaceAssignment_12; }
		
		//InterfaceDef
		public RuleCall getInterfaceInterfaceDefParserRuleCall_12_0() { return cInterfaceInterfaceDefParserRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class SchedulerInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchedulerInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSchedulerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitstmAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitstmStatementParserRuleCall_4_0 = (RuleCall)cInitstmAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SchedulerInit:
		//	{SchedulerInit} 'scheduler' 'init' '{' initstm+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SchedulerInit} 'scheduler' 'init' '{' initstm+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{SchedulerInit}
		public Action getSchedulerInitAction_0() { return cSchedulerInitAction_0; }
		
		//'scheduler'
		public Keyword getSchedulerKeyword_1() { return cSchedulerKeyword_1; }
		
		//'init'
		public Keyword getInitKeyword_2() { return cInitKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//initstm+=Statement*
		public Assignment getInitstmAssignment_4() { return cInitstmAssignment_4; }
		
		//Statement
		public RuleCall getInitstmStatementParserRuleCall_4_0() { return cInitstmStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IfDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.IfDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfdefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfDef:
		//	'#' 'ifdef' '(' cond=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'#' 'ifdef' '(' cond=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//'ifdef'
		public Keyword getIfdefKeyword_1() { return cIfdefKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//cond=Expression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_0() { return cCondExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class InterfaceDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InterfaceDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterfacefunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterfacefunctionInterfaceFunctionParserRuleCall_3_0 = (RuleCall)cInterfacefunctionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceDef:
		//	{InterfaceDef}
		//	'interface' '{'
		//	interfacefunction+=InterfaceFunction*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{InterfaceDef} 'interface' '{' interfacefunction+=InterfaceFunction* '}'
		public Group getGroup() { return cGroup; }
		
		//{InterfaceDef}
		public Action getInterfaceDefAction_0() { return cInterfaceDefAction_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//interfacefunction+=InterfaceFunction*
		public Assignment getInterfacefunctionAssignment_3() { return cInterfacefunctionAssignment_3; }
		
		//InterfaceFunction
		public RuleCall getInterfacefunctionInterfaceFunctionParserRuleCall_3_0() { return cInterfacefunctionInterfaceFunctionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InterfaceFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InterfaceFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionnameFunctionNameParserRuleCall_1_0 = (RuleCall)cFunctionnameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterlistAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterlistInterfaceParameterListParserRuleCall_3_0 = (RuleCall)cParameterlistAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStmParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InterfaceFunction:
		//	'function' functionname=FunctionName '(' parameterlist=InterfaceParameterList? ')' '{'
		//	//		(statements += Statement)*
		//	statements+=Stm*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' functionname=FunctionName '(' parameterlist=InterfaceParameterList? ')' '{' //		(statements += Statement)*
		//statements+=Stm* '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//functionname=FunctionName
		public Assignment getFunctionnameAssignment_1() { return cFunctionnameAssignment_1; }
		
		//FunctionName
		public RuleCall getFunctionnameFunctionNameParserRuleCall_1_0() { return cFunctionnameFunctionNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameterlist=InterfaceParameterList?
		public Assignment getParameterlistAssignment_3() { return cParameterlistAssignment_3; }
		
		//InterfaceParameterList
		public RuleCall getParameterlistInterfaceParameterListParserRuleCall_3_0() { return cParameterlistInterfaceParameterListParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		////		(statements += Statement)*
		//statements+=Stm*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Stm
		public RuleCall getStatementsStmParserRuleCall_6_0() { return cStatementsStmParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InterfaceParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InterfaceParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParaInterfaceParameterDeclareParserRuleCall_0_0 = (RuleCall)cParaAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParaAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParaInterfaceParameterDeclareParserRuleCall_1_1_0 = (RuleCall)cParaAssignment_1_1.eContents().get(0);
		
		//InterfaceParameterList:
		//	para+=InterfaceParameterDeclare (';' para+=InterfaceParameterDeclare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//para+=InterfaceParameterDeclare (';' para+=InterfaceParameterDeclare)*
		public Group getGroup() { return cGroup; }
		
		//para+=InterfaceParameterDeclare
		public Assignment getParaAssignment_0() { return cParaAssignment_0; }
		
		//InterfaceParameterDeclare
		public RuleCall getParaInterfaceParameterDeclareParserRuleCall_0_0() { return cParaInterfaceParameterDeclareParserRuleCall_0_0; }
		
		//(';' para+=InterfaceParameterDeclare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//para+=InterfaceParameterDeclare
		public Assignment getParaAssignment_1_1() { return cParaAssignment_1_1; }
		
		//InterfaceParameterDeclare
		public RuleCall getParaInterfaceParameterDeclareParserRuleCall_1_1_0() { return cParaInterfaceParameterDeclareParserRuleCall_1_1_0; }
	}
	public class InterfaceParameterDeclareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InterfaceParameterDeclare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cParanameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParanameIDTerminalRuleCall_1_0 = (RuleCall)cParanameAssignment_1.eContents().get(0);
		
		//InterfaceParameterDeclare:
		//	type=VariableType paraname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType paraname=ID
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_0_0() { return cTypeVariableTypeEnumRuleCall_0_0; }
		
		//paraname=ID
		public Assignment getParanameAssignment_1() { return cParanameAssignment_1; }
		
		//ID
		public RuleCall getParanameIDTerminalRuleCall_1_0() { return cParanameIDTerminalRuleCall_1_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FunctionName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//FunctionName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVardAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVardVarDeclParserRuleCall_3_0 = (RuleCall)cVardAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDef:
		//	{VarDef} 'variable' '{'
		//	vard+=VarDecl*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDef} 'variable' '{' vard+=VarDecl* '}'
		public Group getGroup() { return cGroup; }
		
		//{VarDef}
		public Action getVarDefAction_0() { return cVarDefAction_0; }
		
		//'variable'
		public Keyword getVariableKeyword_1() { return cVariableKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//vard+=VarDecl*
		public Assignment getVardAssignment_3() { return cVardAssignment_3; }
		
		//VarDecl
		public RuleCall getVardVarDeclParserRuleCall_3_0() { return cVardVarDeclParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfdefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfdefIfDefParserRuleCall_0_0 = (RuleCall)cIfdefAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVarblockdefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVarblockdefVarBlockDefParserRuleCall_1_0_0 = (RuleCall)cVarblockdefAssignment_1_0.eContents().get(0);
		private final Assignment cVarsingledefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cVarsingledefVarSingleDefParserRuleCall_1_1_0 = (RuleCall)cVarsingledefAssignment_1_1.eContents().get(0);
		
		//VarDecl:
		//	ifdef=IfDef? (varblockdef=VarBlockDef | varsingledef=VarSingleDef);
		@Override public ParserRule getRule() { return rule; }
		
		//ifdef=IfDef? (varblockdef=VarBlockDef | varsingledef=VarSingleDef)
		public Group getGroup() { return cGroup; }
		
		//ifdef=IfDef?
		public Assignment getIfdefAssignment_0() { return cIfdefAssignment_0; }
		
		//IfDef
		public RuleCall getIfdefIfDefParserRuleCall_0_0() { return cIfdefIfDefParserRuleCall_0_0; }
		
		//(varblockdef=VarBlockDef | varsingledef=VarSingleDef)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//varblockdef=VarBlockDef
		public Assignment getVarblockdefAssignment_1_0() { return cVarblockdefAssignment_1_0; }
		
		//VarBlockDef
		public RuleCall getVarblockdefVarBlockDefParserRuleCall_1_0_0() { return cVarblockdefVarBlockDefParserRuleCall_1_0_0; }
		
		//varsingledef=VarSingleDef
		public Assignment getVarsingledefAssignment_1_1() { return cVarsingledefAssignment_1_1; }
		
		//VarSingleDef
		public RuleCall getVarsingledefVarSingleDefParserRuleCall_1_1_0() { return cVarsingledefVarSingleDefParserRuleCall_1_1_0; }
	}
	public class VarBlockDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarBlockDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVardefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVardefVarDefinitionParserRuleCall_1_0 = (RuleCall)cVardefAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VarBlockDef:
		//	'{' vardef+=VarDefinition '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' vardef+=VarDefinition '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//vardef+=VarDefinition
		public Assignment getVardefAssignment_1() { return cVardefAssignment_1; }
		
		//VarDefinition
		public RuleCall getVardefVarDefinitionParserRuleCall_1_0() { return cVardefVarDefinitionParserRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class VarSingleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarSingleDef");
		private final Assignment cVardefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVardefVarDefinitionParserRuleCall_0 = (RuleCall)cVardefAssignment.eContents().get(0);
		
		//VarSingleDef:
		//	vardef=VarDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//vardef=VarDefinition
		public Assignment getVardefAssignment() { return cVardefAssignment; }
		
		//VarDefinition
		public RuleCall getVardefVarDefinitionParserRuleCall_0() { return cVardefVarDefinitionParserRuleCall_0; }
	}
	public class VarDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVarNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameVarNameParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cBvalueAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cBvalueBoolValueParserRuleCall_3_1_0_0 = (RuleCall)cBvalueAssignment_3_1_0.eContents().get(0);
		private final Assignment cIvalueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cIvalueNumValueParserRuleCall_3_1_1_0 = (RuleCall)cIvalueAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDefinition:
		//	type=VariableType name+=VarName (',' name+=VarName)* ('=' (bvalue=BoolValue | ivalue=NumValue))? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType name+=VarName (',' name+=VarName)* ('=' (bvalue=BoolValue | ivalue=NumValue))? ';'
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_0_0() { return cTypeVariableTypeEnumRuleCall_0_0; }
		
		//name+=VarName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//VarName
		public RuleCall getNameVarNameParserRuleCall_1_0() { return cNameVarNameParserRuleCall_1_0; }
		
		//(',' name+=VarName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=VarName
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//VarName
		public RuleCall getNameVarNameParserRuleCall_2_1_0() { return cNameVarNameParserRuleCall_2_1_0; }
		
		//('=' (bvalue=BoolValue | ivalue=NumValue))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//(bvalue=BoolValue | ivalue=NumValue)
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//bvalue=BoolValue
		public Assignment getBvalueAssignment_3_1_0() { return cBvalueAssignment_3_1_0; }
		
		//BoolValue
		public RuleCall getBvalueBoolValueParserRuleCall_3_1_0_0() { return cBvalueBoolValueParserRuleCall_3_1_0_0; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_3_1_1() { return cIvalueAssignment_3_1_1; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_3_1_1_0() { return cIvalueNumValueParserRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VarName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VarName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SchedulerDataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerDataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSchedulerDataDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatadefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatadefDataDefParserRuleCall_3_0 = (RuleCall)cDatadefAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SchedulerDataDef:
		//	{SchedulerDataDef}
		//	'data' '{'
		//	datadef+=DataDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SchedulerDataDef} 'data' '{' datadef+=DataDef* '}'
		public Group getGroup() { return cGroup; }
		
		//{SchedulerDataDef}
		public Action getSchedulerDataDefAction_0() { return cSchedulerDataDefAction_0; }
		
		//'data'
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//datadef+=DataDef*
		public Assignment getDatadefAssignment_3() { return cDatadefAssignment_3; }
		
		//DataDef
		public RuleCall getDatadefDataDefParserRuleCall_3_0() { return cDatadefDataDefParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfdefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfdefIfDefParserRuleCall_0_0 = (RuleCall)cIfdefAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDatablockdefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDatablockdefDataBlockDefParserRuleCall_1_0_0 = (RuleCall)cDatablockdefAssignment_1_0.eContents().get(0);
		private final Assignment cDatasingledefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cDatasingledefDataSingleDefParserRuleCall_1_1_0 = (RuleCall)cDatasingledefAssignment_1_1.eContents().get(0);
		
		//DataDef:
		//	ifdef=IfDef? (datablockdef=DataBlockDef | datasingledef=DataSingleDef);
		@Override public ParserRule getRule() { return rule; }
		
		//ifdef=IfDef? (datablockdef=DataBlockDef | datasingledef=DataSingleDef)
		public Group getGroup() { return cGroup; }
		
		//ifdef=IfDef?
		public Assignment getIfdefAssignment_0() { return cIfdefAssignment_0; }
		
		//IfDef
		public RuleCall getIfdefIfDefParserRuleCall_0_0() { return cIfdefIfDefParserRuleCall_0_0; }
		
		//(datablockdef=DataBlockDef | datasingledef=DataSingleDef)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//datablockdef=DataBlockDef
		public Assignment getDatablockdefAssignment_1_0() { return cDatablockdefAssignment_1_0; }
		
		//DataBlockDef
		public RuleCall getDatablockdefDataBlockDefParserRuleCall_1_0_0() { return cDatablockdefDataBlockDefParserRuleCall_1_0_0; }
		
		//datasingledef=DataSingleDef
		public Assignment getDatasingledefAssignment_1_1() { return cDatasingledefAssignment_1_1; }
		
		//DataSingleDef
		public RuleCall getDatasingledefDataSingleDefParserRuleCall_1_1_0() { return cDatasingledefDataSingleDefParserRuleCall_1_1_0; }
	}
	public class DataBlockDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DataBlockDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataBlockDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatadefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatadefDataSingleDefParserRuleCall_2_0 = (RuleCall)cDatadefAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataBlockDef:
		//	{DataBlockDef} '{' datadef+=DataSingleDef* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DataBlockDef} '{' datadef+=DataSingleDef* '}'
		public Group getGroup() { return cGroup; }
		
		//{DataBlockDef}
		public Action getDataBlockDefAction_0() { return cDataBlockDefAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//datadef+=DataSingleDef*
		public Assignment getDatadefAssignment_2() { return cDatadefAssignment_2; }
		
		//DataSingleDef
		public RuleCall getDatadefDataSingleDefParserRuleCall_2_0() { return cDatadefDataSingleDefParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DataSingleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DataSingleDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPropAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPropSchedulerPropertyDefParserRuleCall_0_0 = (RuleCall)cPropAssignment_0.eContents().get(0);
		private final Assignment cColAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cColSchedulerCollectionDefParserRuleCall_1_0 = (RuleCall)cColAssignment_1.eContents().get(0);
		
		//DataSingleDef:
		//	prop=SchedulerPropertyDef | col=SchedulerCollectionDef;
		@Override public ParserRule getRule() { return rule; }
		
		//prop=SchedulerPropertyDef | col=SchedulerCollectionDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//prop=SchedulerPropertyDef
		public Assignment getPropAssignment_0() { return cPropAssignment_0; }
		
		//SchedulerPropertyDef
		public RuleCall getPropSchedulerPropertyDefParserRuleCall_0_0() { return cPropSchedulerPropertyDefParserRuleCall_0_0; }
		
		//col=SchedulerCollectionDef
		public Assignment getColAssignment_1() { return cColAssignment_1; }
		
		//SchedulerCollectionDef
		public RuleCall getColSchedulerCollectionDefParserRuleCall_1_0() { return cColSchedulerCollectionDefParserRuleCall_1_0; }
	}
	public class SchedulerPropertyDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerPropertyDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeVariableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSchedulerPropertyNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameSchedulerPropertyNameParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cBvalueAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cBvalueBoolValueParserRuleCall_3_1_0_0 = (RuleCall)cBvalueAssignment_3_1_0.eContents().get(0);
		private final Assignment cIvalueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cIvalueNumValueParserRuleCall_3_1_1_0 = (RuleCall)cIvalueAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SchedulerPropertyDef:
		//	type=VariableType name+=SchedulerPropertyName (',' name+=SchedulerPropertyName)* ('=' (bvalue=BoolValue |
		//	ivalue=NumValue))? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=VariableType name+=SchedulerPropertyName (',' name+=SchedulerPropertyName)* ('=' (bvalue=BoolValue |
		//ivalue=NumValue))? ';'
		public Group getGroup() { return cGroup; }
		
		//type=VariableType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//VariableType
		public RuleCall getTypeVariableTypeEnumRuleCall_0_0() { return cTypeVariableTypeEnumRuleCall_0_0; }
		
		//name+=SchedulerPropertyName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SchedulerPropertyName
		public RuleCall getNameSchedulerPropertyNameParserRuleCall_1_0() { return cNameSchedulerPropertyNameParserRuleCall_1_0; }
		
		//(',' name+=SchedulerPropertyName)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//name+=SchedulerPropertyName
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//SchedulerPropertyName
		public RuleCall getNameSchedulerPropertyNameParserRuleCall_2_1_0() { return cNameSchedulerPropertyNameParserRuleCall_2_1_0; }
		
		//('=' (bvalue=BoolValue | ivalue=NumValue))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//(bvalue=BoolValue | ivalue=NumValue)
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//bvalue=BoolValue
		public Assignment getBvalueAssignment_3_1_0() { return cBvalueAssignment_3_1_0; }
		
		//BoolValue
		public RuleCall getBvalueBoolValueParserRuleCall_3_1_0_0() { return cBvalueBoolValueParserRuleCall_3_1_0_0; }
		
		//ivalue=NumValue
		public Assignment getIvalueAssignment_3_1_1() { return cIvalueAssignment_3_1_1; }
		
		//NumValue
		public RuleCall getIvalueNumValueParserRuleCall_3_1_1_0() { return cIvalueNumValueParserRuleCall_3_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SchedulerPropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerPropertyName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SchedulerPropertyName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SchedulerCollectionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerCollectionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cParentRefinesKeyword_0_0 = (Keyword)cParentAssignment_0.eContents().get(0);
		private final Keyword cCollectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSchedulerSetParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUsingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCompAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCompComparationNameParserRuleCall_3_1_0 = (RuleCall)cCompAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cCompAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cCompComparationNameParserRuleCall_3_2_1_0 = (RuleCall)cCompAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationtypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationtypeOperationTypeEnumRuleCall_4_1_0 = (RuleCall)cOperationtypeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SchedulerCollectionDef:
		//	parent='refines'? 'collection' name=SchedulerSet ('using' comp+=ComparationName (',' comp+=ComparationName)*)? ('with'
		//	operationtype=OperationType)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//parent='refines'? 'collection' name=SchedulerSet ('using' comp+=ComparationName (',' comp+=ComparationName)*)? ('with'
		//operationtype=OperationType)? ';'
		public Group getGroup() { return cGroup; }
		
		//parent='refines'?
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }
		
		//'refines'
		public Keyword getParentRefinesKeyword_0_0() { return cParentRefinesKeyword_0_0; }
		
		//'collection'
		public Keyword getCollectionKeyword_1() { return cCollectionKeyword_1; }
		
		//name=SchedulerSet
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SchedulerSet
		public RuleCall getNameSchedulerSetParserRuleCall_2_0() { return cNameSchedulerSetParserRuleCall_2_0; }
		
		//('using' comp+=ComparationName (',' comp+=ComparationName)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'using'
		public Keyword getUsingKeyword_3_0() { return cUsingKeyword_3_0; }
		
		//comp+=ComparationName
		public Assignment getCompAssignment_3_1() { return cCompAssignment_3_1; }
		
		//ComparationName
		public RuleCall getCompComparationNameParserRuleCall_3_1_0() { return cCompComparationNameParserRuleCall_3_1_0; }
		
		//(',' comp+=ComparationName)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//comp+=ComparationName
		public Assignment getCompAssignment_3_2_1() { return cCompAssignment_3_2_1; }
		
		//ComparationName
		public RuleCall getCompComparationNameParserRuleCall_3_2_1_0() { return cCompComparationNameParserRuleCall_3_2_1_0; }
		
		//('with' operationtype=OperationType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'with'
		public Keyword getWithKeyword_4_0() { return cWithKeyword_4_0; }
		
		//operationtype=OperationType
		public Assignment getOperationtypeAssignment_4_1() { return cOperationtypeAssignment_4_1; }
		
		//OperationType
		public RuleCall getOperationtypeOperationTypeEnumRuleCall_4_1_0() { return cOperationtypeOperationTypeEnumRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class SchedulerSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SchedulerSet");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SchedulerSet:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GenerateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Generate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGenconfigurationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenconfigurationGenConfigurationParserRuleCall_2_0 = (RuleCall)cGenconfigurationAssignment_2.eContents().get(0);
		private final Assignment cGencomponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGencomponentGenComponentParserRuleCall_3_0 = (RuleCall)cGencomponentAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cStepgenerationAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cStepgenerationStepGenerationParserRuleCall_4_0_0 = (RuleCall)cStepgenerationAssignment_4_0.eContents().get(0);
		private final Assignment cProcessgenerationAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cProcessgenerationProcessGenerationParserRuleCall_4_1_0 = (RuleCall)cProcessgenerationAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Generating code
		//Generate:
		//	'generate' '{'
		//	genconfiguration=GenConfiguration
		//	gencomponent=GenComponent? (stepgeneration=StepGeneration | processgeneration=ProcessGeneration)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'generate' '{' genconfiguration=GenConfiguration gencomponent=GenComponent? (stepgeneration=StepGeneration |
		//processgeneration=ProcessGeneration)? '}'
		public Group getGroup() { return cGroup; }
		
		//'generate'
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//genconfiguration=GenConfiguration
		public Assignment getGenconfigurationAssignment_2() { return cGenconfigurationAssignment_2; }
		
		//GenConfiguration
		public RuleCall getGenconfigurationGenConfigurationParserRuleCall_2_0() { return cGenconfigurationGenConfigurationParserRuleCall_2_0; }
		
		//gencomponent=GenComponent?
		public Assignment getGencomponentAssignment_3() { return cGencomponentAssignment_3; }
		
		//GenComponent
		public RuleCall getGencomponentGenComponentParserRuleCall_3_0() { return cGencomponentGenComponentParserRuleCall_3_0; }
		
		//(stepgeneration=StepGeneration | processgeneration=ProcessGeneration)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//stepgeneration=StepGeneration
		public Assignment getStepgenerationAssignment_4_0() { return cStepgenerationAssignment_4_0; }
		
		//StepGeneration
		public RuleCall getStepgenerationStepGenerationParserRuleCall_4_0_0() { return cStepgenerationStepGenerationParserRuleCall_4_0_0; }
		
		//processgeneration=ProcessGeneration
		public Assignment getProcessgenerationAssignment_4_1() { return cProcessgenerationAssignment_4_1; }
		
		//ProcessGeneration
		public RuleCall getProcessgenerationProcessGenerationParserRuleCall_4_1_0() { return cProcessgenerationProcessGenerationParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GenConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigurationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cGenerateoptionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cGenerateoptionGenerateOptionParserRuleCall_2_0_0 = (RuleCall)cGenerateoptionAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cDirectoryAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDirectoryDirectoryParserRuleCall_3_0_0 = (RuleCall)cDirectoryAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFilenameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFilenameFileNameParserRuleCall_4_0_0 = (RuleCall)cFilenameAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cFileextensionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cFileextensionFileExtensionParserRuleCall_5_0_0 = (RuleCall)cFileextensionAssignment_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cTestKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTestAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cTestAlternatives_7_0 = (Alternatives)cTestAssignment_7.eContents().get(0);
		private final Keyword cTestProgramKeyword_7_0_0 = (Keyword)cTestAlternatives_7_0.eContents().get(0);
		private final Keyword cTestCaseKeyword_7_0_1 = (Keyword)cTestAlternatives_7_0.eContents().get(1);
		private final Keyword cTestDataKeyword_7_0_2 = (Keyword)cTestAlternatives_7_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTestpartAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTestpartTestPartParserRuleCall_9_0 = (RuleCall)cTestpartAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//GenConfiguration:
		//	'configuration' '{' (generateoption=GenerateOption ';')? (directory=Directory ';')? (filename=FileName ';')?
		//	(fileextension=FileExtension ';')?
		//	'test' test=('program' | 'case' | 'data') '=' testpart=TestPart ';'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'configuration' '{' (generateoption=GenerateOption ';')? (directory=Directory ';')? (filename=FileName ';')?
		//(fileextension=FileExtension ';')? 'test' test=('program' | 'case' | 'data') '=' testpart=TestPart ';' '}'
		public Group getGroup() { return cGroup; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_0() { return cConfigurationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(generateoption=GenerateOption ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//generateoption=GenerateOption
		public Assignment getGenerateoptionAssignment_2_0() { return cGenerateoptionAssignment_2_0; }
		
		//GenerateOption
		public RuleCall getGenerateoptionGenerateOptionParserRuleCall_2_0_0() { return cGenerateoptionGenerateOptionParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(directory=Directory ';')?
		public Group getGroup_3() { return cGroup_3; }
		
		//directory=Directory
		public Assignment getDirectoryAssignment_3_0() { return cDirectoryAssignment_3_0; }
		
		//Directory
		public RuleCall getDirectoryDirectoryParserRuleCall_3_0_0() { return cDirectoryDirectoryParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//(filename=FileName ';')?
		public Group getGroup_4() { return cGroup_4; }
		
		//filename=FileName
		public Assignment getFilenameAssignment_4_0() { return cFilenameAssignment_4_0; }
		
		//FileName
		public RuleCall getFilenameFileNameParserRuleCall_4_0_0() { return cFilenameFileNameParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//(fileextension=FileExtension ';')?
		public Group getGroup_5() { return cGroup_5; }
		
		//fileextension=FileExtension
		public Assignment getFileextensionAssignment_5_0() { return cFileextensionAssignment_5_0; }
		
		//FileExtension
		public RuleCall getFileextensionFileExtensionParserRuleCall_5_0_0() { return cFileextensionFileExtensionParserRuleCall_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//'test'
		public Keyword getTestKeyword_6() { return cTestKeyword_6; }
		
		//test=('program' | 'case' | 'data')
		public Assignment getTestAssignment_7() { return cTestAssignment_7; }
		
		//('program' | 'case' | 'data')
		public Alternatives getTestAlternatives_7_0() { return cTestAlternatives_7_0; }
		
		//'program'
		public Keyword getTestProgramKeyword_7_0_0() { return cTestProgramKeyword_7_0_0; }
		
		//'case'
		public Keyword getTestCaseKeyword_7_0_1() { return cTestCaseKeyword_7_0_1; }
		
		//'data'
		public Keyword getTestDataKeyword_7_0_2() { return cTestDataKeyword_7_0_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//testpart=TestPart
		public Assignment getTestpartAssignment_9() { return cTestpartAssignment_9; }
		
		//TestPart
		public RuleCall getTestpartTestPartParserRuleCall_9_0() { return cTestpartTestPartParserRuleCall_9_0; }
		
		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class GenerateOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenerateOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOptionGenOptionEnumRuleCall_3_0 = (RuleCall)cOptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOptionGenOptionEnumRuleCall_4_1_0 = (RuleCall)cOptionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GenerateOption:
		//	'option' '=' '{' option+=GenOption (',' option+=GenOption)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'option' '=' '{' option+=GenOption (',' option+=GenOption)* '}'
		public Group getGroup() { return cGroup; }
		
		//'option'
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//option+=GenOption
		public Assignment getOptionAssignment_3() { return cOptionAssignment_3; }
		
		//GenOption
		public RuleCall getOptionGenOptionEnumRuleCall_3_0() { return cOptionGenOptionEnumRuleCall_3_0; }
		
		//(',' option+=GenOption)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//option+=GenOption
		public Assignment getOptionAssignment_4_1() { return cOptionAssignment_4_1; }
		
		//GenOption
		public RuleCall getOptionGenOptionEnumRuleCall_4_1_0() { return cOptionGenOptionEnumRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DirectoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Directory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirectoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCHAR_SEQUENCETerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Directory:
		//	'directory' '=' name=CHAR_SEQUENCE;
		@Override public ParserRule getRule() { return rule; }
		
		//'directory' '=' name=CHAR_SEQUENCE
		public Group getGroup() { return cGroup; }
		
		//'directory'
		public Keyword getDirectoryKeyword_0() { return cDirectoryKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=CHAR_SEQUENCE
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//CHAR_SEQUENCE
		public RuleCall getNameCHAR_SEQUENCETerminalRuleCall_2_0() { return cNameCHAR_SEQUENCETerminalRuleCall_2_0; }
	}
	public class FileNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FileName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameCHAR_SEQUENCETerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//FileName:
		//	'file' 'name' '=' name=CHAR_SEQUENCE;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' 'name' '=' name=CHAR_SEQUENCE
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=CHAR_SEQUENCE
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//CHAR_SEQUENCE
		public RuleCall getNameCHAR_SEQUENCETerminalRuleCall_3_0() { return cNameCHAR_SEQUENCETerminalRuleCall_3_0; }
	}
	public class FileExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FileExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExtensionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameCHAR_SEQUENCETerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//FileExtension:
		//	'file' 'extension' '=' name=CHAR_SEQUENCE;
		@Override public ParserRule getRule() { return rule; }
		
		//'file' 'extension' '=' name=CHAR_SEQUENCE
		public Group getGroup() { return cGroup; }
		
		//'file'
		public Keyword getFileKeyword_0() { return cFileKeyword_0; }
		
		//'extension'
		public Keyword getExtensionKeyword_1() { return cExtensionKeyword_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//name=CHAR_SEQUENCE
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//CHAR_SEQUENCE
		public RuleCall getNameCHAR_SEQUENCETerminalRuleCall_3_0() { return cNameCHAR_SEQUENCETerminalRuleCall_3_0; }
	}
	public class TestPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.TestPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPartGenPartParserRuleCall_0_0 = (RuleCall)cPartAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPartGenPartParserRuleCall_1_1_0 = (RuleCall)cPartAssignment_1_1.eContents().get(0);
		
		//TestPart:
		//	part+=GenPart ('+' part+=GenPart)*;
		@Override public ParserRule getRule() { return rule; }
		
		//part+=GenPart ('+' part+=GenPart)*
		public Group getGroup() { return cGroup; }
		
		//part+=GenPart
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }
		
		//GenPart
		public RuleCall getPartGenPartParserRuleCall_0_0() { return cPartGenPartParserRuleCall_0_0; }
		
		//('+' part+=GenPart)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }
		
		//part+=GenPart
		public Assignment getPartAssignment_1_1() { return cPartAssignment_1_1; }
		
		//GenPart
		public RuleCall getPartGenPartParserRuleCall_1_1_0() { return cPartGenPartParserRuleCall_1_1_0; }
	}
	public class GenPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPrefixAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrefixCHAR_SEQUENCETerminalRuleCall_1_0_0 = (RuleCall)cPrefixAssignment_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cNameAlternatives_2_0 = (Alternatives)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAlternatives_2_0.eContents().get(0);
		private final Keyword cNameProcessesKeyword_2_0_1 = (Keyword)cNameAlternatives_2_0.eContents().get(1);
		private final Keyword cNameStepsKeyword_2_0_2 = (Keyword)cNameAlternatives_2_0.eContents().get(2);
		private final Keyword cNameErrorKeyword_2_0_3 = (Keyword)cNameAlternatives_2_0.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPosfixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPosfixCHAR_SEQUENCETerminalRuleCall_3_1_0 = (RuleCall)cPosfixAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////GenPart: '(' (prefix=CHAR_SEQUENCE '+')? name= (ID|'init'|'processes'|'behaviors'|'error') ('+' posfix=CHAR_SEQUENCE)? ')';
		//GenPart:
		//	'(' (prefix=CHAR_SEQUENCE '+')? name=(ID | 'processes' | 'steps' | 'error') ('+' posfix=CHAR_SEQUENCE)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (prefix=CHAR_SEQUENCE '+')? name=(ID | 'processes' | 'steps' | 'error') ('+' posfix=CHAR_SEQUENCE)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(prefix=CHAR_SEQUENCE '+')?
		public Group getGroup_1() { return cGroup_1; }
		
		//prefix=CHAR_SEQUENCE
		public Assignment getPrefixAssignment_1_0() { return cPrefixAssignment_1_0; }
		
		//CHAR_SEQUENCE
		public RuleCall getPrefixCHAR_SEQUENCETerminalRuleCall_1_0_0() { return cPrefixCHAR_SEQUENCETerminalRuleCall_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//name=(ID | 'processes' | 'steps' | 'error')
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//(ID | 'processes' | 'steps' | 'error')
		public Alternatives getNameAlternatives_2_0() { return cNameAlternatives_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//'processes'
		public Keyword getNameProcessesKeyword_2_0_1() { return cNameProcessesKeyword_2_0_1; }
		
		//'steps'
		public Keyword getNameStepsKeyword_2_0_2() { return cNameStepsKeyword_2_0_2; }
		
		//'error'
		public Keyword getNameErrorKeyword_2_0_3() { return cNameErrorKeyword_2_0_3; }
		
		//('+' posfix=CHAR_SEQUENCE)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }
		
		//posfix=CHAR_SEQUENCE
		public Assignment getPosfixAssignment_3_1() { return cPosfixAssignment_3_1; }
		
		//CHAR_SEQUENCE
		public RuleCall getPosfixCHAR_SEQUENCETerminalRuleCall_3_1_0() { return cPosfixCHAR_SEQUENCETerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GenComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentComponentParserRuleCall_2_0 = (RuleCall)cComponentAssignment_2.eContents().get(0);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentComponentParserRuleCall_3_0 = (RuleCall)cComponentAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GenComponent:
		//	'component' '{'
		//	component+=Component component+=Component*
		//	//		(initgeneration = InitGeneration)?		
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' '{' component+=Component component+=Component* //		(initgeneration = InitGeneration)?		
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//component+=Component
		public Assignment getComponentAssignment_2() { return cComponentAssignment_2; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_2_0() { return cComponentComponentParserRuleCall_2_0; }
		
		//component+=Component*
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }
		
		//Component
		public RuleCall getComponentComponentParserRuleCall_3_0() { return cComponentComponentParserRuleCall_3_0; }
		
		////		(initgeneration = InitGeneration)?		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplateSetTemplateParserRuleCall_2_0 = (RuleCall)cTemplateAssignment_2.eContents().get(0);
		private final Keyword cContainsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStmAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cStmAlternatives_5_0 = (Alternatives)cStmAssignment_5.eContents().get(0);
		private final RuleCall cStmGenCodeStatementParserRuleCall_5_0_0 = (RuleCall)cStmAlternatives_5_0.eContents().get(0);
		private final RuleCall cStmGenLnCodeStatementParserRuleCall_5_0_1 = (RuleCall)cStmAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Component:
		//	name=ID '{'
		//	template=SetTemplate?
		//	'contains' '{'
		//	stm+=(GenCodeStatement | GenLnCodeStatement)*
		//	'}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' template=SetTemplate? 'contains' '{' stm+=(GenCodeStatement | GenLnCodeStatement)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//template=SetTemplate?
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }
		
		//SetTemplate
		public RuleCall getTemplateSetTemplateParserRuleCall_2_0() { return cTemplateSetTemplateParserRuleCall_2_0; }
		
		//'contains'
		public Keyword getContainsKeyword_3() { return cContainsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//stm+=(GenCodeStatement | GenLnCodeStatement)*
		public Assignment getStmAssignment_5() { return cStmAssignment_5; }
		
		//(GenCodeStatement | GenLnCodeStatement)
		public Alternatives getStmAlternatives_5_0() { return cStmAlternatives_5_0; }
		
		//GenCodeStatement
		public RuleCall getStmGenCodeStatementParserRuleCall_5_0_0() { return cStmGenCodeStatementParserRuleCall_5_0_0; }
		
		//GenLnCodeStatement
		public RuleCall getStmGenLnCodeStatementParserRuleCall_5_0_1() { return cStmGenLnCodeStatementParserRuleCall_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProcessGenerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ProcessGeneration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessTemplateParserRuleCall_2_0 = (RuleCall)cProcessAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////InitGeneration: 'init' '{' 	init = Template '}' ;
		//ProcessGeneration:
		//	'process' '{' process=Template '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' '{' process=Template '}'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//process=Template
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//Template
		public RuleCall getProcessTemplateParserRuleCall_2_0() { return cProcessTemplateParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StepGenerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.StepGeneration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepTemplateParserRuleCall_2_0 = (RuleCall)cStepAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StepGeneration:
		//	'step' '{' step=Template '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'step' '{' step=Template '}'
		public Group getGroup() { return cGroup; }
		
		//'step'
		public Keyword getStepKeyword_0() { return cStepKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//step=Template
		public Assignment getStepAssignment_2() { return cStepAssignment_2; }
		
		//Template
		public RuleCall getStepTemplateParserRuleCall_2_0() { return cStepTemplateParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTemplateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTemplateSetTemplateParserRuleCall_0_0 = (RuleCall)cTemplateAssignment_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorBehaviorParserRuleCall_1_0 = (RuleCall)cBehaviorAssignment_1.eContents().get(0);
		private final Assignment cND_behaviorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cND_behaviorND_BehaviorParserRuleCall_2_0 = (RuleCall)cND_behaviorAssignment_2.eContents().get(0);
		
		//Template:
		//	template=SetTemplate? behavior=Behavior ND_behavior=ND_Behavior?;
		@Override public ParserRule getRule() { return rule; }
		
		//template=SetTemplate? behavior=Behavior ND_behavior=ND_Behavior?
		public Group getGroup() { return cGroup; }
		
		//template=SetTemplate?
		public Assignment getTemplateAssignment_0() { return cTemplateAssignment_0; }
		
		//SetTemplate
		public RuleCall getTemplateSetTemplateParserRuleCall_0_0() { return cTemplateSetTemplateParserRuleCall_0_0; }
		
		//behavior=Behavior
		public Assignment getBehaviorAssignment_1() { return cBehaviorAssignment_1; }
		
		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_1_0() { return cBehaviorBehaviorParserRuleCall_1_0; }
		
		//ND_behavior=ND_Behavior?
		public Assignment getND_behaviorAssignment_2() { return cND_behaviorAssignment_2; }
		
		//ND_Behavior
		public RuleCall getND_behaviorND_BehaviorParserRuleCall_2_0() { return cND_behaviorND_BehaviorParserRuleCall_2_0; }
	}
	public class SetTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTemplExpressionParserRuleCall_2_0 = (RuleCall)cTemplAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetTemplate:
		//	'template' '=' templ=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'template' '=' templ=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'template'
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//templ=Expression
		public Assignment getTemplAssignment_2() { return cTemplAssignment_2; }
		
		//Expression
		public RuleCall getTemplExpressionParserRuleCall_2_0() { return cTemplExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventtemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventtemplateEventTemplateParserRuleCall_2_0 = (RuleCall)cEventtemplateAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEventtemplateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEventtemplateEventTemplateParserRuleCall_3_1_0 = (RuleCall)cEventtemplateAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Behavior:
		//	'action' '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'action' '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//eventtemplate+=EventTemplate
		public Assignment getEventtemplateAssignment_2() { return cEventtemplateAssignment_2; }
		
		//EventTemplate
		public RuleCall getEventtemplateEventTemplateParserRuleCall_2_0() { return cEventtemplateEventTemplateParserRuleCall_2_0; }
		
		//('+' eventtemplate+=EventTemplate)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }
		
		//eventtemplate+=EventTemplate
		public Assignment getEventtemplateAssignment_3_1() { return cEventtemplateAssignment_3_1; }
		
		//EventTemplate
		public RuleCall getEventtemplateEventTemplateParserRuleCall_3_1_0() { return cEventtemplateEventTemplateParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class EventTemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventTemplate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPrefixAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPrefixExpressionParserRuleCall_1_0_0 = (RuleCall)cPrefixAssignment_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventActionNameEnumRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cPlusSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPostfixAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_3_1_0 = (RuleCall)cPostfixAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EventTemplate:
		//	'(' (prefix=Expression '+')? event=ActionName ('+' postfix=Expression)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (prefix=Expression '+')? event=ActionName ('+' postfix=Expression)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(prefix=Expression '+')?
		public Group getGroup_1() { return cGroup_1; }
		
		//prefix=Expression
		public Assignment getPrefixAssignment_1_0() { return cPrefixAssignment_1_0; }
		
		//Expression
		public RuleCall getPrefixExpressionParserRuleCall_1_0_0() { return cPrefixExpressionParserRuleCall_1_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//event=ActionName
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//ActionName
		public RuleCall getEventActionNameEnumRuleCall_2_0() { return cEventActionNameEnumRuleCall_2_0; }
		
		//('+' postfix=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_0() { return cPlusSignKeyword_3_0; }
		
		//postfix=Expression
		public Assignment getPostfixAssignment_3_1() { return cPostfixAssignment_3_1; }
		
		//Expression
		public RuleCall getPostfixExpressionParserRuleCall_3_1_0() { return cPostfixExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ND_BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ND_Behavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNd_actionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEventtemplateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventtemplateEventTemplateParserRuleCall_3_0 = (RuleCall)cEventtemplateAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPlusSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEventtemplateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEventtemplateEventTemplateParserRuleCall_4_1_0 = (RuleCall)cEventtemplateAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ND_Behavior:
		//	'nd_action' ('@' cond=Expression)? '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'nd_action' ('@' cond=Expression)? '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';'
		public Group getGroup() { return cGroup; }
		
		//'nd_action'
		public Keyword getNd_actionKeyword_0() { return cNd_actionKeyword_0; }
		
		//('@' cond=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_1_0() { return cCondExpressionParserRuleCall_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//eventtemplate+=EventTemplate
		public Assignment getEventtemplateAssignment_3() { return cEventtemplateAssignment_3; }
		
		//EventTemplate
		public RuleCall getEventtemplateEventTemplateParserRuleCall_3_0() { return cEventtemplateEventTemplateParserRuleCall_3_0; }
		
		//('+' eventtemplate+=EventTemplate)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'+'
		public Keyword getPlusSignKeyword_4_0() { return cPlusSignKeyword_4_0; }
		
		//eventtemplate+=EventTemplate
		public Assignment getEventtemplateAssignment_4_1() { return cEventtemplateAssignment_4_1; }
		
		//EventTemplate
		public RuleCall getEventtemplateEventTemplateParserRuleCall_4_1_0() { return cEventtemplateEventTemplateParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class HandlerDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.HandlerDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHandlerDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHandlerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventDefParserRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HandlerDef:
		//	{HandlerDef}
		//	'event' 'handler' '{'
		//	event+=EventDef*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{HandlerDef} 'event' 'handler' '{' event+=EventDef* '}'
		public Group getGroup() { return cGroup; }
		
		//{HandlerDef}
		public Action getHandlerDefAction_0() { return cHandlerDefAction_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//'handler'
		public Keyword getHandlerKeyword_2() { return cHandlerKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//event+=EventDef*
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//EventDef
		public RuleCall getEventEventDefParserRuleCall_4_0() { return cEventEventDefParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EventDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventnameEventNameEnumRuleCall_0_0 = (RuleCall)cEventnameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cProcessKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProcessnameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cProcessnameProcessParserRuleCall_2_1_0 = (RuleCall)cProcessnameAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cEventAlternatives_5_0 = (Alternatives)cEventAssignment_5.eContents().get(0);
		private final RuleCall cEventEventOptParserRuleCall_5_0_0 = (RuleCall)cEventAlternatives_5_0.eContents().get(0);
		private final RuleCall cEventEventStmParserRuleCall_5_0_1 = (RuleCall)cEventAlternatives_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EventDef:
		//	eventname=EventName '(' ('process' processname=Process)? ')'
		//	'{'
		//	//		(statements += Statement)*
		//	event=(EventOpt | EventStm)
		//	//		(statements += Stm)*		
		//	//		(ifdef = IfDef)?  (statements = MoveProcess | loopst = LoopProcess | getst = GetProcess)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//eventname=EventName '(' ('process' processname=Process)? ')' '{' //		(statements += Statement)*
		//event=(EventOpt | EventStm) //		(statements += Stm)*		
		////		(ifdef = IfDef)?  (statements = MoveProcess | loopst = LoopProcess | getst = GetProcess)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//eventname=EventName
		public Assignment getEventnameAssignment_0() { return cEventnameAssignment_0; }
		
		//EventName
		public RuleCall getEventnameEventNameEnumRuleCall_0_0() { return cEventnameEventNameEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('process' processname=Process)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'process'
		public Keyword getProcessKeyword_2_0() { return cProcessKeyword_2_0; }
		
		//processname=Process
		public Assignment getProcessnameAssignment_2_1() { return cProcessnameAssignment_2_1; }
		
		//Process
		public RuleCall getProcessnameProcessParserRuleCall_2_1_0() { return cProcessnameProcessParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		////		(statements += Statement)*
		//event=(EventOpt | EventStm)
		public Assignment getEventAssignment_5() { return cEventAssignment_5; }
		
		//(EventOpt | EventStm)
		public Alternatives getEventAlternatives_5_0() { return cEventAlternatives_5_0; }
		
		//EventOpt
		public RuleCall getEventEventOptParserRuleCall_5_0_0() { return cEventEventOptParserRuleCall_5_0_0; }
		
		//EventStm
		public RuleCall getEventEventStmParserRuleCall_5_0_1() { return cEventEventStmParserRuleCall_5_0_1; }
		
		////		(statements += Stm)*		
		////		(ifdef = IfDef)?  (statements = MoveProcess | loopst = LoopProcess | getst = GetProcess)
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EventOptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventOpt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOptOptParserRuleCall_0_0 = (RuleCall)cOptAssignment_0.eContents().get(0);
		private final Assignment cOptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptOptParserRuleCall_1_0 = (RuleCall)cOptAssignment_1.eContents().get(0);
		
		//EventOpt:
		//	opt+=Opt opt+=Opt*;
		@Override public ParserRule getRule() { return rule; }
		
		//opt+=Opt opt+=Opt*
		public Group getGroup() { return cGroup; }
		
		//opt+=Opt
		public Assignment getOptAssignment_0() { return cOptAssignment_0; }
		
		//Opt
		public RuleCall getOptOptParserRuleCall_0_0() { return cOptOptParserRuleCall_0_0; }
		
		//opt+=Opt*
		public Assignment getOptAssignment_1() { return cOptAssignment_1; }
		
		//Opt
		public RuleCall getOptOptParserRuleCall_1_0() { return cOptOptParserRuleCall_1_0; }
	}
	public class OptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Opt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventstmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventstmEventStmParserRuleCall_2_0 = (RuleCall)cEventstmAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Opt:
		//	'opt' '{'
		//	eventstm=EventStm
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'opt' '{' eventstm=EventStm '}'
		public Group getGroup() { return cGroup; }
		
		//'opt'
		public Keyword getOptKeyword_0() { return cOptKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//eventstm=EventStm
		public Assignment getEventstmAssignment_2() { return cEventstmAssignment_2; }
		
		//EventStm
		public RuleCall getEventstmEventStmParserRuleCall_2_0() { return cEventstmEventStmParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EventStmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventStm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStmParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStmParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//EventStm:
		//	statements+=Stm statements+=Stm*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Stm statements+=Stm*
		public Group getGroup() { return cGroup; }
		
		//statements+=Stm
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Stm
		public RuleCall getStatementsStmParserRuleCall_0_0() { return cStatementsStmParserRuleCall_0_0; }
		
		//statements+=Stm*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Stm
		public RuleCall getStatementsStmParserRuleCall_1_0() { return cStatementsStmParserRuleCall_1_0; }
	}
	public class StmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Stm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIfdefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIfdefIfDefParserRuleCall_0_0 = (RuleCall)cIfdefAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//Stm:
		//	ifdef=IfDef? statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//ifdef=IfDef? statement=Statement
		public Group getGroup() { return cGroup; }
		
		//ifdef=IfDef?
		public Assignment getIfdefAssignment_0() { return cIfdefAssignment_0; }
		
		//IfDef
		public RuleCall getIfdefIfDefParserRuleCall_0_0() { return cIfdefIfDefParserRuleCall_0_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJavaCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReorderProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSetProcessInstanceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopProcessParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGetProcessParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRemoveProcessParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChangeValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetExecTimeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetReturnColParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cSetReturnSetParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIfStatementParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAssertStatementParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cPrintStatementParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPrintLogStatementParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cGenCodeStatementParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cGenLnCodeStatementParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cNewProcessStatementParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cCallFunctionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cBlockStatementParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cReturnStatementParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cCheckPointParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cDeclareProcessParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cSetProcessParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		
		//Statement:
		//	JavaCode | MoveProcess | ReorderProcess | SetProcessInstance | LoopProcess | GetProcess | RemoveProcess | ChangeValue
		//	| SetExecTime | SetReturnCol | SetReturnSet | IfStatement | AssertStatement | PrintStatement | PrintLogStatement |
		//	GenCodeStatement | GenLnCodeStatement | NewProcessStatement | CallFunction | BlockStatement | ReturnStatement |
		//	CheckPoint | DeclareProcess | SetProcess;
		@Override public ParserRule getRule() { return rule; }
		
		//JavaCode | MoveProcess | ReorderProcess | SetProcessInstance | LoopProcess | GetProcess | RemoveProcess | ChangeValue |
		//SetExecTime | SetReturnCol | SetReturnSet | IfStatement | AssertStatement | PrintStatement | PrintLogStatement |
		//GenCodeStatement | GenLnCodeStatement | NewProcessStatement | CallFunction | BlockStatement | ReturnStatement |
		//CheckPoint | DeclareProcess | SetProcess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JavaCode
		public RuleCall getJavaCodeParserRuleCall_0() { return cJavaCodeParserRuleCall_0; }
		
		//MoveProcess
		public RuleCall getMoveProcessParserRuleCall_1() { return cMoveProcessParserRuleCall_1; }
		
		//ReorderProcess
		public RuleCall getReorderProcessParserRuleCall_2() { return cReorderProcessParserRuleCall_2; }
		
		//SetProcessInstance
		public RuleCall getSetProcessInstanceParserRuleCall_3() { return cSetProcessInstanceParserRuleCall_3; }
		
		//LoopProcess
		public RuleCall getLoopProcessParserRuleCall_4() { return cLoopProcessParserRuleCall_4; }
		
		//GetProcess
		public RuleCall getGetProcessParserRuleCall_5() { return cGetProcessParserRuleCall_5; }
		
		////ExecuteProcess | -> need to select
		//RemoveProcess
		public RuleCall getRemoveProcessParserRuleCall_6() { return cRemoveProcessParserRuleCall_6; }
		
		//ChangeValue
		public RuleCall getChangeValueParserRuleCall_7() { return cChangeValueParserRuleCall_7; }
		
		//SetExecTime
		public RuleCall getSetExecTimeParserRuleCall_8() { return cSetExecTimeParserRuleCall_8; }
		
		//SetReturnCol
		public RuleCall getSetReturnColParserRuleCall_9() { return cSetReturnColParserRuleCall_9; }
		
		//SetReturnSet
		public RuleCall getSetReturnSetParserRuleCall_10() { return cSetReturnSetParserRuleCall_10; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_11() { return cIfStatementParserRuleCall_11; }
		
		//AssertStatement
		public RuleCall getAssertStatementParserRuleCall_12() { return cAssertStatementParserRuleCall_12; }
		
		//PrintStatement
		public RuleCall getPrintStatementParserRuleCall_13() { return cPrintStatementParserRuleCall_13; }
		
		//PrintLogStatement
		public RuleCall getPrintLogStatementParserRuleCall_14() { return cPrintLogStatementParserRuleCall_14; }
		
		//GenCodeStatement
		public RuleCall getGenCodeStatementParserRuleCall_15() { return cGenCodeStatementParserRuleCall_15; }
		
		//GenLnCodeStatement
		public RuleCall getGenLnCodeStatementParserRuleCall_16() { return cGenLnCodeStatementParserRuleCall_16; }
		
		//NewProcessStatement
		public RuleCall getNewProcessStatementParserRuleCall_17() { return cNewProcessStatementParserRuleCall_17; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_18() { return cCallFunctionParserRuleCall_18; }
		
		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_19() { return cBlockStatementParserRuleCall_19; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_20() { return cReturnStatementParserRuleCall_20; }
		
		//CheckPoint
		public RuleCall getCheckPointParserRuleCall_21() { return cCheckPointParserRuleCall_21; }
		
		//DeclareProcess
		public RuleCall getDeclareProcessParserRuleCall_22() { return cDeclareProcessParserRuleCall_22; }
		
		//SetProcess
		public RuleCall getSetProcessParserRuleCall_23() { return cSetProcessParserRuleCall_23; }
	}
	public class JavaCodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.JavaCode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCodeML_CODETerminalRuleCall_1_0 = (RuleCall)cCodeAssignment_1.eContents().get(0);
		
		//JavaCode:
		//	'code' code=ML_CODE;
		@Override public ParserRule getRule() { return rule; }
		
		//'code' code=ML_CODE
		public Group getGroup() { return cGroup; }
		
		//'code'
		public Keyword getCodeKeyword_0() { return cCodeKeyword_0; }
		
		//code=ML_CODE
		public Assignment getCodeAssignment_1() { return cCodeAssignment_1; }
		
		//ML_CODE
		public RuleCall getCodeML_CODETerminalRuleCall_1_0() { return cCodeML_CODETerminalRuleCall_1_0; }
	}
	public class DeclareProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.DeclareProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////SetGenTemplate : 'template' '<' event+= EventName (',' event+=EventName)* '>' ';';
		//DeclareProcess:
		//	'process' process=Process ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'process' process=Process ';'
		public Group getGroup() { return cGroup; }
		
		//'process'
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SetProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessProcessParserRuleCall_0_0 = (RuleCall)cProcessAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGet_processKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cIdINTTerminalRuleCall_4_0_0 = (RuleCall)cIdAssignment_4_0.eContents().get(0);
		private final Assignment cPidAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPidIDTerminalRuleCall_4_1_0 = (RuleCall)cPidAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SetProcess:
		//	process=Process '=' 'get_process' '(' (id=INT | pid=ID) ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//process=Process '=' 'get_process' '(' (id=INT | pid=ID) ')' ';'
		public Group getGroup() { return cGroup; }
		
		//process=Process
		public Assignment getProcessAssignment_0() { return cProcessAssignment_0; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_0_0() { return cProcessProcessParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'get_process'
		public Keyword getGet_processKeyword_2() { return cGet_processKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(id=INT | pid=ID)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//id=INT
		public Assignment getIdAssignment_4_0() { return cIdAssignment_4_0; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0_0() { return cIdINTTerminalRuleCall_4_0_0; }
		
		//pid=ID
		public Assignment getPidAssignment_4_1() { return cPidAssignment_4_1; }
		
		//ID
		public RuleCall getPidIDTerminalRuleCall_4_1_0() { return cPidIDTerminalRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class SetExecTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetExecTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTime_sliceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetExecTime:
		//	'time_slice' '=' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'time_slice' '=' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'time_slice'
		public Keyword getTime_sliceKeyword_0() { return cTime_sliceKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SetReturnColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetReturnCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturn_setKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColSchedulerSetParserRuleCall_2_0 = (RuleCall)cColAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetReturnCol:
		//	'return_set' '=' col=SchedulerSet ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return_set' '=' col=SchedulerSet ';'
		public Group getGroup() { return cGroup; }
		
		//'return_set'
		public Keyword getReturn_setKeyword_0() { return cReturn_setKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_2() { return cColAssignment_2; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_2_0() { return cColSchedulerSetParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class SetReturnSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetReturnSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturn_setKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColSchedulerSetParserRuleCall_3_0 = (RuleCall)cColAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColSchedulerSetParserRuleCall_4_1_0 = (RuleCall)cColAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SetReturnSet:
		//	'return_set' '=' '{' col+=SchedulerSet (',' col+=SchedulerSet)* '}' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'return_set' '=' '{' col+=SchedulerSet (',' col+=SchedulerSet)* '}' ';'
		public Group getGroup() { return cGroup; }
		
		//'return_set'
		public Keyword getReturn_setKeyword_0() { return cReturn_setKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//col+=SchedulerSet
		public Assignment getColAssignment_3() { return cColAssignment_3; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_3_0() { return cColSchedulerSetParserRuleCall_3_0; }
		
		//(',' col+=SchedulerSet)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//col+=SchedulerSet
		public Assignment getColAssignment_4_1() { return cColAssignment_4_1; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_4_1_0() { return cColSchedulerSetParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class CheckPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CheckPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPointidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPointidPointIDParserRuleCall_1_0 = (RuleCall)cPointidAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CheckPoint:
		//	'checkpoint' pointid=PointID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'checkpoint' pointid=PointID ';'
		public Group getGroup() { return cGroup; }
		
		//'checkpoint'
		public Keyword getCheckpointKeyword_0() { return cCheckpointKeyword_0; }
		
		//pointid=PointID
		public Assignment getPointidAssignment_1() { return cPointidAssignment_1; }
		
		//PointID
		public RuleCall getPointidPointIDParserRuleCall_1_0() { return cPointidPointIDParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PointIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PointID");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PointID:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFuncNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncNameFunctionNameParserRuleCall_1_0 = (RuleCall)cFuncNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessProcessParserRuleCall_3_0 = (RuleCall)cProcessAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterlistAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterlistInterfaceParameterListParserRuleCall_4_1_0 = (RuleCall)cParameterlistAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CallFunction:
		//	'call' funcName=FunctionName '(' process=Process (',' parameterlist=InterfaceParameterList)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'call' funcName=FunctionName '(' process=Process (',' parameterlist=InterfaceParameterList)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//'call'
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }
		
		//funcName=FunctionName
		public Assignment getFuncNameAssignment_1() { return cFuncNameAssignment_1; }
		
		//FunctionName
		public RuleCall getFuncNameFunctionNameParserRuleCall_1_0() { return cFuncNameFunctionNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//process=Process
		public Assignment getProcessAssignment_3() { return cProcessAssignment_3; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_3_0() { return cProcessProcessParserRuleCall_3_0; }
		
		//(',' parameterlist=InterfaceParameterList)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//parameterlist=InterfaceParameterList
		public Assignment getParameterlistAssignment_4_1() { return cParameterlistAssignment_4_1; }
		
		//InterfaceParameterList
		public RuleCall getParameterlistInterfaceParameterListParserRuleCall_4_1_0() { return cParameterlistInterfaceParameterListParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class RemoveProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.RemoveProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RemoveProcess:
		//	'remove' process=Process ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'remove' process=Process ';'
		public Group getGroup() { return cGroup; }
		
		//'remove'
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class MoveProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.MoveProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColToSchedulerSetParserRuleCall_3_0 = (RuleCall)cColToAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MoveProcess:
		//	'move' process=Process 'to' colTo=SchedulerSet ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'move' process=Process 'to' colTo=SchedulerSet ';'
		public Group getGroup() { return cGroup; }
		
		//'move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//colTo=SchedulerSet
		public Assignment getColToAssignment_3() { return cColToAssignment_3; }
		
		//SchedulerSet
		public RuleCall getColToSchedulerSetParserRuleCall_3_0() { return cColToSchedulerSetParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ReorderProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ReorderProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReorderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColToSchedulerSetParserRuleCall_3_0 = (RuleCall)cColToAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ReorderProcess:
		//	'reorder' process=Process 'in' colTo=SchedulerSet ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'reorder' process=Process 'in' colTo=SchedulerSet ';'
		public Group getGroup() { return cGroup; }
		
		//'reorder'
		public Keyword getReorderKeyword_0() { return cReorderKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//colTo=SchedulerSet
		public Assignment getColToAssignment_3() { return cColToAssignment_3; }
		
		//SchedulerSet
		public RuleCall getColToSchedulerSetParserRuleCall_3_0() { return cColToSchedulerSetParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SetProcessInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SetProcessInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColToSchedulerSetParserRuleCall_3_0 = (RuleCall)cColToAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SetProcessInstance:
		//	'set' process=Process 'to' colTo=SchedulerSet ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'set' process=Process 'to' colTo=SchedulerSet ';'
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//colTo=SchedulerSet
		public Assignment getColToAssignment_3() { return cColToAssignment_3; }
		
		//SchedulerSet
		public RuleCall getColToSchedulerSetParserRuleCall_3_0() { return cColToSchedulerSetParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class LoopProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.LoopProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProcessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPnameProcessParserRuleCall_3_0 = (RuleCall)cPnameAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColFromAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColFromSchedulerSetParserRuleCall_5_0 = (RuleCall)cColFromAssignment_5.eContents().get(0);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//LoopProcess:
		//	'for' 'each' 'process' pname=Process 'in' colFrom=SchedulerSet statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' 'each' 'process' pname=Process 'in' colFrom=SchedulerSet statement=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'each'
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }
		
		//'process'
		public Keyword getProcessKeyword_2() { return cProcessKeyword_2; }
		
		//pname=Process
		public Assignment getPnameAssignment_3() { return cPnameAssignment_3; }
		
		//Process
		public RuleCall getPnameProcessParserRuleCall_3_0() { return cPnameProcessParserRuleCall_3_0; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//colFrom=SchedulerSet
		public Assignment getColFromAssignment_5() { return cColFromAssignment_5; }
		
		//SchedulerSet
		public RuleCall getColFromSchedulerSetParserRuleCall_5_0() { return cColFromSchedulerSetParserRuleCall_5_0; }
		
		//statement=Statement
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_6_0() { return cStatementStatementParserRuleCall_6_0; }
	}
	public class ChangeActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChangeAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChangeActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStaAlternatives_3_0 = (Alternatives)cStaAssignment_3.eContents().get(0);
		private final RuleCall cStaChangeValueParserRuleCall_3_0_0 = (RuleCall)cStaAlternatives_3_0.eContents().get(0);
		private final RuleCall cStaAssertStatementParserRuleCall_3_0_1 = (RuleCall)cStaAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChangeAction:
		//	{ChangeAction} 'set' '{' sta+=(ChangeValue | AssertStatement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ChangeAction} 'set' '{' sta+=(ChangeValue | AssertStatement)* '}'
		public Group getGroup() { return cGroup; }
		
		//{ChangeAction}
		public Action getChangeActionAction_0() { return cChangeActionAction_0; }
		
		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//sta+=(ChangeValue | AssertStatement)*
		public Assignment getStaAssignment_3() { return cStaAssignment_3; }
		
		//(ChangeValue | AssertStatement)
		public Alternatives getStaAlternatives_3_0() { return cStaAlternatives_3_0; }
		
		//ChangeValue
		public RuleCall getStaChangeValueParserRuleCall_3_0_0() { return cStaChangeValueParserRuleCall_3_0_0; }
		
		//AssertStatement
		public RuleCall getStaAssertStatementParserRuleCall_3_0_1() { return cStaAssertStatementParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GetProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GetProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColFromSchedulerSetParserRuleCall_3_0 = (RuleCall)cColFromAssignment_3.eContents().get(0);
		private final Assignment cChangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChangeChangeActionParserRuleCall_4_0 = (RuleCall)cChangeAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRunKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cTimeKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cEqualsSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cTimeAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cTimeExpressionParserRuleCall_7_3_0 = (RuleCall)cTimeAssignment_7_3.eContents().get(0);
		private final Keyword cThenKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cReturnKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Keyword cToKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Assignment cColToAssignment_7_7 = (Assignment)cGroup_7.eContents().get(7);
		private final RuleCall cColToSchedulerSetParserRuleCall_7_7_0 = (RuleCall)cColToAssignment_7_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//GetProcess:
		//	'get' 'process' 'from' colFrom=SchedulerSet
		//	change=ChangeAction? 'to' 'run' ('in' 'time' '=' time=Expression 'then' 'return' 'to' colTo=SchedulerSet)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'get' 'process' 'from' colFrom=SchedulerSet change=ChangeAction? 'to' 'run' ('in' 'time' '=' time=Expression 'then'
		//'return' 'to' colTo=SchedulerSet)? ';'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//colFrom=SchedulerSet
		public Assignment getColFromAssignment_3() { return cColFromAssignment_3; }
		
		//SchedulerSet
		public RuleCall getColFromSchedulerSetParserRuleCall_3_0() { return cColFromSchedulerSetParserRuleCall_3_0; }
		
		//change=ChangeAction?
		public Assignment getChangeAssignment_4() { return cChangeAssignment_4; }
		
		//ChangeAction
		public RuleCall getChangeChangeActionParserRuleCall_4_0() { return cChangeChangeActionParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//'run'
		public Keyword getRunKeyword_6() { return cRunKeyword_6; }
		
		//('in' 'time' '=' time=Expression 'then' 'return' 'to' colTo=SchedulerSet)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'in'
		public Keyword getInKeyword_7_0() { return cInKeyword_7_0; }
		
		//'time'
		public Keyword getTimeKeyword_7_1() { return cTimeKeyword_7_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_2() { return cEqualsSignKeyword_7_2; }
		
		//time=Expression
		public Assignment getTimeAssignment_7_3() { return cTimeAssignment_7_3; }
		
		//Expression
		public RuleCall getTimeExpressionParserRuleCall_7_3_0() { return cTimeExpressionParserRuleCall_7_3_0; }
		
		//'then'
		public Keyword getThenKeyword_7_4() { return cThenKeyword_7_4; }
		
		//'return'
		public Keyword getReturnKeyword_7_5() { return cReturnKeyword_7_5; }
		
		//'to'
		public Keyword getToKeyword_7_6() { return cToKeyword_7_6; }
		
		//colTo=SchedulerSet
		public Assignment getColToAssignment_7_7() { return cColToAssignment_7_7; }
		
		//SchedulerSet
		public RuleCall getColToSchedulerSetParserRuleCall_7_7_0() { return cColToSchedulerSetParserRuleCall_7_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ExecuteProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ExecuteProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_1_0 = (RuleCall)cProcessAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExecuteProcess:
		//	'execute' process=Process ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'execute' process=Process ';'
		public Group getGroup() { return cGroup; }
		
		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }
		
		//process=Process
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_1_0() { return cProcessProcessParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenBlockStatementParserRuleCall_4_0 = (RuleCall)cThenBlockAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockStatementParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	'if' '(' condition=Expression ')'
		//	thenBlock=Statement (=> 'else' elseBlock=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expression ')' thenBlock=Statement (=> 'else' elseBlock=Statement)?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//thenBlock=Statement
		public Assignment getThenBlockAssignment_4() { return cThenBlockAssignment_4; }
		
		//Statement
		public RuleCall getThenBlockStatementParserRuleCall_4_0() { return cThenBlockStatementParserRuleCall_4_0; }
		
		//(=> 'else' elseBlock=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Statement
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Statement
		public RuleCall getElseBlockStatementParserRuleCall_5_1_0() { return cElseBlockStatementParserRuleCall_5_1_0; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockStatement:
		//	{BlockStatement}
		//	'{' statements+=Statement* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockStatement} '{' statements+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NewProcessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.NewProcessStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementNewElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMaxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMaxINTTerminalRuleCall_2_1_0 = (RuleCall)cMaxAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NewProcessStatement:
		//	'new' element=NewElement (',' max=INT)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'new' element=NewElement (',' max=INT)? ';'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//element=NewElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//NewElement
		public RuleCall getElementNewElementParserRuleCall_1_0() { return cElementNewElementParserRuleCall_1_0; }
		
		//(',' max=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//max=INT
		public Assignment getMaxAssignment_2_1() { return cMaxAssignment_2_1; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_2_1_0() { return cMaxINTTerminalRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NewElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.NewElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessProcessParserRuleCall_0_0 = (RuleCall)cProcessAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParaAssignAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParaAssignParaValueParserRuleCall_2_0_0 = (RuleCall)cParaAssignAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParaAssignAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParaAssignParaValueParserRuleCall_2_1_1_0 = (RuleCall)cParaAssignAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NewElement:
		//	process=Process '(' (paraAssign+=ParaValue (',' paraAssign+=ParaValue)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//process=Process '(' (paraAssign+=ParaValue (',' paraAssign+=ParaValue)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//process=Process
		public Assignment getProcessAssignment_0() { return cProcessAssignment_0; }
		
		//Process
		public RuleCall getProcessProcessParserRuleCall_0_0() { return cProcessProcessParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(paraAssign+=ParaValue (',' paraAssign+=ParaValue)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//paraAssign+=ParaValue
		public Assignment getParaAssignAssignment_2_0() { return cParaAssignAssignment_2_0; }
		
		//ParaValue
		public RuleCall getParaAssignParaValueParserRuleCall_2_0_0() { return cParaAssignParaValueParserRuleCall_2_0_0; }
		
		//(',' paraAssign+=ParaValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//paraAssign+=ParaValue
		public Assignment getParaAssignAssignment_2_1_1() { return cParaAssignAssignment_2_1_1; }
		
		//ParaValue
		public RuleCall getParaAssignParaValueParserRuleCall_2_1_1_0() { return cParaAssignParaValueParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ParaValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParaValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNumAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNumNumValueParserRuleCall_0_1_0 = (RuleCall)cNumAssignment_0_1.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBoolBoolValueParserRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		
		//ParaValue:
		//	{ParaValue} num=NumValue | bool=BoolValue | id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParaValue} num=NumValue | bool=BoolValue | id=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ParaValue} num=NumValue
		public Group getGroup_0() { return cGroup_0; }
		
		//{ParaValue}
		public Action getParaValueAction_0_0() { return cParaValueAction_0_0; }
		
		//num=NumValue
		public Assignment getNumAssignment_0_1() { return cNumAssignment_0_1; }
		
		//NumValue
		public RuleCall getNumNumValueParserRuleCall_0_1_0() { return cNumNumValueParserRuleCall_0_1_0; }
		
		//bool=BoolValue
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//BoolValue
		public RuleCall getBoolBoolValueParserRuleCall_1_0() { return cBoolBoolValueParserRuleCall_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
	}
	public class AssertStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.AssertStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AssertStatement:
		//	'assert' expr=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'assert' expr=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'assert'
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PrintStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PrintStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStExpressionParserRuleCall_1_0 = (RuleCall)cStAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PrintStatement:
		//	'print' st=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'print' st=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'print'
		public Keyword getPrintKeyword_0() { return cPrintKeyword_0; }
		
		//st=Expression
		public Assignment getStAssignment_1() { return cStAssignment_1; }
		
		//Expression
		public RuleCall getStExpressionParserRuleCall_1_0() { return cStExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PrintLogStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PrintLogStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrintlogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStExpressionParserRuleCall_1_0 = (RuleCall)cStAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PrintLogStatement:
		//	'printlog' st=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'printlog' st=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'printlog'
		public Keyword getPrintlogKeyword_0() { return cPrintlogKeyword_0; }
		
		//st=Expression
		public Assignment getStAssignment_1() { return cStAssignment_1; }
		
		//Expression
		public RuleCall getStExpressionParserRuleCall_1_0() { return cStExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GenCodeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenCodeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCompAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCompIDTerminalRuleCall_1_0_0 = (RuleCall)cCompAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStExpressionParserRuleCall_2_0 = (RuleCall)cStAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GenCodeStatement:
		//	'gen' (comp=ID ',')? st=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'gen' (comp=ID ',')? st=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'gen'
		public Keyword getGenKeyword_0() { return cGenKeyword_0; }
		
		//(comp=ID ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//comp=ID
		public Assignment getCompAssignment_1_0() { return cCompAssignment_1_0; }
		
		//ID
		public RuleCall getCompIDTerminalRuleCall_1_0_0() { return cCompIDTerminalRuleCall_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//st=Expression
		public Assignment getStAssignment_2() { return cStAssignment_2; }
		
		//Expression
		public RuleCall getStExpressionParserRuleCall_2_0() { return cStExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class GenLnCodeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenLnCodeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenlnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCompAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCompIDTerminalRuleCall_1_0_0 = (RuleCall)cCompAssignment_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStExpressionParserRuleCall_2_0 = (RuleCall)cStAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//GenLnCodeStatement:
		//	'genln' (comp=ID ',')? st=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'genln' (comp=ID ',')? st=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//'genln'
		public Keyword getGenlnKeyword_0() { return cGenlnKeyword_0; }
		
		//(comp=ID ',')?
		public Group getGroup_1() { return cGroup_1; }
		
		//comp=ID
		public Assignment getCompAssignment_1_0() { return cCompAssignment_1_0; }
		
		//ID
		public RuleCall getCompIDTerminalRuleCall_1_0_0() { return cCompIDTerminalRuleCall_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//st=Expression
		public Assignment getStAssignment_2() { return cStAssignment_2; }
		
		//Expression
		public RuleCall getStExpressionParserRuleCall_2_0() { return cStExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ChangeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChangeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChangeValueUnOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangeValueExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangeListValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ChangeValue:
		//	ChangeValueUnOp | ChangeValueExpression | ChangeListValue;
		@Override public ParserRule getRule() { return rule; }
		
		//ChangeValueUnOp | ChangeValueExpression | ChangeListValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ChangeValueUnOp
		public RuleCall getChangeValueUnOpParserRuleCall_0() { return cChangeValueUnOpParserRuleCall_0; }
		
		//ChangeValueExpression
		public RuleCall getChangeValueExpressionParserRuleCall_1() { return cChangeValueExpressionParserRuleCall_1; }
		
		//ChangeListValue
		public RuleCall getChangeListValueParserRuleCall_2() { return cChangeListValueParserRuleCall_2; }
	}
	public class ChangeValueUnOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChangeValueUnOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarQualifiedNamesParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0 = (Alternatives)cOpAssignment_1.eContents().get(0);
		private final Keyword cOpPlusSignPlusSignKeyword_1_0_0 = (Keyword)cOpAlternatives_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusHyphenMinusKeyword_1_0_1 = (Keyword)cOpAlternatives_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ChangeValueUnOp:
		//	var=QualifiedNames op=('++' | '--') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//var=QualifiedNames op=('++' | '--') ';'
		public Group getGroup() { return cGroup; }
		
		//var=QualifiedNames
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//QualifiedNames
		public RuleCall getVarQualifiedNamesParserRuleCall_0_0() { return cVarQualifiedNamesParserRuleCall_0_0; }
		
		//op=('++' | '--')
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//('++' | '--')
		public Alternatives getOpAlternatives_1_0() { return cOpAlternatives_1_0; }
		
		//'++'
		public Keyword getOpPlusSignPlusSignKeyword_1_0_0() { return cOpPlusSignPlusSignKeyword_1_0_0; }
		
		//'--'
		public Keyword getOpHyphenMinusHyphenMinusKeyword_1_0_1() { return cOpHyphenMinusHyphenMinusKeyword_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ChangeValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChangeValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarQualifiedNamesParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChangeValueExpression:
		//	var=QualifiedNames '=' exp=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//var=QualifiedNames '=' exp=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//var=QualifiedNames
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//QualifiedNames
		public RuleCall getVarQualifiedNamesParserRuleCall_0_0() { return cVarQualifiedNamesParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ChangeListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ChangeListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLvarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLvarListElementParserRuleCall_0_0 = (RuleCall)cLvarAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////ChangeArrayValue : avar = ID '[' expr = Expression ']' '=' exp=Expression ';';
		//ChangeListValue:
		//	lvar=ListElement '=' exp=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//lvar=ListElement '=' exp=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//lvar=ListElement
		public Assignment getLvarAssignment_0() { return cLvarAssignment_0; }
		
		//ListElement
		public RuleCall getLvarListElementParserRuleCall_0_0() { return cLvarListElementParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpliesParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////MulOrDiv returns Expression:
		////	Primary (
		////		{MulOrDiv.left=current} op=('*'|'/')
		////		right=Primary
		////	)*;
		//MulOrDiv Expression:
		//	Implies ({MulOrDiv.left=current} op=('*' | '/') right=Implies)*
		@Override public ParserRule getRule() { return rule; }
		
		//Implies ({MulOrDiv.left=current} op=('*' | '/') right=Implies)*
		public Group getGroup() { return cGroup; }
		
		//Implies
		public RuleCall getImpliesParserRuleCall_0() { return cImpliesParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Implies)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Implies
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Implies
		public RuleCall getRightImpliesParserRuleCall_1_2_0() { return cRightImpliesParserRuleCall_1_2_0; }
	}
	public class ImpliesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Implies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Implies Expression:
		//	Primary ({Implies.left=current} op='=>' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Implies.left=current} op='=>' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Implies.left=current} op='=>' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Implies.left=current}
		public Action getImpliesLeftAction_1_0() { return cImpliesLeftAction_1_0; }
		
		//op='=>'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'=>'
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEmptyExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFullExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInPIDExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInPExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExistExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cExistPIDParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cExistPParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cGetIDExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cHasNameExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cHasIDParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cHasIDINTParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cGetNameParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//Primary Expression:
		//	'(' Expression ')' | {Not} '!' expression=Primary | Atomic | EmptyExpression | FullExpression | NullExpression |
		//	InExpression | InPIDExpression | InPExpression | ExistExpression | ExistPID | ExistP | GetIDExpression |
		//	HasNameExpression | HasID | HasIDINT | GetName
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {Not} '!' expression=Primary | Atomic | EmptyExpression | FullExpression | NullExpression |
		//InExpression | InPIDExpression | InPExpression | ExistExpression | ExistPID | ExistP | GetIDExpression |
		//HasNameExpression | HasID | HasIDINT | GetName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
		
		//EmptyExpression
		public RuleCall getEmptyExpressionParserRuleCall_3() { return cEmptyExpressionParserRuleCall_3; }
		
		//FullExpression
		public RuleCall getFullExpressionParserRuleCall_4() { return cFullExpressionParserRuleCall_4; }
		
		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_5() { return cNullExpressionParserRuleCall_5; }
		
		//InExpression
		public RuleCall getInExpressionParserRuleCall_6() { return cInExpressionParserRuleCall_6; }
		
		//InPIDExpression
		public RuleCall getInPIDExpressionParserRuleCall_7() { return cInPIDExpressionParserRuleCall_7; }
		
		//InPExpression
		public RuleCall getInPExpressionParserRuleCall_8() { return cInPExpressionParserRuleCall_8; }
		
		//ExistExpression
		public RuleCall getExistExpressionParserRuleCall_9() { return cExistExpressionParserRuleCall_9; }
		
		//ExistPID
		public RuleCall getExistPIDParserRuleCall_10() { return cExistPIDParserRuleCall_10; }
		
		//ExistP
		public RuleCall getExistPParserRuleCall_11() { return cExistPParserRuleCall_11; }
		
		//GetIDExpression
		public RuleCall getGetIDExpressionParserRuleCall_12() { return cGetIDExpressionParserRuleCall_12; }
		
		//HasNameExpression
		public RuleCall getHasNameExpressionParserRuleCall_13() { return cHasNameExpressionParserRuleCall_13; }
		
		//HasID
		public RuleCall getHasIDParserRuleCall_14() { return cHasIDParserRuleCall_14; }
		
		//HasIDINT
		public RuleCall getHasIDINTParserRuleCall_15() { return cHasIDINTParserRuleCall_15; }
		
		//GetName
		public RuleCall getGetNameParserRuleCall_16() { return cGetNameParserRuleCall_16; }
	}
	public class GetIDExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GetIDExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGet_pidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPNCHAR_SEQUENCETerminalRuleCall_2_0 = (RuleCall)cPNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// | ExistsProcessExpression | AllExpression ;
		////GetName: 'get_name' '('proc = Process ')';
		////EmptyExpression: 'empty' '(' col= [SchedulerSet] ')' ;	
		////InExpression:  col = [SchedulerSet] '.' 'hasProcess' '(' proc = ID ')';
		////ExistExpression: '(' '<>' proc = Process 'in' col = SchedulerSet ':' bexpr = Or ')';
		////AllExpression: '(' '[]' proc = Process 'in' col = SchedulerSet ':' bexpr = Or ')';
		//GetIDExpression:
		//	'get_pid' '(' pN=CHAR_SEQUENCE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'get_pid' '(' pN=CHAR_SEQUENCE ')'
		public Group getGroup() { return cGroup; }
		
		//'get_pid'
		public Keyword getGet_pidKeyword_0() { return cGet_pidKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pN=CHAR_SEQUENCE
		public Assignment getPNAssignment_2() { return cPNAssignment_2; }
		
		//CHAR_SEQUENCE
		public RuleCall getPNCHAR_SEQUENCETerminalRuleCall_2_0() { return cPNCHAR_SEQUENCETerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class EmptyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EmptyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColSchedulerSetParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsEmptyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EmptyExpression:
		//	col=SchedulerSet '.' 'isEmpty' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//col=SchedulerSet '.' 'isEmpty' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_0() { return cColAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_0_0() { return cColSchedulerSetParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'isEmpty'
		public Keyword getIsEmptyKeyword_2() { return cIsEmptyKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColSchedulerSetParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsFullKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FullExpression:
		//	col=SchedulerSet '.' 'isFull' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//col=SchedulerSet '.' 'isFull' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_0() { return cColAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_0_0() { return cColSchedulerSetParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'isFull'
		public Keyword getIsFullKeyword_2() { return cIsFullKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColSchedulerSetParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContainsProcessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPNCHAR_SEQUENCETerminalRuleCall_4_0 = (RuleCall)cPNAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InExpression:
		//	col=SchedulerSet '.' 'containsProcess' '(' pN=CHAR_SEQUENCE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//col=SchedulerSet '.' 'containsProcess' '(' pN=CHAR_SEQUENCE ')'
		public Group getGroup() { return cGroup; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_0() { return cColAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_0_0() { return cColSchedulerSetParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'containsProcess'
		public Keyword getContainsProcessKeyword_2() { return cContainsProcessKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//pN=CHAR_SEQUENCE
		public Assignment getPNAssignment_4() { return cPNAssignment_4; }
		
		//CHAR_SEQUENCE
		public RuleCall getPNCHAR_SEQUENCETerminalRuleCall_4_0() { return cPNCHAR_SEQUENCETerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InPIDExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InPIDExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColSchedulerSetParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContainsProcessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InPIDExpression:
		//	col=SchedulerSet '.' 'containsProcess' '(' id=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//col=SchedulerSet '.' 'containsProcess' '(' id=ID ')'
		public Group getGroup() { return cGroup; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_0() { return cColAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_0_0() { return cColSchedulerSetParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'containsProcess'
		public Keyword getContainsProcessKeyword_2() { return cContainsProcessKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class InPExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.InPExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColSchedulerSetParserRuleCall_0_0 = (RuleCall)cColAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cContainsProcessKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InPExpression:
		//	col=SchedulerSet '.' 'containsProcess' '(' id=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//col=SchedulerSet '.' 'containsProcess' '(' id=INT ')'
		public Group getGroup() { return cGroup; }
		
		//col=SchedulerSet
		public Assignment getColAssignment_0() { return cColAssignment_0; }
		
		//SchedulerSet
		public RuleCall getColSchedulerSetParserRuleCall_0_0() { return cColSchedulerSetParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'containsProcess'
		public Keyword getContainsProcessKeyword_2() { return cContainsProcessKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ExistExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ExistExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPNAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPNCHAR_SEQUENCETerminalRuleCall_2_0 = (RuleCall)cPNAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExistExpression:
		//	'exists' '(' pN=CHAR_SEQUENCE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'exists' '(' pN=CHAR_SEQUENCE ')'
		public Group getGroup() { return cGroup; }
		
		//'exists'
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pN=CHAR_SEQUENCE
		public Assignment getPNAssignment_2() { return cPNAssignment_2; }
		
		//CHAR_SEQUENCE
		public RuleCall getPNCHAR_SEQUENCETerminalRuleCall_2_0() { return cPNCHAR_SEQUENCETerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExistPIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ExistPID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExistPID:
		//	'exists' '(' id=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'exists' '(' id=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'exists'
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ExistPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ExistP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExistsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdINTTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExistP:
		//	'exists' '(' id=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'exists' '(' id=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'exists'
		public Keyword getExistsKeyword_0() { return cExistsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//id=INT
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_2_0() { return cIdINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.NullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcNameProcessParserRuleCall_0_0 = (RuleCall)cProcNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsNullKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NullExpression:
		//	procName=Process '.' 'isNull' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//procName=Process '.' 'isNull' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//procName=Process
		public Assignment getProcNameAssignment_0() { return cProcNameAssignment_0; }
		
		//Process
		public RuleCall getProcNameProcessParserRuleCall_0_0() { return cProcNameProcessParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'isNull'
		public Keyword getIsNullKeyword_2() { return cIsNullKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class HasNameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.HasNameExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcProcessParserRuleCall_0_0 = (RuleCall)cProcAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHasNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPNCHAR_SEQUENCETerminalRuleCall_4_0 = (RuleCall)cPNAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HasNameExpression:
		//	proc=Process '.' 'hasName' '(' pN=CHAR_SEQUENCE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//proc=Process '.' 'hasName' '(' pN=CHAR_SEQUENCE ')'
		public Group getGroup() { return cGroup; }
		
		//proc=Process
		public Assignment getProcAssignment_0() { return cProcAssignment_0; }
		
		//Process
		public RuleCall getProcProcessParserRuleCall_0_0() { return cProcProcessParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'hasName'
		public Keyword getHasNameKeyword_2() { return cHasNameKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//pN=CHAR_SEQUENCE
		public Assignment getPNAssignment_4() { return cPNAssignment_4; }
		
		//CHAR_SEQUENCE
		public RuleCall getPNCHAR_SEQUENCETerminalRuleCall_4_0() { return cPNCHAR_SEQUENCETerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class HasIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.HasID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcProcessParserRuleCall_0_0 = (RuleCall)cProcAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHasIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIDTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HasID:
		//	proc=Process '.' 'hasID' '(' id=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//proc=Process '.' 'hasID' '(' id=ID ')'
		public Group getGroup() { return cGroup; }
		
		//proc=Process
		public Assignment getProcAssignment_0() { return cProcAssignment_0; }
		
		//Process
		public RuleCall getProcProcessParserRuleCall_0_0() { return cProcProcessParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'hasID'
		public Keyword getHasIDKeyword_2() { return cHasIDKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//id=ID
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_4_0() { return cIdIDTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class HasIDINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.HasIDINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcProcessParserRuleCall_0_0 = (RuleCall)cProcAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHasIDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//HasIDINT:
		//	proc=Process '.' 'hasID' '(' id=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//proc=Process '.' 'hasID' '(' id=INT ')'
		public Group getGroup() { return cGroup; }
		
		//proc=Process
		public Assignment getProcAssignment_0() { return cProcAssignment_0; }
		
		//Process
		public RuleCall getProcProcessParserRuleCall_0_0() { return cProcProcessParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'hasID'
		public Keyword getHasIDKeyword_2() { return cHasIDKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class GetNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GetName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcProcessParserRuleCall_0_0 = (RuleCall)cProcAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cGetNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GetName:
		//	proc=Process '.' 'getName' '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//proc=Process '.' 'getName' '(' ')'
		public Group getGroup() { return cGroup; }
		
		//proc=Process
		public Assignment getProcAssignment_0() { return cProcAssignment_0; }
		
		//Process
		public RuleCall getProcProcessParserRuleCall_0_0() { return cProcProcessParserRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'getName'
		public Keyword getGetNameKeyword_2() { return cGetNameKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNumValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCurentCoreAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cValueCurrent_coreKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStateIDAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cStateIDAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cStateIDStateIDKeyword_3_1_0 = (Keyword)cStateIDAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBranchIDAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cBranchIDAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cBranchIDBranchIDKeyword_4_1_0 = (Keyword)cBranchIDAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cActionAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cActionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Keyword cActionGetActionKeyword_5_1_0 = (Keyword)cActionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStepAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cStepAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cStepGetStepKeyword_6_1_0 = (Keyword)cStepAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cTotalStepAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cTotalstepAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final Keyword cTotalstepGetTotalStepKeyword_7_1_0 = (Keyword)cTotalstepAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cGetInstanceAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cProcNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cProcNameProcessParserRuleCall_8_1_0 = (RuleCall)cProcNameAssignment_8_1.eContents().get(0);
		private final Keyword cFullStopKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cGetInstanceIDKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cGetPIDAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cProcNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cProcNameProcessParserRuleCall_9_1_0 = (RuleCall)cProcNameAssignment_9_1.eContents().get(0);
		private final Keyword cFullStopKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cGetPIDKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_9_5 = (Keyword)cGroup_9.eContents().get(5);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cInstanceIDAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cInstanceIDAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final Keyword cInstanceIDInstanceIDKeyword_10_1_0 = (Keyword)cInstanceIDAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cProcessIDAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cPIDAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final Keyword cPIDPIDKeyword_11_1_0 = (Keyword)cPIDAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cProcessNameAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Assignment cPNameAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final Keyword cPNamePNameKeyword_12_1_0 = (Keyword)cPNameAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cBehaviorAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Assignment cBehaviorAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final Keyword cBehaviorActionsKeyword_13_1_0 = (Keyword)cBehaviorAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cContainsAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Assignment cContainsAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final Keyword cContainsContainsKeyword_14_1_0 = (Keyword)cContainsAssignment_14_1.eContents().get(0);
		private final Assignment cVarAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final RuleCall cVarQualifiedNamesParserRuleCall_15_0 = (RuleCall)cVarAssignment_15.eContents().get(0);
		private final Assignment cLeleAssignment_16 = (Assignment)cAlternatives.eContents().get(16);
		private final RuleCall cLeleListElementParserRuleCall_16_0 = (RuleCall)cLeleAssignment_16.eContents().get(0);
		private final Assignment cCharseqAssignment_17 = (Assignment)cAlternatives.eContents().get(17);
		private final RuleCall cCharseqCHAR_SEQUENCETerminalRuleCall_17_0 = (RuleCall)cCharseqAssignment_17.eContents().get(0);
		private final Assignment cStringAssignment_18 = (Assignment)cAlternatives.eContents().get(18);
		private final RuleCall cStringSTRINGTerminalRuleCall_18_0 = (RuleCall)cStringAssignment_18.eContents().get(0);
		private final Assignment cSysvarAssignment_19 = (Assignment)cAlternatives.eContents().get(19);
		private final RuleCall cSysvarSysVarParserRuleCall_19_0 = (RuleCall)cSysvarAssignment_19.eContents().get(0);
		
		//Atomic:
		//	{IntConstant} value=NumValue | {CurentCore} value='current_core' | {BoolConstant} value=('true' | 'false') | {StateID}
		//	stateID='<StateID>' | {BranchID} branchID='<BranchID>' | {Action} action='getAction()' | {Step} step='getStep()' |
		//	{TotalStep} totalstep='getTotalStep()' | {GetInstance} procName=Process '.' 'getInstanceID' '(' ')' | {GetPID}
		//	procName=Process '.' 'getPID' '(' ')' | {InstanceID} instanceID='<InstanceID>' | {ProcessID} pID='<PID>' |
		//	{ProcessName} pName='<PName>' | {Behavior} behavior='<actions>' | {Contains} contains='<contains>' |
		//	var=QualifiedNames | lele=ListElement | charseq=CHAR_SEQUENCE | string=STRING | sysvar=SysVar
		//	//refitem = RefItem
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=NumValue | {CurentCore} value='current_core' | {BoolConstant} value=('true' | 'false') | {StateID}
		//stateID='<StateID>' | {BranchID} branchID='<BranchID>' | {Action} action='getAction()' | {Step} step='getStep()' |
		//{TotalStep} totalstep='getTotalStep()' | {GetInstance} procName=Process '.' 'getInstanceID' '(' ')' | {GetPID}
		//procName=Process '.' 'getPID' '(' ')' | {InstanceID} instanceID='<InstanceID>' | {ProcessID} pID='<PID>' |
		//{ProcessName} pName='<PName>' | {Behavior} behavior='<actions>' | {Contains} contains='<contains>' | var=QualifiedNames
		//| lele=ListElement | charseq=CHAR_SEQUENCE | string=STRING | sysvar=SysVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=NumValue
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=NumValue
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NumValue
		public RuleCall getValueNumValueParserRuleCall_0_1_0() { return cValueNumValueParserRuleCall_0_1_0; }
		
		//{CurentCore} value='current_core'
		public Group getGroup_1() { return cGroup_1; }
		
		//{CurentCore}
		public Action getCurentCoreAction_1_0() { return cCurentCoreAction_1_0; }
		
		//value='current_core'
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//'current_core'
		public Keyword getValueCurrent_coreKeyword_1_1_0() { return cValueCurrent_coreKeyword_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{StateID} stateID='<StateID>'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StateID}
		public Action getStateIDAction_3_0() { return cStateIDAction_3_0; }
		
		//stateID='<StateID>'
		public Assignment getStateIDAssignment_3_1() { return cStateIDAssignment_3_1; }
		
		//'<StateID>'
		public Keyword getStateIDStateIDKeyword_3_1_0() { return cStateIDStateIDKeyword_3_1_0; }
		
		//{BranchID} branchID='<BranchID>'
		public Group getGroup_4() { return cGroup_4; }
		
		//{BranchID}
		public Action getBranchIDAction_4_0() { return cBranchIDAction_4_0; }
		
		//branchID='<BranchID>'
		public Assignment getBranchIDAssignment_4_1() { return cBranchIDAssignment_4_1; }
		
		//'<BranchID>'
		public Keyword getBranchIDBranchIDKeyword_4_1_0() { return cBranchIDBranchIDKeyword_4_1_0; }
		
		//{Action} action='getAction()'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Action}
		public Action getActionAction_5_0() { return cActionAction_5_0; }
		
		//action='getAction()'
		public Assignment getActionAssignment_5_1() { return cActionAssignment_5_1; }
		
		//'getAction()'
		public Keyword getActionGetActionKeyword_5_1_0() { return cActionGetActionKeyword_5_1_0; }
		
		//{Step} step='getStep()'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Step}
		public Action getStepAction_6_0() { return cStepAction_6_0; }
		
		//step='getStep()'
		public Assignment getStepAssignment_6_1() { return cStepAssignment_6_1; }
		
		//'getStep()'
		public Keyword getStepGetStepKeyword_6_1_0() { return cStepGetStepKeyword_6_1_0; }
		
		//{TotalStep} totalstep='getTotalStep()'
		public Group getGroup_7() { return cGroup_7; }
		
		//{TotalStep}
		public Action getTotalStepAction_7_0() { return cTotalStepAction_7_0; }
		
		//totalstep='getTotalStep()'
		public Assignment getTotalstepAssignment_7_1() { return cTotalstepAssignment_7_1; }
		
		//'getTotalStep()'
		public Keyword getTotalstepGetTotalStepKeyword_7_1_0() { return cTotalstepGetTotalStepKeyword_7_1_0; }
		
		//{GetInstance} procName=Process '.' 'getInstanceID' '(' ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{GetInstance}
		public Action getGetInstanceAction_8_0() { return cGetInstanceAction_8_0; }
		
		//procName=Process
		public Assignment getProcNameAssignment_8_1() { return cProcNameAssignment_8_1; }
		
		//Process
		public RuleCall getProcNameProcessParserRuleCall_8_1_0() { return cProcNameProcessParserRuleCall_8_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_8_2() { return cFullStopKeyword_8_2; }
		
		//'getInstanceID'
		public Keyword getGetInstanceIDKeyword_8_3() { return cGetInstanceIDKeyword_8_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_4() { return cLeftParenthesisKeyword_8_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_5() { return cRightParenthesisKeyword_8_5; }
		
		//{GetPID} procName=Process '.' 'getPID' '(' ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{GetPID}
		public Action getGetPIDAction_9_0() { return cGetPIDAction_9_0; }
		
		//procName=Process
		public Assignment getProcNameAssignment_9_1() { return cProcNameAssignment_9_1; }
		
		//Process
		public RuleCall getProcNameProcessParserRuleCall_9_1_0() { return cProcNameProcessParserRuleCall_9_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_9_2() { return cFullStopKeyword_9_2; }
		
		//'getPID'
		public Keyword getGetPIDKeyword_9_3() { return cGetPIDKeyword_9_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_4() { return cLeftParenthesisKeyword_9_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_5() { return cRightParenthesisKeyword_9_5; }
		
		//{InstanceID} instanceID='<InstanceID>'
		public Group getGroup_10() { return cGroup_10; }
		
		//{InstanceID}
		public Action getInstanceIDAction_10_0() { return cInstanceIDAction_10_0; }
		
		//instanceID='<InstanceID>'
		public Assignment getInstanceIDAssignment_10_1() { return cInstanceIDAssignment_10_1; }
		
		//'<InstanceID>'
		public Keyword getInstanceIDInstanceIDKeyword_10_1_0() { return cInstanceIDInstanceIDKeyword_10_1_0; }
		
		//{ProcessID} pID='<PID>'
		public Group getGroup_11() { return cGroup_11; }
		
		//{ProcessID}
		public Action getProcessIDAction_11_0() { return cProcessIDAction_11_0; }
		
		//pID='<PID>'
		public Assignment getPIDAssignment_11_1() { return cPIDAssignment_11_1; }
		
		//'<PID>'
		public Keyword getPIDPIDKeyword_11_1_0() { return cPIDPIDKeyword_11_1_0; }
		
		//{ProcessName} pName='<PName>'
		public Group getGroup_12() { return cGroup_12; }
		
		//{ProcessName}
		public Action getProcessNameAction_12_0() { return cProcessNameAction_12_0; }
		
		//pName='<PName>'
		public Assignment getPNameAssignment_12_1() { return cPNameAssignment_12_1; }
		
		//'<PName>'
		public Keyword getPNamePNameKeyword_12_1_0() { return cPNamePNameKeyword_12_1_0; }
		
		//{Behavior} behavior='<actions>'
		public Group getGroup_13() { return cGroup_13; }
		
		//{Behavior}
		public Action getBehaviorAction_13_0() { return cBehaviorAction_13_0; }
		
		//behavior='<actions>'
		public Assignment getBehaviorAssignment_13_1() { return cBehaviorAssignment_13_1; }
		
		//'<actions>'
		public Keyword getBehaviorActionsKeyword_13_1_0() { return cBehaviorActionsKeyword_13_1_0; }
		
		//{Contains} contains='<contains>'
		public Group getGroup_14() { return cGroup_14; }
		
		//{Contains}
		public Action getContainsAction_14_0() { return cContainsAction_14_0; }
		
		//contains='<contains>'
		public Assignment getContainsAssignment_14_1() { return cContainsAssignment_14_1; }
		
		//'<contains>'
		public Keyword getContainsContainsKeyword_14_1_0() { return cContainsContainsKeyword_14_1_0; }
		
		//var=QualifiedNames
		public Assignment getVarAssignment_15() { return cVarAssignment_15; }
		
		//QualifiedNames
		public RuleCall getVarQualifiedNamesParserRuleCall_15_0() { return cVarQualifiedNamesParserRuleCall_15_0; }
		
		//lele=ListElement
		public Assignment getLeleAssignment_16() { return cLeleAssignment_16; }
		
		//ListElement
		public RuleCall getLeleListElementParserRuleCall_16_0() { return cLeleListElementParserRuleCall_16_0; }
		
		//charseq=CHAR_SEQUENCE
		public Assignment getCharseqAssignment_17() { return cCharseqAssignment_17; }
		
		//CHAR_SEQUENCE
		public RuleCall getCharseqCHAR_SEQUENCETerminalRuleCall_17_0() { return cCharseqCHAR_SEQUENCETerminalRuleCall_17_0; }
		
		//string=STRING
		public Assignment getStringAssignment_18() { return cStringAssignment_18; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_18_0() { return cStringSTRINGTerminalRuleCall_18_0; }
		
		//sysvar=SysVar
		public Assignment getSysvarAssignment_19() { return cSysvarAssignment_19; }
		
		//SysVar
		public RuleCall getSysvarSysVarParserRuleCall_19_0() { return cSysvarSysVarParserRuleCall_19_0; }
	}
	public class SysVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SysVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSysKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVnameIDTerminalRuleCall_2_0 = (RuleCall)cVnameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////RefItem: refid=ID '[' refitem = RefListItem ']';
		//SysVar:
		//	'Sys' '(' vname=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sys' '(' vname=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'Sys'
		public Keyword getSysKeyword_0() { return cSysKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//vname=ID
		public Assignment getVnameAssignment_2() { return cVnameAssignment_2; }
		
		//ID
		public RuleCall getVnameIDTerminalRuleCall_2_0() { return cVnameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QualifiedNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.QualifiedNames");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQualifiedNamesAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropProcessPropertyNameParserRuleCall_2_1_0 = (RuleCall)cPropAssignment_2_1.eContents().get(0);
		
		////AVAR : name = ID '[' expr = Expression ']';
		////ArrayDec: (type=TypeName) aName = DecName '[' num = NumValue ']';
		//QualifiedNames:
		//	{QualifiedNames} name=ID ('.' prop=ProcessPropertyName)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{QualifiedNames} name=ID ('.' prop=ProcessPropertyName)?
		public Group getGroup() { return cGroup; }
		
		//{QualifiedNames}
		public Action getQualifiedNamesAction_0() { return cQualifiedNamesAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('.' prop=ProcessPropertyName)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//prop=ProcessPropertyName
		public Assignment getPropAssignment_2_1() { return cPropAssignment_2_1; }
		
		//ProcessPropertyName
		public RuleCall getPropProcessPropertyNameParserRuleCall_2_1_0() { return cPropProcessPropertyNameParserRuleCall_2_1_0; }
	}
	public class ProperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.Proper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropProcessPropertyNameParserRuleCall_1_0 = (RuleCall)cPropAssignment_1.eContents().get(0);
		
		////QualifiedNames: name = ID (proper = Proper ) ?; //| avar = AvarElement
		////QualifiedNames: {QualifiedNames} ID (=> '.' ID)* ; //| avar = AvarElement
		//Proper:
		//	'.' prop=ProcessPropertyName;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' prop=ProcessPropertyName
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//prop=ProcessPropertyName
		public Assignment getPropAssignment_1() { return cPropAssignment_1; }
		
		//ProcessPropertyName
		public RuleCall getPropProcessPropertyNameParserRuleCall_1_0() { return cPropProcessPropertyNameParserRuleCall_1_0; }
	}
	public class ListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ListElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Assignment cNumAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_2_1_0 = (RuleCall)cNumAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListElement:
		//	name=ID '[' (id=ID | num=INT) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' (id=ID | num=INT) ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(id=ID | num=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//id=ID
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0_0() { return cIdIDTerminalRuleCall_2_0_0; }
		
		//num=INT
		public Assignment getNumAssignment_2_1() { return cNumAssignment_2_1; }
		
		//INT
		public RuleCall getNumINTTerminalRuleCall_2_1_0() { return cNumINTTerminalRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////QualifiedNames: name = ID ( => '[' expr = Expression ']') ?;
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class TypeNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cByteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cByteByteKeyword_0_0 = (Keyword)cByteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBoolBoolKeyword_2_0 = (Keyword)cBoolEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeName:
		//	byte | int | bool;
		public EnumRule getRule() { return rule; }
		
		//byte | int | bool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//byte
		public EnumLiteralDeclaration getByteEnumLiteralDeclaration_0() { return cByteEnumLiteralDeclaration_0; }
		
		//'byte'
		public Keyword getByteByteKeyword_0_0() { return cByteByteKeyword_0_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_2() { return cBoolEnumLiteralDeclaration_2; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_2_0() { return cBoolBoolKeyword_2_0; }
	}
	public class VariableTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTempEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTempInt_tempKeyword_0_0 = (Keyword)cTempEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cByteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cByteByteKeyword_1_0 = (Keyword)cByteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntIntKeyword_2_0 = (Keyword)cIntEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTimeTimeKeyword_3_0 = (Keyword)cTimeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBoolBoolKeyword_4_0 = (Keyword)cBoolEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cClockEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cClockClockKeyword_5_0 = (Keyword)cClockEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cProcessEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cProcessProcessKeyword_6_0 = (Keyword)cProcessEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum VariableType returns String:
		//	temp='int_temp' | byte | int | time | bool | clock | process;
		public EnumRule getRule() { return rule; }
		
		//temp='int_temp' | byte | int | time | bool | clock | process
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//temp='int_temp'
		public EnumLiteralDeclaration getTempEnumLiteralDeclaration_0() { return cTempEnumLiteralDeclaration_0; }
		
		//'int_temp'
		public Keyword getTempInt_tempKeyword_0_0() { return cTempInt_tempKeyword_0_0; }
		
		//byte
		public EnumLiteralDeclaration getByteEnumLiteralDeclaration_1() { return cByteEnumLiteralDeclaration_1; }
		
		//'byte'
		public Keyword getByteByteKeyword_1_0() { return cByteByteKeyword_1_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_2() { return cIntEnumLiteralDeclaration_2; }
		
		//'int'
		public Keyword getIntIntKeyword_2_0() { return cIntIntKeyword_2_0; }
		
		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_3() { return cTimeEnumLiteralDeclaration_3; }
		
		//'time'
		public Keyword getTimeTimeKeyword_3_0() { return cTimeTimeKeyword_3_0; }
		
		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_4() { return cBoolEnumLiteralDeclaration_4; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_4_0() { return cBoolBoolKeyword_4_0; }
		
		//clock
		public EnumLiteralDeclaration getClockEnumLiteralDeclaration_5() { return cClockEnumLiteralDeclaration_5; }
		
		//'clock'
		public Keyword getClockClockKeyword_5_0() { return cClockClockKeyword_5_0; }
		
		//process
		public EnumLiteralDeclaration getProcessEnumLiteralDeclaration_6() { return cProcessEnumLiteralDeclaration_6; }
		
		//'process'
		public Keyword getProcessProcessKeyword_6_0() { return cProcessProcessKeyword_6_0; }
	}
	public class OrderTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.OrderType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreaterGreaterKeyword_0_0 = (Keyword)cGreaterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessLessKeyword_1_0 = (Keyword)cLessEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFifoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFifoFifoKeyword_3_0 = (Keyword)cFifoEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLifoEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLifoLifoKeyword_4_0 = (Keyword)cLifoEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OrderType:
		//	greater | less | equal | fifo | lifo;
		public EnumRule getRule() { return rule; }
		
		//greater | less | equal | fifo | lifo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_0() { return cGreaterEnumLiteralDeclaration_0; }
		
		//'greater'
		public Keyword getGreaterGreaterKeyword_0_0() { return cGreaterGreaterKeyword_0_0; }
		
		//less
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_1() { return cLessEnumLiteralDeclaration_1; }
		
		//'less'
		public Keyword getLessLessKeyword_1_0() { return cLessLessKeyword_1_0; }
		
		//equal
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_2_0() { return cEqualEqualKeyword_2_0; }
		
		//fifo
		public EnumLiteralDeclaration getFifoEnumLiteralDeclaration_3() { return cFifoEnumLiteralDeclaration_3; }
		
		//'fifo'
		public Keyword getFifoFifoKeyword_3_0() { return cFifoFifoKeyword_3_0; }
		
		//lifo
		public EnumLiteralDeclaration getLifoEnumLiteralDeclaration_4() { return cLifoEnumLiteralDeclaration_4; }
		
		//'lifo'
		public Keyword getLifoLifoKeyword_4_0() { return cLifoLifoKeyword_4_0; }
	}
	public class OperationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cQueueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cQueueFifoKeyword_0_0 = (Keyword)cQueueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStackEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStackLifoKeyword_1_0 = (Keyword)cStackEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OperationType returns String:
		//	queue='fifo' | stack='lifo';
		public EnumRule getRule() { return rule; }
		
		//queue='fifo' | stack='lifo'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//queue='fifo'
		public EnumLiteralDeclaration getQueueEnumLiteralDeclaration_0() { return cQueueEnumLiteralDeclaration_0; }
		
		//'fifo'
		public Keyword getQueueFifoKeyword_0_0() { return cQueueFifoKeyword_0_0; }
		
		//stack='lifo'
		public EnumLiteralDeclaration getStackEnumLiteralDeclaration_1() { return cStackEnumLiteralDeclaration_1; }
		
		//'lifo'
		public Keyword getStackLifoKeyword_1_0() { return cStackLifoKeyword_1_0; }
	}
	public class GenOptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.GenOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNdbehaviorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNdbehaviorND_behaviorKeyword_0_0 = (Keyword)cNdbehaviorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSearchingEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSearchingSearchingKeyword_1_0 = (Keyword)cSearchingEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cErrorErrorKeyword_2_0 = (Keyword)cErrorEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPropertyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPropertyPropertyKeyword_3_0 = (Keyword)cPropertyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAllAllKeyword_4_0 = (Keyword)cAllEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum GenOption returns String:
		//	ndbehavior='ND_behavior' | searching='Searching' | error='Error' | property='Property' | all='All';
		public EnumRule getRule() { return rule; }
		
		//ndbehavior='ND_behavior' | searching='Searching' | error='Error' | property='Property' | all='All'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ndbehavior='ND_behavior'
		public EnumLiteralDeclaration getNdbehaviorEnumLiteralDeclaration_0() { return cNdbehaviorEnumLiteralDeclaration_0; }
		
		//'ND_behavior'
		public Keyword getNdbehaviorND_behaviorKeyword_0_0() { return cNdbehaviorND_behaviorKeyword_0_0; }
		
		//searching='Searching'
		public EnumLiteralDeclaration getSearchingEnumLiteralDeclaration_1() { return cSearchingEnumLiteralDeclaration_1; }
		
		//'Searching'
		public Keyword getSearchingSearchingKeyword_1_0() { return cSearchingSearchingKeyword_1_0; }
		
		//error='Error'
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_2() { return cErrorEnumLiteralDeclaration_2; }
		
		//'Error'
		public Keyword getErrorErrorKeyword_2_0() { return cErrorErrorKeyword_2_0; }
		
		//property='Property'
		public EnumLiteralDeclaration getPropertyEnumLiteralDeclaration_3() { return cPropertyEnumLiteralDeclaration_3; }
		
		//'Property'
		public Keyword getPropertyPropertyKeyword_3_0() { return cPropertyPropertyKeyword_3_0; }
		
		//all='All'
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_4() { return cAllEnumLiteralDeclaration_4; }
		
		//'All'
		public Keyword getAllAllKeyword_4_0() { return cAllAllKeyword_4_0; }
	}
	public class ActionNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ActionName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAselectEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAselectSelect_processKeyword_0_0 = (Keyword)cAselectEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnewEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnewNew_processKeyword_1_0 = (Keyword)cAnewEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAclockEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAclockClockKeyword_2_0 = (Keyword)cAclockEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cApretakeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cApretakePre_takeKeyword_3_0 = (Keyword)cApretakeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAposttakeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAposttakePost_takeKeyword_4_0 = (Keyword)cAposttakeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAschedulingactionEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAschedulingactionScheduling_actionKeyword_5_0 = (Keyword)cAschedulingactionEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAprocessactionEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAprocessactionProcess_actionKeyword_6_0 = (Keyword)cAprocessactionEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum ActionName returns String:
		//	aselect='<select_process>' |
		//	anew='<new_process>' |
		//	aclock='<clock>' |
		//	apretake='<pre_take>' |
		//	aposttake='<post_take>' |
		//	aschedulingaction='<scheduling_action>' |
		//	aprocessaction='<process_action>';
		public EnumRule getRule() { return rule; }
		
		//aselect='<select_process>' | anew='<new_process>' | aclock='<clock>' | apretake='<pre_take>' | aposttake='<post_take>' |
		//aschedulingaction='<scheduling_action>' | aprocessaction='<process_action>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//aselect='<select_process>'
		public EnumLiteralDeclaration getAselectEnumLiteralDeclaration_0() { return cAselectEnumLiteralDeclaration_0; }
		
		//'<select_process>'
		public Keyword getAselectSelect_processKeyword_0_0() { return cAselectSelect_processKeyword_0_0; }
		
		//anew='<new_process>'
		public EnumLiteralDeclaration getAnewEnumLiteralDeclaration_1() { return cAnewEnumLiteralDeclaration_1; }
		
		//'<new_process>'
		public Keyword getAnewNew_processKeyword_1_0() { return cAnewNew_processKeyword_1_0; }
		
		//aclock='<clock>'
		public EnumLiteralDeclaration getAclockEnumLiteralDeclaration_2() { return cAclockEnumLiteralDeclaration_2; }
		
		//'<clock>'
		public Keyword getAclockClockKeyword_2_0() { return cAclockClockKeyword_2_0; }
		
		//apretake='<pre_take>'
		public EnumLiteralDeclaration getApretakeEnumLiteralDeclaration_3() { return cApretakeEnumLiteralDeclaration_3; }
		
		//'<pre_take>'
		public Keyword getApretakePre_takeKeyword_3_0() { return cApretakePre_takeKeyword_3_0; }
		
		//aposttake='<post_take>'
		public EnumLiteralDeclaration getAposttakeEnumLiteralDeclaration_4() { return cAposttakeEnumLiteralDeclaration_4; }
		
		//'<post_take>'
		public Keyword getAposttakePost_takeKeyword_4_0() { return cAposttakePost_takeKeyword_4_0; }
		
		//aschedulingaction='<scheduling_action>'
		public EnumLiteralDeclaration getAschedulingactionEnumLiteralDeclaration_5() { return cAschedulingactionEnumLiteralDeclaration_5; }
		
		//'<scheduling_action>'
		public Keyword getAschedulingactionScheduling_actionKeyword_5_0() { return cAschedulingactionScheduling_actionKeyword_5_0; }
		
		//aprocessaction='<process_action>'
		public EnumLiteralDeclaration getAprocessactionEnumLiteralDeclaration_6() { return cAprocessactionEnumLiteralDeclaration_6; }
		
		//'<process_action>'
		public Keyword getAprocessactionProcess_actionKeyword_6_0() { return cAprocessactionProcess_actionKeyword_6_0; }
	}
	public class EventNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.EventName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSelectEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSelectSelect_processKeyword_0_0 = (Keyword)cSelectEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNewEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNewNew_processKeyword_1_0 = (Keyword)cNewEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cClockEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cClockClockKeyword_2_0 = (Keyword)cClockEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPretakeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPretakePre_takeKeyword_3_0 = (Keyword)cPretakeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPosttakeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPosttakePost_takeKeyword_4_0 = (Keyword)cPosttakeEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum EventName returns String:
		//	select='select_process' | new='new_process' | clock |
		//	pretake='pre_take' | posttake='post_take';
		public EnumRule getRule() { return rule; }
		
		//select='select_process' | new='new_process' | clock | pretake='pre_take' | posttake='post_take'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//select='select_process'
		public EnumLiteralDeclaration getSelectEnumLiteralDeclaration_0() { return cSelectEnumLiteralDeclaration_0; }
		
		//'select_process'
		public Keyword getSelectSelect_processKeyword_0_0() { return cSelectSelect_processKeyword_0_0; }
		
		//new='new_process'
		public EnumLiteralDeclaration getNewEnumLiteralDeclaration_1() { return cNewEnumLiteralDeclaration_1; }
		
		//'new_process'
		public Keyword getNewNew_processKeyword_1_0() { return cNewNew_processKeyword_1_0; }
		
		//clock
		public EnumLiteralDeclaration getClockEnumLiteralDeclaration_2() { return cClockEnumLiteralDeclaration_2; }
		
		//'clock'
		public Keyword getClockClockKeyword_2_0() { return cClockClockKeyword_2_0; }
		
		//pretake='pre_take'
		public EnumLiteralDeclaration getPretakeEnumLiteralDeclaration_3() { return cPretakeEnumLiteralDeclaration_3; }
		
		//'pre_take'
		public Keyword getPretakePre_takeKeyword_3_0() { return cPretakePre_takeKeyword_3_0; }
		
		//posttake='post_take'
		public EnumLiteralDeclaration getPosttakeEnumLiteralDeclaration_4() { return cPosttakeEnumLiteralDeclaration_4; }
		
		//'post_take'
		public Keyword getPosttakePost_takeKeyword_4_0() { return cPosttakePost_takeKeyword_4_0; }
	}
	
	private final ModelElements pModel;
	private final GenDSLElements pGenDSL;
	private final ISRElements pISR;
	private final TestDSLElements pTestDSL;
	private final ConfigsElements pConfigs;
	private final ConfigElements pConfig;
	private final ConfigurationElements pConfiguration;
	private final VarInitElements pVarInit;
	private final CollectionInitElements pCollectionInit;
	private final ScenariosElements pScenarios;
	private final PermutationElements pPermutation;
	private final FlowElements pFlow;
	private final ENAMEElements pENAME;
	private final RulesElements pRules;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final SpecificationElements pSpecification;
	private final DeclareSchElements pDeclareSch;
	private final DeclareListElements pDeclareList;
	private final OneDecElements pOneDec;
	private final EnumDecElements pEnumDec;
	private final EnumTypeElements pEnumType;
	private final ConstDecElements pConstDec;
	private final VarDecElements pVarDec;
	private final TypeNameElements eTypeName;
	private final VDecElements pVDec;
	private final ArrayDecElements pArrayDec;
	private final ChanDecElements pChanDec;
	private final DefineElements pDefine;
	private final RefListElements pRefList;
	private final FunctionElements pFunction;
	private final RefListItemElements pRefListItem;
	private final FuncParaElements pFuncPara;
	private final DeclareEventElements pDeclareEvent;
	private final EventElements pEvent;
	private final EventFunctionElements pEventFunction;
	private final ParaListItemElements pParaListItem;
	private final ELABELElements pELABEL;
	private final SequenceActionElements pSequenceAction;
	private final ActionElements pAction;
	private final GUARDElements pGUARD;
	private final IFsElements pIFs;
	private final ASSIGNElements pASSIGN;
	private final OptionsElements pOptions;
	private final ELSEsElements pELSEs;
	private final SKIPElements pSKIP;
	private final ProcessConfigurationElements pProcessConfiguration;
	private final DefBehaviorProcElements pDefBehaviorProc;
	private final ProcTypeElements pProcType;
	private final ProcessTypeElements pProcessType;
	private final AttributeElements pAttribute;
	private final AttDefElements pAttDef;
	private final ConstraintsElements pConstraints;
	private final ConstraintElements pConstraint;
	private final ProcessBehaviorsElements pProcessBehaviors;
	private final ProcessBehaviorElements pProcessBehavior;
	private final ConstructorElements pConstructor;
	private final MethodElements pMethod;
	private final InvariantsElements pInvariants;
	private final AssignParametersElements pAssignParameters;
	private final ProcessDSLElements pProcessDSL;
	private final VariableTypeElements eVariableType;
	private final ValueElements pValue;
	private final ListDefElements pListDef;
	private final ListElements pList;
	private final RangeElements pRange;
	private final NumValueElements pNumValue;
	private final BoolValueElements pBoolValue;
	private final ProcessDataDefElements pProcessDataDef;
	private final ProcessPropertyDefElements pProcessPropertyDef;
	private final ProcessPropertyNameElements pProcessPropertyName;
	private final ProcessDefElements pProcessDef;
	private final ParameterListElements pParameterList;
	private final ParameterAssignElements pParameterAssign;
	private final ParameterNameElements pParameterName;
	private final ProcessElements pProcess;
	private final PropertyAssignmentElements pPropertyAssignment;
	private final ProcessConfigElements pProcessConfig;
	private final ConfigProcessElements pConfigProcess;
	private final SporadicProcessElements pSporadicProcess;
	private final PeriodicProcessElements pPeriodicProcess;
	private final ProcessInitElements pProcessInit;
	private final SetElements pSet;
	private final ElementElements pElement;
	private final SchedulerDSLElements pSchedulerDSL;
	private final DefCoreElements pDefCore;
	private final RTCTLElements pRTCTL;
	private final LTEElements pLTE;
	private final CTL_ATElements pCTL_AT;
	private final VerifyElements pVerify;
	private final OrderingDefElements pOrderingDef;
	private final CompVarDefElements pCompVarDef;
	private final CompVarDefinationElements pCompVarDefination;
	private final CompVarNameElements pCompVarName;
	private final ComparationDefElements pComparationDef;
	private final ComparationNameElements pComparationName;
	private final ReturnStatementElements pReturnStatement;
	private final OrderTypeElements eOrderType;
	private final SchedulerDefElements pSchedulerDef;
	private final SchedulerInitElements pSchedulerInit;
	private final IfDefElements pIfDef;
	private final InterfaceDefElements pInterfaceDef;
	private final InterfaceFunctionElements pInterfaceFunction;
	private final InterfaceParameterListElements pInterfaceParameterList;
	private final InterfaceParameterDeclareElements pInterfaceParameterDeclare;
	private final FunctionNameElements pFunctionName;
	private final VarDefElements pVarDef;
	private final VarDeclElements pVarDecl;
	private final VarBlockDefElements pVarBlockDef;
	private final VarSingleDefElements pVarSingleDef;
	private final VarDefinitionElements pVarDefinition;
	private final VarNameElements pVarName;
	private final SchedulerDataDefElements pSchedulerDataDef;
	private final DataDefElements pDataDef;
	private final DataBlockDefElements pDataBlockDef;
	private final DataSingleDefElements pDataSingleDef;
	private final SchedulerPropertyDefElements pSchedulerPropertyDef;
	private final SchedulerPropertyNameElements pSchedulerPropertyName;
	private final SchedulerCollectionDefElements pSchedulerCollectionDef;
	private final OperationTypeElements eOperationType;
	private final SchedulerSetElements pSchedulerSet;
	private final GenerateElements pGenerate;
	private final GenConfigurationElements pGenConfiguration;
	private final GenerateOptionElements pGenerateOption;
	private final GenOptionElements eGenOption;
	private final DirectoryElements pDirectory;
	private final FileNameElements pFileName;
	private final FileExtensionElements pFileExtension;
	private final TestPartElements pTestPart;
	private final GenPartElements pGenPart;
	private final GenComponentElements pGenComponent;
	private final ComponentElements pComponent;
	private final ProcessGenerationElements pProcessGeneration;
	private final StepGenerationElements pStepGeneration;
	private final TemplateElements pTemplate;
	private final SetTemplateElements pSetTemplate;
	private final BehaviorElements pBehavior;
	private final EventTemplateElements pEventTemplate;
	private final ND_BehaviorElements pND_Behavior;
	private final HandlerDefElements pHandlerDef;
	private final EventDefElements pEventDef;
	private final EventOptElements pEventOpt;
	private final OptElements pOpt;
	private final EventStmElements pEventStm;
	private final StmElements pStm;
	private final ActionNameElements eActionName;
	private final EventNameElements eEventName;
	private final StatementElements pStatement;
	private final JavaCodeElements pJavaCode;
	private final TerminalRule tML_CODE;
	private final DeclareProcessElements pDeclareProcess;
	private final SetProcessElements pSetProcess;
	private final SetExecTimeElements pSetExecTime;
	private final SetReturnColElements pSetReturnCol;
	private final SetReturnSetElements pSetReturnSet;
	private final CheckPointElements pCheckPoint;
	private final PointIDElements pPointID;
	private final CallFunctionElements pCallFunction;
	private final RemoveProcessElements pRemoveProcess;
	private final MoveProcessElements pMoveProcess;
	private final ReorderProcessElements pReorderProcess;
	private final SetProcessInstanceElements pSetProcessInstance;
	private final LoopProcessElements pLoopProcess;
	private final ChangeActionElements pChangeAction;
	private final GetProcessElements pGetProcess;
	private final ExecuteProcessElements pExecuteProcess;
	private final IfStatementElements pIfStatement;
	private final BlockStatementElements pBlockStatement;
	private final NewProcessStatementElements pNewProcessStatement;
	private final NewElementElements pNewElement;
	private final ParaValueElements pParaValue;
	private final AssertStatementElements pAssertStatement;
	private final PrintStatementElements pPrintStatement;
	private final PrintLogStatementElements pPrintLogStatement;
	private final GenCodeStatementElements pGenCodeStatement;
	private final GenLnCodeStatementElements pGenLnCodeStatement;
	private final ChangeValueElements pChangeValue;
	private final ChangeValueUnOpElements pChangeValueUnOp;
	private final ChangeValueExpressionElements pChangeValueExpression;
	private final ChangeListValueElements pChangeListValue;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final ImpliesElements pImplies;
	private final PrimaryElements pPrimary;
	private final GetIDExpressionElements pGetIDExpression;
	private final EmptyExpressionElements pEmptyExpression;
	private final FullExpressionElements pFullExpression;
	private final InExpressionElements pInExpression;
	private final InPIDExpressionElements pInPIDExpression;
	private final InPExpressionElements pInPExpression;
	private final ExistExpressionElements pExistExpression;
	private final ExistPIDElements pExistPID;
	private final ExistPElements pExistP;
	private final NullExpressionElements pNullExpression;
	private final HasNameExpressionElements pHasNameExpression;
	private final HasIDElements pHasID;
	private final HasIDINTElements pHasIDINT;
	private final GetNameElements pGetName;
	private final AtomicElements pAtomic;
	private final SysVarElements pSysVar;
	private final QualifiedNamesElements pQualifiedNames;
	private final ProperElements pProper;
	private final ListElementElements pListElement;
	private final FQNElements pFQN;
	private final TerminalRule tCHAR_SEQUENCE;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGenDSL = new GenDSLElements();
		this.pISR = new ISRElements();
		this.pTestDSL = new TestDSLElements();
		this.pConfigs = new ConfigsElements();
		this.pConfig = new ConfigElements();
		this.pConfiguration = new ConfigurationElements();
		this.pVarInit = new VarInitElements();
		this.pCollectionInit = new CollectionInitElements();
		this.pScenarios = new ScenariosElements();
		this.pPermutation = new PermutationElements();
		this.pFlow = new FlowElements();
		this.pENAME = new ENAMEElements();
		this.pRules = new RulesElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pSpecification = new SpecificationElements();
		this.pDeclareSch = new DeclareSchElements();
		this.pDeclareList = new DeclareListElements();
		this.pOneDec = new OneDecElements();
		this.pEnumDec = new EnumDecElements();
		this.pEnumType = new EnumTypeElements();
		this.pConstDec = new ConstDecElements();
		this.pVarDec = new VarDecElements();
		this.eTypeName = new TypeNameElements();
		this.pVDec = new VDecElements();
		this.pArrayDec = new ArrayDecElements();
		this.pChanDec = new ChanDecElements();
		this.pDefine = new DefineElements();
		this.pRefList = new RefListElements();
		this.pFunction = new FunctionElements();
		this.pRefListItem = new RefListItemElements();
		this.pFuncPara = new FuncParaElements();
		this.pDeclareEvent = new DeclareEventElements();
		this.pEvent = new EventElements();
		this.pEventFunction = new EventFunctionElements();
		this.pParaListItem = new ParaListItemElements();
		this.pELABEL = new ELABELElements();
		this.pSequenceAction = new SequenceActionElements();
		this.pAction = new ActionElements();
		this.pGUARD = new GUARDElements();
		this.pIFs = new IFsElements();
		this.pASSIGN = new ASSIGNElements();
		this.pOptions = new OptionsElements();
		this.pELSEs = new ELSEsElements();
		this.pSKIP = new SKIPElements();
		this.pProcessConfiguration = new ProcessConfigurationElements();
		this.pDefBehaviorProc = new DefBehaviorProcElements();
		this.pProcType = new ProcTypeElements();
		this.pProcessType = new ProcessTypeElements();
		this.pAttribute = new AttributeElements();
		this.pAttDef = new AttDefElements();
		this.pConstraints = new ConstraintsElements();
		this.pConstraint = new ConstraintElements();
		this.pProcessBehaviors = new ProcessBehaviorsElements();
		this.pProcessBehavior = new ProcessBehaviorElements();
		this.pConstructor = new ConstructorElements();
		this.pMethod = new MethodElements();
		this.pInvariants = new InvariantsElements();
		this.pAssignParameters = new AssignParametersElements();
		this.pProcessDSL = new ProcessDSLElements();
		this.eVariableType = new VariableTypeElements();
		this.pValue = new ValueElements();
		this.pListDef = new ListDefElements();
		this.pList = new ListElements();
		this.pRange = new RangeElements();
		this.pNumValue = new NumValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pProcessDataDef = new ProcessDataDefElements();
		this.pProcessPropertyDef = new ProcessPropertyDefElements();
		this.pProcessPropertyName = new ProcessPropertyNameElements();
		this.pProcessDef = new ProcessDefElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterAssign = new ParameterAssignElements();
		this.pParameterName = new ParameterNameElements();
		this.pProcess = new ProcessElements();
		this.pPropertyAssignment = new PropertyAssignmentElements();
		this.pProcessConfig = new ProcessConfigElements();
		this.pConfigProcess = new ConfigProcessElements();
		this.pSporadicProcess = new SporadicProcessElements();
		this.pPeriodicProcess = new PeriodicProcessElements();
		this.pProcessInit = new ProcessInitElements();
		this.pSet = new SetElements();
		this.pElement = new ElementElements();
		this.pSchedulerDSL = new SchedulerDSLElements();
		this.pDefCore = new DefCoreElements();
		this.pRTCTL = new RTCTLElements();
		this.pLTE = new LTEElements();
		this.pCTL_AT = new CTL_ATElements();
		this.pVerify = new VerifyElements();
		this.pOrderingDef = new OrderingDefElements();
		this.pCompVarDef = new CompVarDefElements();
		this.pCompVarDefination = new CompVarDefinationElements();
		this.pCompVarName = new CompVarNameElements();
		this.pComparationDef = new ComparationDefElements();
		this.pComparationName = new ComparationNameElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.eOrderType = new OrderTypeElements();
		this.pSchedulerDef = new SchedulerDefElements();
		this.pSchedulerInit = new SchedulerInitElements();
		this.pIfDef = new IfDefElements();
		this.pInterfaceDef = new InterfaceDefElements();
		this.pInterfaceFunction = new InterfaceFunctionElements();
		this.pInterfaceParameterList = new InterfaceParameterListElements();
		this.pInterfaceParameterDeclare = new InterfaceParameterDeclareElements();
		this.pFunctionName = new FunctionNameElements();
		this.pVarDef = new VarDefElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarBlockDef = new VarBlockDefElements();
		this.pVarSingleDef = new VarSingleDefElements();
		this.pVarDefinition = new VarDefinitionElements();
		this.pVarName = new VarNameElements();
		this.pSchedulerDataDef = new SchedulerDataDefElements();
		this.pDataDef = new DataDefElements();
		this.pDataBlockDef = new DataBlockDefElements();
		this.pDataSingleDef = new DataSingleDefElements();
		this.pSchedulerPropertyDef = new SchedulerPropertyDefElements();
		this.pSchedulerPropertyName = new SchedulerPropertyNameElements();
		this.pSchedulerCollectionDef = new SchedulerCollectionDefElements();
		this.eOperationType = new OperationTypeElements();
		this.pSchedulerSet = new SchedulerSetElements();
		this.pGenerate = new GenerateElements();
		this.pGenConfiguration = new GenConfigurationElements();
		this.pGenerateOption = new GenerateOptionElements();
		this.eGenOption = new GenOptionElements();
		this.pDirectory = new DirectoryElements();
		this.pFileName = new FileNameElements();
		this.pFileExtension = new FileExtensionElements();
		this.pTestPart = new TestPartElements();
		this.pGenPart = new GenPartElements();
		this.pGenComponent = new GenComponentElements();
		this.pComponent = new ComponentElements();
		this.pProcessGeneration = new ProcessGenerationElements();
		this.pStepGeneration = new StepGenerationElements();
		this.pTemplate = new TemplateElements();
		this.pSetTemplate = new SetTemplateElements();
		this.pBehavior = new BehaviorElements();
		this.pEventTemplate = new EventTemplateElements();
		this.pND_Behavior = new ND_BehaviorElements();
		this.pHandlerDef = new HandlerDefElements();
		this.pEventDef = new EventDefElements();
		this.pEventOpt = new EventOptElements();
		this.pOpt = new OptElements();
		this.pEventStm = new EventStmElements();
		this.pStm = new StmElements();
		this.eActionName = new ActionNameElements();
		this.eEventName = new EventNameElements();
		this.pStatement = new StatementElements();
		this.pJavaCode = new JavaCodeElements();
		this.tML_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ML_CODE");
		this.pDeclareProcess = new DeclareProcessElements();
		this.pSetProcess = new SetProcessElements();
		this.pSetExecTime = new SetExecTimeElements();
		this.pSetReturnCol = new SetReturnColElements();
		this.pSetReturnSet = new SetReturnSetElements();
		this.pCheckPoint = new CheckPointElements();
		this.pPointID = new PointIDElements();
		this.pCallFunction = new CallFunctionElements();
		this.pRemoveProcess = new RemoveProcessElements();
		this.pMoveProcess = new MoveProcessElements();
		this.pReorderProcess = new ReorderProcessElements();
		this.pSetProcessInstance = new SetProcessInstanceElements();
		this.pLoopProcess = new LoopProcessElements();
		this.pChangeAction = new ChangeActionElements();
		this.pGetProcess = new GetProcessElements();
		this.pExecuteProcess = new ExecuteProcessElements();
		this.pIfStatement = new IfStatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pNewProcessStatement = new NewProcessStatementElements();
		this.pNewElement = new NewElementElements();
		this.pParaValue = new ParaValueElements();
		this.pAssertStatement = new AssertStatementElements();
		this.pPrintStatement = new PrintStatementElements();
		this.pPrintLogStatement = new PrintLogStatementElements();
		this.pGenCodeStatement = new GenCodeStatementElements();
		this.pGenLnCodeStatement = new GenLnCodeStatementElements();
		this.pChangeValue = new ChangeValueElements();
		this.pChangeValueUnOp = new ChangeValueUnOpElements();
		this.pChangeValueExpression = new ChangeValueExpressionElements();
		this.pChangeListValue = new ChangeListValueElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pImplies = new ImpliesElements();
		this.pPrimary = new PrimaryElements();
		this.pGetIDExpression = new GetIDExpressionElements();
		this.pEmptyExpression = new EmptyExpressionElements();
		this.pFullExpression = new FullExpressionElements();
		this.pInExpression = new InExpressionElements();
		this.pInPIDExpression = new InPIDExpressionElements();
		this.pInPExpression = new InPExpressionElements();
		this.pExistExpression = new ExistExpressionElements();
		this.pExistPID = new ExistPIDElements();
		this.pExistP = new ExistPElements();
		this.pNullExpression = new NullExpressionElements();
		this.pHasNameExpression = new HasNameExpressionElements();
		this.pHasID = new HasIDElements();
		this.pHasIDINT = new HasIDINTElements();
		this.pGetName = new GetNameElements();
		this.pAtomic = new AtomicElements();
		this.pSysVar = new SysVarElements();
		this.pQualifiedNames = new QualifiedNamesElements();
		this.pProper = new ProperElements();
		this.pListElement = new ListElementElements();
		this.pFQN = new FQNElements();
		this.tCHAR_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.CHAR_SEQUENCE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "scheduling.Dsl.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("scheduling.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	gen=GenDSL | processconfig=ProcessConfiguration | proc=ProcessDSL | sch=SchedulerDSL | test=TestDSL;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////| spec = Specification;
	//GenDSL:
	//	gen=Generate
	//	function=InterfaceDef?
	//	isr=ISR;
	public GenDSLElements getGenDSLAccess() {
		return pGenDSL;
	}
	
	public ParserRule getGenDSLRule() {
		return getGenDSLAccess().getRule();
	}
	
	//ISR:
	//	'ISR' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';';
	public ISRElements getISRAccess() {
		return pISR;
	}
	
	public ParserRule getISRRule() {
		return getISRAccess().getRule();
	}
	
	//TestDSL:
	//	'system' '{'
	//	specification=Specification
	//	configs=Configs? (scenarios=Scenarios | permutation=Permutation) rule=Rules?
	//	verify=Verify?
	//	'}';
	public TestDSLElements getTestDSLAccess() {
		return pTestDSL;
	}
	
	public ParserRule getTestDSLRule() {
		return getTestDSLAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	//Configs:
	//	{Configs}
	//	'configuration' '{'
	//	config+=Config*
	//	'}';
	public ConfigsElements getConfigsAccess() {
		return pConfigs;
	}
	
	public ParserRule getConfigsRule() {
		return getConfigsAccess().getRule();
	}
	
	//Config:
	//	name=ID config=Configuration;
	public ConfigElements getConfigAccess() {
		return pConfig;
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}
	
	//Configuration:
	//	{Configuration}
	//	'{'
	//	var+=VarInit*
	//	collection+=CollectionInit* (proc=ID '=' (nul='null' | element=Element) ';')?
	//	'}';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//VarInit:
	//	varName=ID '=' val=Value ';';
	public VarInitElements getVarInitAccess() {
		return pVarInit;
	}
	
	public ParserRule getVarInitRule() {
		return getVarInitAccess().getRule();
	}
	
	//CollectionInit:
	//	colName=SchedulerSet '=' (set=Set | empty='empty' | full='full') ';';
	public CollectionInitElements getCollectionInitAccess() {
		return pCollectionInit;
	}
	
	public ParserRule getCollectionInitRule() {
		return getCollectionInitAccess().getRule();
	}
	
	//Scenarios:
	//	{Scenarios}
	//	'scenario' '{'
	//	flow+=Flow*
	//	'}';
	public ScenariosElements getScenariosAccess() {
		return pScenarios;
	}
	
	public ParserRule getScenariosRule() {
		return getScenariosAccess().getRule();
	}
	
	//Permutation:
	//	'scenario' 'permutation' 'with' 'step' '=' step=INT ';';
	public PermutationElements getPermutationAccess() {
		return pPermutation;
	}
	
	public ParserRule getPermutationRule() {
		return getPermutationAccess().getRule();
	}
	
	//Flow:
	//	event+=ENAME ('->' event+=ENAME)* ';';
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}
	
	//ENAME:
	//	elabel=ELABEL | scheventname=EventName;
	public ENAMEElements getENAMEAccess() {
		return pENAME;
	}
	
	public ParserRule getENAMERule() {
		return getENAMEAccess().getRule();
	}
	
	//Rules:
	//	{Rules}
	//	'rule' '{'
	//	r+=Rule*
	//	'}';
	public RulesElements getRulesAccess() {
		return pRules;
	}
	
	public ParserRule getRulesRule() {
		return getRulesAccess().getRule();
	}
	
	//Rule:
	//	rulename=ID '{'
	//	'when' ename=ENAME ('where' premise=Condition)?
	//	'then' conclude=Condition
	//	'}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition:
	//	expr=Or;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	////-----------------------------------------------
	//Specification:
	//	{Specification}
	//	'specification' '{'
	//	//		decl_sch = DeclareSch ?
	//	decl_lst=DeclareList?
	//	define=Define?
	//	event+=DeclareEvent*
	//	'}';
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//DeclareSch:
	//	'using' 'scheduler' ';';
	public DeclareSchElements getDeclareSchAccess() {
		return pDeclareSch;
	}
	
	public ParserRule getDeclareSchRule() {
		return getDeclareSchAccess().getRule();
	}
	
	////Module :
	////	 |  //proctype = ProcType   // | init = Init | never = Never | sporadic = Sporadic 
	////;
	//DeclareList:
	//	dec+=OneDec (';' dec+=OneDec)* ';';
	public DeclareListElements getDeclareListAccess() {
		return pDeclareList;
	}
	
	public ParserRule getDeclareListRule() {
		return getDeclareListAccess().getRule();
	}
	
	//OneDec:
	//	const=ConstDec | var=VarDec | enumdec=EnumDec;
	public OneDecElements getOneDecAccess() {
		return pOneDec;
	}
	
	public ParserRule getOneDecRule() {
		return getOneDecAccess().getRule();
	}
	
	//// | arrayDec = ArrayDec ;// | chan = ChanDec;
	//EnumDec:
	//	'enumtype' type=EnumType '=' '{' enumele+=ID (',' enumele+=ID)* '}';
	public EnumDecElements getEnumDecAccess() {
		return pEnumDec;
	}
	
	public ParserRule getEnumDecRule() {
		return getEnumDecAccess().getRule();
	}
	
	//EnumType:
	//	name=ID;
	public EnumTypeElements getEnumTypeAccess() {
		return pEnumType;
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}
	
	//ConstDec:
	//	'const' name=ID '=' (bvalue=BoolValue | ivalue=NumValue);
	public ConstDecElements getConstDecAccess() {
		return pConstDec;
	}
	
	public ParserRule getConstDecRule() {
		return getConstDecAccess().getRule();
	}
	
	//VarDec:
	//	(type=TypeName | enumtype=[EnumType]) name+=VDec (',' name+=VDec)*;
	public VarDecElements getVarDecAccess() {
		return pVarDec;
	}
	
	public ParserRule getVarDecRule() {
		return getVarDecAccess().getRule();
	}
	
	//enum TypeName:
	//	byte | int | bool;
	public TypeNameElements getTypeNameAccess() {
		return eTypeName;
	}
	
	public EnumRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//VDec:
	//	name=ID ('=' (bvalue=BoolValue | ivalue=NumValue))?;
	public VDecElements getVDecAccess() {
		return pVDec;
	}
	
	public ParserRule getVDecRule() {
		return getVDecAccess().getRule();
	}
	
	//ArrayDec:
	//	type=TypeName aName=ID '[' num=NumValue ']' ';';
	public ArrayDecElements getArrayDecAccess() {
		return pArrayDec;
	}
	
	public ParserRule getArrayDecRule() {
		return getArrayDecAccess().getRule();
	}
	
	//ChanDec:
	//	'chan' cname=ID '=' '[' ivalue=NumValue ']' 'of' '{' type=TypeName '}' ';';
	public ChanDecElements getChanDecAccess() {
		return pChanDec;
	}
	
	public ParserRule getChanDecRule() {
		return getChanDecAccess().getRule();
	}
	
	//Define:
	//	{Define} 'define' '{'
	//	reflist+=RefList*
	//	function+=Function*
	//	'}';
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//RefList:
	//	name=ID '=' '[' item+=RefListItem (',' item+=RefListItem)* ']' ';';
	public RefListElements getRefListAccess() {
		return pRefList;
	}
	
	public ParserRule getRefListRule() {
		return getRefListAccess().getRule();
	}
	
	//Function:
	//	name=ID '(' funcpara=FuncPara? ')' '{'
	//	sequence=SequenceAction
	//	'}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//RefListItem:
	//	bvalue=BoolValue | ivalue=NumValue | id=ID;
	public RefListItemElements getRefListItemAccess() {
		return pRefListItem;
	}
	
	public ParserRule getRefListItemRule() {
		return getRefListItemAccess().getRule();
	}
	
	//FuncPara:
	//	para+=ID (',' para+=ID)*;
	public FuncParaElements getFuncParaAccess() {
		return pFuncPara;
	}
	
	public ParserRule getFuncParaRule() {
		return getFuncParaAccess().getRule();
	}
	
	//DeclareEvent:
	//	event=Event;
	public DeclareEventElements getDeclareEventAccess() {
		return pDeclareEvent;
	}
	
	public ParserRule getDeclareEventRule() {
		return getDeclareEventAccess().getRule();
	}
	
	//Event:
	//	'event' elabel=ELABEL '{' ('when' guard=Expression 'then')? (sequence=SequenceAction | eventfunction=EventFunction)
	//	'}';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//EventFunction:
	//	name=ID '(' funcpara=ParaListItem? ')' ';';
	public EventFunctionElements getEventFunctionAccess() {
		return pEventFunction;
	}
	
	public ParserRule getEventFunctionRule() {
		return getEventFunctionAccess().getRule();
	}
	
	//ParaListItem:
	//	item+=RefListItem (',' item+=RefListItem)*;
	public ParaListItemElements getParaListItemAccess() {
		return pParaListItem;
	}
	
	public ParserRule getParaListItemRule() {
		return getParaListItemAccess().getRule();
	}
	
	//ELABEL:
	//	label=ID;
	public ELABELElements getELABELAccess() {
		return pELABEL;
	}
	
	public ParserRule getELABELRule() {
		return getELABELAccess().getRule();
	}
	
	//SequenceAction:
	//	action+=Action action+=Action*;
	public SequenceActionElements getSequenceActionAccess() {
		return pSequenceAction;
	}
	
	public ParserRule getSequenceActionRule() {
		return getSequenceActionAccess().getRule();
	}
	
	//Action:
	//	IFs | ASSIGN | SKIP | GUARD;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	////  ;
	////		MoveProcess |
	////		MoveSelectedProcess |
	////		GetProcess |
	//////		ChangeValue |
	////		IfStatement |
	////		BlockStatement ;
	//GUARD:
	//	expr=Expression '->' sequence=Action;
	public GUARDElements getGUARDAccess() {
		return pGUARD;
	}
	
	public ParserRule getGUARDRule() {
		return getGUARDAccess().getRule();
	}
	
	//IFs:
	//	{IFs}
	//	'if'
	//	option=Options
	//	'fi' ';';
	public IFsElements getIFsAccess() {
		return pIFs;
	}
	
	public ParserRule getIFsRule() {
		return getIFsAccess().getRule();
	}
	
	//ASSIGN:
	//	ChangeValue;
	public ASSIGNElements getASSIGNAccess() {
		return pASSIGN;
	}
	
	public ParserRule getASSIGNRule() {
		return getASSIGNAccess().getRule();
	}
	
	//Options:
	//	'::' sequence+=SequenceAction ('::' sequence+=SequenceAction)* ('::' elses=ELSEs)?;
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}
	
	//ELSEs:
	//	'else' '->' sequence=Action;
	public ELSEsElements getELSEsAccess() {
		return pELSEs;
	}
	
	public ParserRule getELSEsRule() {
		return getELSEsAccess().getRule();
	}
	
	//SKIP:
	//	{SKIP} 'skip' ';';
	public SKIPElements getSKIPAccess() {
		return pSKIP;
	}
	
	public ParserRule getSKIPRule() {
		return getSKIPAccess().getRule();
	}
	
	////VarDef : {VarDef}	'variable' '{' vard += VarDefination*   '}';
	////VarDefination :  (type=VariableType) name+=VarName (',' name+=VarName)* ('=' (bvalue = BoolValue |  ivalue = INT) )? ';' ;
	////VarName : name = ID ;
	////ProcType :
	////	(active = Active)? 'proctype' proctype=Process '(' (paralist = ParameterList)? ')'
	////	'{'
	////		sequence = Sequence
	////	'}'
	////;
	////
	////Active : {Active}
	////	'active' ('[' num = NumValue ']')?
	////;
	////
	////Init :
	////	'init' '{' seq = Sequence '}'
	////;
	////
	////Never:
	////	'never' '{' seq = Sequence '}'
	////;
	////
	////Sporadic :
	////	'sporadic' '{' 
	////		(decl_lst += DeclareList)*
	////		seq = Sequence 
	////	'}'
	////;
	////
	//////enum Separator : semi_colon = ';' | arrow = '->';
	////
	////Sequence : sequence += Step (';' sequence += Step)* ;
	////
	////
	////Step:
	////	IF | DO |  D_STEP | pATOMIC | AssertStatement | API | GUARD | EXEC | SKIP | LABEL | GOTO | CHANSEND | CHANRECEIVE
	////;
	////ARRAYASSIGN : var=AVAR '=' exp=Expression ';';
	////GUARD :
	////	expr = Expression '->' seq = Sequence
	////;
	////IF : {IF}
	////	'if' 
	////		option = Options				 
	////	'fi'  
	////;
	////
	////DO : {DO}
	////	'do'
	////		option = Options
	////	'od' 
	////;
	////
	////Options :
	////	'::' sequence += Sequence 
	////	('::' sequence += Sequence )*
	////;
	////FOR : 'for' '(' varfef = VarRef ':' expr1 = Expression '..' expr2 = Expression ')' '{' sequence = Sequence '}';
	////FORIN : 'for' '(' varfef1 = VarRef 'in' varref2 = VarRef ')' '{' sequence = Sequence'}' ; 
	////
	////
	////ASSIGN : ChangeValue ;
	////
	////D_STEP :
	////	'd_step''{' sequence = Sequence '}' 
	////;
	////
	////pATOMIC :
	////	'atomic' '{' sequence = Sequence '}' 
	////;
	////Assert:
	////	'assert' '(' expr = Expression ')'
	////;
	////API : s = 'terminate' '(' ')' ;
	////Array : name = ID;
	////Channel: name = ID;
	////VarRef: name = ID ('[' expr1 = Expression ']')? ('.' expr2 = VarRef)?;
	////EXEC:
	////	'exec' element = Element 
	////;
	////
	////SKIP:
	////	s = 'skip' 
	////;
	////
	////LABEL : name = ID ':' seq = Sequence;
	////
	////GOTO: 'goto' label = ID ;
	////
	////CHANSEND: cname = ID '!' value = ID ;
	////CHANRECEIVE: cname = ID '?' value = ID ;
	////............................................
	//ProcessConfiguration:
	//	'process' name=ID ('refines' parent=ID)? '{'
	//	attribute=Attribute?
	//	defbehaviorproc=DefBehaviorProc
	//	'}'
	//	'configuration' '{'
	//	processconfig=ProcessConfig?
	//	processinit=ProcessInit
	//	'}';
	public ProcessConfigurationElements getProcessConfigurationAccess() {
		return pProcessConfiguration;
	}
	
	public ParserRule getProcessConfigurationRule() {
		return getProcessConfigurationAccess().getRule();
	}
	
	//DefBehaviorProc:
	//	processbehaviors=ProcessBehaviors | proctype=ProcType;
	public DefBehaviorProcElements getDefBehaviorProcAccess() {
		return pDefBehaviorProc;
	}
	
	public ParserRule getDefBehaviorProcRule() {
		return getDefBehaviorProcAccess().getRule();
	}
	
	//ProcType:
	//	{ProcType} proctype+=ProcessType*;
	public ProcTypeElements getProcTypeAccess() {
		return pProcType;
	}
	
	public ParserRule getProcTypeRule() {
		return getProcTypeAccess().getRule();
	}
	
	//ProcessType:
	//	'proctype' name=ID '{'
	//	constraints=Constraints?
	//	processbehavior+=ProcessBehavior*
	//	'}';
	public ProcessTypeElements getProcessTypeAccess() {
		return pProcessType;
	}
	
	public ParserRule getProcessTypeRule() {
		return getProcessTypeAccess().getRule();
	}
	
	//Attribute:
	//	{Attribute} 'attribute' '{'
	//	att+=AttDef*
	//	constraints=Constraints?
	//	'}';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AttDef:
	//	name=ID ':' 'type' '=' type=VariableType (',' 'value' '=' list=ListDef)? ',' 'default' '=' default=Value ';';
	public AttDefElements getAttDefAccess() {
		return pAttDef;
	}
	
	public ParserRule getAttDefRule() {
		return getAttDefAccess().getRule();
	}
	
	//Constraints:
	//	{Constraints} 'constraint' '{' constraint+=Constraint* '}';
	public ConstraintsElements getConstraintsAccess() {
		return pConstraints;
	}
	
	public ParserRule getConstraintsRule() {
		return getConstraintsAccess().getRule();
	}
	
	//Constraint:
	//	condition=Condition ';';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//ProcessBehaviors:
	//	{ProcessBehaviors}
	//	'behavior' '{'
	//	processbehavior+=ProcessBehavior*
	//	'}';
	public ProcessBehaviorsElements getProcessBehaviorsAccess() {
		return pProcessBehaviors;
	}
	
	public ParserRule getProcessBehaviorsRule() {
		return getProcessBehaviorsAccess().getRule();
	}
	
	//ProcessBehavior:
	//	constructor=Constructor | method=Method;
	public ProcessBehaviorElements getProcessBehaviorAccess() {
		return pProcessBehavior;
	}
	
	public ParserRule getProcessBehaviorRule() {
		return getProcessBehaviorAccess().getRule();
	}
	
	//Constructor:
	//	'constructor' ':' processname=ID '(' paralist=ParameterList? ')' ';';
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Method:
	//	'method' ':' functionname=FunctionName ('(' ')' ';' | '(' parameterlist=InterfaceParameterList ')' '{'
	//	assignparameters+=AssignParameters*
	//	constraints=Constraints?
	//	'}');
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//Invariants:
	//	{Invariatnts} 'invariant' '{' invariant+=Constraint* '}';
	public InvariantsElements getInvariantsAccess() {
		return pInvariants;
	}
	
	public ParserRule getInvariantsRule() {
		return getInvariantsAccess().getRule();
	}
	
	//AssignParameters:
	//	paraname=ID ':' 'value' '=' list=ListDef ';';
	public AssignParametersElements getAssignParametersAccess() {
		return pAssignParameters;
	}
	
	public ParserRule getAssignParametersRule() {
		return getAssignParametersAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	//ProcessDSL:
	//	{ProcessDSL}
	//	//procvard +=VarDefinition * //for promela files
	//
	//	'def' 'process' name=ID ('refines' parent=ID)? '{'
	//	processdata=ProcessDataDef?
	//	constraints=Constraints?
	//	process+=ProcessDef*
	//	'}'
	//	processconfig=ProcessConfig?
	//	processinit=ProcessInit?;
	public ProcessDSLElements getProcessDSLAccess() {
		return pProcessDSL;
	}
	
	public ParserRule getProcessDSLRule() {
		return getProcessDSLAccess().getRule();
	}
	
	//enum VariableType returns String:
	//	temp='int_temp' | byte | int | time | bool | clock | process;
	public VariableTypeElements getVariableTypeAccess() {
		return eVariableType;
	}
	
	public EnumRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//Value:
	//	{Value} num=NumValue | bool=BoolValue | nondef='?' | list=ListDef;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//ListDef:
	//	'[' list+=List (',' list+=List)* ']';
	public ListDefElements getListDefAccess() {
		return pListDef;
	}
	
	public ParserRule getListDefRule() {
		return getListDefAccess().getRule();
	}
	
	//List:
	//	range=Range | num=NumValue | id=ID | bool=BoolValue;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Range:
	//	start=NumValue '..' end=NumValue;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//NumValue:
	//	minus='-'? value=INT;
	public NumValueElements getNumValueAccess() {
		return pNumValue;
	}
	
	public ParserRule getNumValueRule() {
		return getNumValueAccess().getRule();
	}
	
	//BoolValue:
	//	value=('true' | 'false');
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//ProcessDataDef:
	//	{ProcessDataDef} 'attribute' '{' properties+=ProcessPropertyDef* '}';
	public ProcessDataDefElements getProcessDataDefAccess() {
		return pProcessDataDef;
	}
	
	public ParserRule getProcessDataDefRule() {
		return getProcessDataDefAccess().getRule();
	}
	
	//ProcessPropertyDef:
	//	{ProcessPropertyDef} (var?='var' | val?='val')? type=VariableType name+=ProcessPropertyName (','
	//	name+=ProcessPropertyName)* ('=' pvalue=Value)? ';';
	public ProcessPropertyDefElements getProcessPropertyDefAccess() {
		return pProcessPropertyDef;
	}
	
	public ParserRule getProcessPropertyDefRule() {
		return getProcessPropertyDefAccess().getRule();
	}
	
	//ProcessPropertyName:
	//	name=ID;
	public ProcessPropertyNameElements getProcessPropertyNameAccess() {
		return pProcessPropertyName;
	}
	
	public ParserRule getProcessPropertyNameRule() {
		return getProcessPropertyNameAccess().getRule();
	}
	
	//ProcessDef:
	//	'proctype' proctype=Process '(' paralist=ParameterList? ')'
	//	'{'
	//	propertyassignment+=PropertyAssignment*
	//	'}';
	public ProcessDefElements getProcessDefAccess() {
		return pProcessDef;
	}
	
	public ParserRule getProcessDefRule() {
		return getProcessDefAccess().getRule();
	}
	
	//ParameterList:
	//	para+=ParameterAssign (';' para+=ParameterAssign)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterAssign:
	//	type=VariableType paraname+=ParameterName (',' paraname+=ParameterName)* ('=' val=Value)?;
	public ParameterAssignElements getParameterAssignAccess() {
		return pParameterAssign;
	}
	
	public ParserRule getParameterAssignRule() {
		return getParameterAssignAccess().getRule();
	}
	
	//ParameterName:
	//	name=ID;
	public ParameterNameElements getParameterNameAccess() {
		return pParameterName;
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}
	
	//Process:
	//	name=ID;
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//PropertyAssignment:
	//	{PropertyAssignment} ('this' '.')? propers=ProcessPropertyName '=' (pvalue=Value | pname=ParameterName) ';'
	//	//	name = QualifiedNames '=' (pvalue = Value | pname = [ParameterName]) ';'
	//;
	public PropertyAssignmentElements getPropertyAssignmentAccess() {
		return pPropertyAssignment;
	}
	
	public ParserRule getPropertyAssignmentRule() {
		return getPropertyAssignmentAccess().getRule();
	}
	
	//ProcessConfig:
	//	{ProcessConfig}
	//	'config' '{'
	//	procinit+=ConfigProcess*
	//	'}';
	public ProcessConfigElements getProcessConfigAccess() {
		return pProcessConfig;
	}
	
	public ParserRule getProcessConfigRule() {
		return getProcessConfigAccess().getRule();
	}
	
	//ConfigProcess:
	//	sporadic=SporadicProcess | periodic=PeriodicProcess;
	public ConfigProcessElements getConfigProcessAccess() {
		return pConfigProcess;
	}
	
	public ParserRule getConfigProcessRule() {
		return getConfigProcessAccess().getRule();
	}
	
	//SporadicProcess:
	//	'sporadic' 'process' element=Element 'in' '(' start=INT ',' end=INT ')' ('limited' max=INT)? ';';
	public SporadicProcessElements getSporadicProcessAccess() {
		return pSporadicProcess;
	}
	
	public ParserRule getSporadicProcessRule() {
		return getSporadicProcessAccess().getRule();
	}
	
	//PeriodicProcess:
	//	'periodic' 'process' element=Element 'offset' '=' offset=NumValue 'period' '=' period=NumValue ('limited' max=INT)?
	//	';';
	public PeriodicProcessElements getPeriodicProcessAccess() {
		return pPeriodicProcess;
	}
	
	public ParserRule getPeriodicProcessRule() {
		return getPeriodicProcessAccess().getRule();
	}
	
	//ProcessInit:
	//	'init' '{'
	//	'[' order+=Set (',' order+=Set)* ']'
	//	'}';
	public ProcessInitElements getProcessInitAccess() {
		return pProcessInit;
	}
	
	public ParserRule getProcessInitRule() {
		return getProcessInitAccess().getRule();
	}
	
	//Set:
	//	set='{' element+=Element (',' element+=Element)* '}';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Element:
	//	process=Process '(' (paraAssign+=Value (',' paraAssign+=Value)*)? ')';
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	////............................................
	//SchedulerDSL:
	//	defcore=DefCore?
	//	scheduler=SchedulerDef
	//	order=OrderingDef?
	//	verify=Verify?
	//	//gentemplate = GenTemplate?
	//;
	public SchedulerDSLElements getSchedulerDSLAccess() {
		return pSchedulerDSL;
	}
	
	public ParserRule getSchedulerDSLRule() {
		return getSchedulerDSLAccess().getRule();
	}
	
	//DefCore:
	//	'#' 'def' 'num_core' '=' numcore=INT ';';
	public DefCoreElements getDefCoreAccess() {
		return pDefCore;
	}
	
	public ParserRule getDefCoreRule() {
		return getDefCoreAccess().getRule();
	}
	
	////---------------------------------------------------------------------------------
	////RTCTL formula
	//RTCTL:
	//	op='(' exp=Expression ')' | op='not' f=RTCTL | op='or' f1=RTCTL f2=RTCTL | op='implies' f1=RTCTL f2=RTCTL | op='AX'
	//	f=RTCTL | op='AF' lte=LTE? f=RTCTL | op='AG' lte=LTE? f=RTCTL | op='EX' f=RTCTL | op='EF' lte=LTE? f=RTCTL | op='EG'
	//	lte=LTE? f=RTCTL | op='AU' lte=LTE? f1=RTCTL f2=RTCTL | op='EU' lte=LTE? f1=RTCTL f2=RTCTL;
	public RTCTLElements getRTCTLAccess() {
		return pRTCTL;
	}
	
	public ParserRule getRTCTLRule() {
		return getRTCTLAccess().getRule();
	}
	
	////
	////RTCTLOr returns RTCTL: 
	////	RTCTLImplies ({RTCTLOr.f1=current} op = '||' f2=RTCTLImplies)* 
	////;
	////
	////RTCTLImplies returns RTCTL: 
	////	RTCTL ({RTCTLImplies.f1=current} op = '=>' f2=RTCTL)* 
	////;
	//LTE:
	//	'<=' num=INT;
	public LTEElements getLTEAccess() {
		return pLTE;
	}
	
	public ParserRule getLTERule() {
		return getLTEAccess().getRule();
	}
	
	//CTL_AT:
	//	'@' cond=Expression ':';
	public CTL_ATElements getCTL_ATAccess() {
		return pCTL_AT;
	}
	
	public ParserRule getCTL_ATRule() {
		return getCTL_ATAccess().getRule();
	}
	
	//Verify:
	//	'verify' '{' at=CTL_AT? formula=RTCTL '}';
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}
	
	//OrderingDef:
	//	{OrderingDef}
	//	'comparator' '{'
	//	vars=CompVarDef?
	//	compare+=ComparationDef*
	//	'}';
	public OrderingDefElements getOrderingDefAccess() {
		return pOrderingDef;
	}
	
	public ParserRule getOrderingDefRule() {
		return getOrderingDefAccess().getRule();
	}
	
	//CompVarDef:
	//	{CompVarDef} 'variable' '{' vard+=CompVarDefination* '}';
	public CompVarDefElements getCompVarDefAccess() {
		return pCompVarDef;
	}
	
	public ParserRule getCompVarDefRule() {
		return getCompVarDefAccess().getRule();
	}
	
	//CompVarDefination:
	//	type=VariableType name+=CompVarName (',' name+=CompVarName)* ('=' pvalue=Value)? ';';
	public CompVarDefinationElements getCompVarDefinationAccess() {
		return pCompVarDefination;
	}
	
	public ParserRule getCompVarDefinationRule() {
		return getCompVarDefinationAccess().getRule();
	}
	
	//CompVarName:
	//	name=ID;
	public CompVarNameElements getCompVarNameAccess() {
		return pCompVarName;
	}
	
	public ParserRule getCompVarNameRule() {
		return getCompVarNameAccess().getRule();
	}
	
	//ComparationDef:
	//	'comparetype' cname=ComparationName '(' 'process' process1=Process ',' process2=Process ')' '{'
	//	statements+=Statement*
	//	'}';
	public ComparationDefElements getComparationDefAccess() {
		return pComparationDef;
	}
	
	public ParserRule getComparationDefRule() {
		return getComparationDefAccess().getRule();
	}
	
	//ComparationName:
	//	name=ID;
	public ComparationNameElements getComparationNameAccess() {
		return pComparationName;
	}
	
	public ParserRule getComparationNameRule() {
		return getComparationNameAccess().getRule();
	}
	
	//ReturnStatement:
	//	'return' value=OrderType ';';
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//enum OrderType:
	//	greater | less | equal | fifo | lifo;
	public OrderTypeElements getOrderTypeAccess() {
		return eOrderType;
	}
	
	public EnumRule getOrderTypeRule() {
		return getOrderTypeAccess().getRule();
	}
	
	//SchedulerDef:
	//	'scheduler' name=ID '(' parameterlist=ParameterList? ')' ('refines' parent=ID)? '{'
	//	gen=Generate?
	//	svar=VarDef?
	//	schedulerdata=SchedulerDataDef?
	//	schedulerinit=SchedulerInit?
	//	handler=HandlerDef?
	//	interface=InterfaceDef?
	//	'}';
	public SchedulerDefElements getSchedulerDefAccess() {
		return pSchedulerDef;
	}
	
	public ParserRule getSchedulerDefRule() {
		return getSchedulerDefAccess().getRule();
	}
	
	//SchedulerInit:
	//	{SchedulerInit} 'scheduler' 'init' '{' initstm+=Statement* '}';
	public SchedulerInitElements getSchedulerInitAccess() {
		return pSchedulerInit;
	}
	
	public ParserRule getSchedulerInitRule() {
		return getSchedulerInitAccess().getRule();
	}
	
	//IfDef:
	//	'#' 'ifdef' '(' cond=Expression ')';
	public IfDefElements getIfDefAccess() {
		return pIfDef;
	}
	
	public ParserRule getIfDefRule() {
		return getIfDefAccess().getRule();
	}
	
	//InterfaceDef:
	//	{InterfaceDef}
	//	'interface' '{'
	//	interfacefunction+=InterfaceFunction*
	//	'}';
	public InterfaceDefElements getInterfaceDefAccess() {
		return pInterfaceDef;
	}
	
	public ParserRule getInterfaceDefRule() {
		return getInterfaceDefAccess().getRule();
	}
	
	//InterfaceFunction:
	//	'function' functionname=FunctionName '(' parameterlist=InterfaceParameterList? ')' '{'
	//	//		(statements += Statement)*
	//	statements+=Stm*
	//	'}';
	public InterfaceFunctionElements getInterfaceFunctionAccess() {
		return pInterfaceFunction;
	}
	
	public ParserRule getInterfaceFunctionRule() {
		return getInterfaceFunctionAccess().getRule();
	}
	
	//InterfaceParameterList:
	//	para+=InterfaceParameterDeclare (';' para+=InterfaceParameterDeclare)*;
	public InterfaceParameterListElements getInterfaceParameterListAccess() {
		return pInterfaceParameterList;
	}
	
	public ParserRule getInterfaceParameterListRule() {
		return getInterfaceParameterListAccess().getRule();
	}
	
	//InterfaceParameterDeclare:
	//	type=VariableType paraname=ID;
	public InterfaceParameterDeclareElements getInterfaceParameterDeclareAccess() {
		return pInterfaceParameterDeclare;
	}
	
	public ParserRule getInterfaceParameterDeclareRule() {
		return getInterfaceParameterDeclareAccess().getRule();
	}
	
	//FunctionName:
	//	name=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//VarDef:
	//	{VarDef} 'variable' '{'
	//	vard+=VarDecl*
	//	'}';
	public VarDefElements getVarDefAccess() {
		return pVarDef;
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}
	
	//VarDecl:
	//	ifdef=IfDef? (varblockdef=VarBlockDef | varsingledef=VarSingleDef);
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarBlockDef:
	//	'{' vardef+=VarDefinition '}';
	public VarBlockDefElements getVarBlockDefAccess() {
		return pVarBlockDef;
	}
	
	public ParserRule getVarBlockDefRule() {
		return getVarBlockDefAccess().getRule();
	}
	
	//VarSingleDef:
	//	vardef=VarDefinition;
	public VarSingleDefElements getVarSingleDefAccess() {
		return pVarSingleDef;
	}
	
	public ParserRule getVarSingleDefRule() {
		return getVarSingleDefAccess().getRule();
	}
	
	//VarDefinition:
	//	type=VariableType name+=VarName (',' name+=VarName)* ('=' (bvalue=BoolValue | ivalue=NumValue))? ';';
	public VarDefinitionElements getVarDefinitionAccess() {
		return pVarDefinition;
	}
	
	public ParserRule getVarDefinitionRule() {
		return getVarDefinitionAccess().getRule();
	}
	
	//VarName:
	//	name=ID;
	public VarNameElements getVarNameAccess() {
		return pVarName;
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}
	
	//SchedulerDataDef:
	//	{SchedulerDataDef}
	//	'data' '{'
	//	datadef+=DataDef*
	//	'}';
	public SchedulerDataDefElements getSchedulerDataDefAccess() {
		return pSchedulerDataDef;
	}
	
	public ParserRule getSchedulerDataDefRule() {
		return getSchedulerDataDefAccess().getRule();
	}
	
	//DataDef:
	//	ifdef=IfDef? (datablockdef=DataBlockDef | datasingledef=DataSingleDef);
	public DataDefElements getDataDefAccess() {
		return pDataDef;
	}
	
	public ParserRule getDataDefRule() {
		return getDataDefAccess().getRule();
	}
	
	//DataBlockDef:
	//	{DataBlockDef} '{' datadef+=DataSingleDef* '}';
	public DataBlockDefElements getDataBlockDefAccess() {
		return pDataBlockDef;
	}
	
	public ParserRule getDataBlockDefRule() {
		return getDataBlockDefAccess().getRule();
	}
	
	//DataSingleDef:
	//	prop=SchedulerPropertyDef | col=SchedulerCollectionDef;
	public DataSingleDefElements getDataSingleDefAccess() {
		return pDataSingleDef;
	}
	
	public ParserRule getDataSingleDefRule() {
		return getDataSingleDefAccess().getRule();
	}
	
	//SchedulerPropertyDef:
	//	type=VariableType name+=SchedulerPropertyName (',' name+=SchedulerPropertyName)* ('=' (bvalue=BoolValue |
	//	ivalue=NumValue))? ';';
	public SchedulerPropertyDefElements getSchedulerPropertyDefAccess() {
		return pSchedulerPropertyDef;
	}
	
	public ParserRule getSchedulerPropertyDefRule() {
		return getSchedulerPropertyDefAccess().getRule();
	}
	
	//SchedulerPropertyName:
	//	name=ID;
	public SchedulerPropertyNameElements getSchedulerPropertyNameAccess() {
		return pSchedulerPropertyName;
	}
	
	public ParserRule getSchedulerPropertyNameRule() {
		return getSchedulerPropertyNameAccess().getRule();
	}
	
	//SchedulerCollectionDef:
	//	parent='refines'? 'collection' name=SchedulerSet ('using' comp+=ComparationName (',' comp+=ComparationName)*)? ('with'
	//	operationtype=OperationType)? ';';
	public SchedulerCollectionDefElements getSchedulerCollectionDefAccess() {
		return pSchedulerCollectionDef;
	}
	
	public ParserRule getSchedulerCollectionDefRule() {
		return getSchedulerCollectionDefAccess().getRule();
	}
	
	//enum OperationType returns String:
	//	queue='fifo' | stack='lifo';
	public OperationTypeElements getOperationTypeAccess() {
		return eOperationType;
	}
	
	public EnumRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}
	
	//SchedulerSet:
	//	name=ID;
	public SchedulerSetElements getSchedulerSetAccess() {
		return pSchedulerSet;
	}
	
	public ParserRule getSchedulerSetRule() {
		return getSchedulerSetAccess().getRule();
	}
	
	////Generating code
	//Generate:
	//	'generate' '{'
	//	genconfiguration=GenConfiguration
	//	gencomponent=GenComponent? (stepgeneration=StepGeneration | processgeneration=ProcessGeneration)?
	//	'}';
	public GenerateElements getGenerateAccess() {
		return pGenerate;
	}
	
	public ParserRule getGenerateRule() {
		return getGenerateAccess().getRule();
	}
	
	//GenConfiguration:
	//	'configuration' '{' (generateoption=GenerateOption ';')? (directory=Directory ';')? (filename=FileName ';')?
	//	(fileextension=FileExtension ';')?
	//	'test' test=('program' | 'case' | 'data') '=' testpart=TestPart ';'
	//	'}';
	public GenConfigurationElements getGenConfigurationAccess() {
		return pGenConfiguration;
	}
	
	public ParserRule getGenConfigurationRule() {
		return getGenConfigurationAccess().getRule();
	}
	
	//GenerateOption:
	//	'option' '=' '{' option+=GenOption (',' option+=GenOption)* '}';
	public GenerateOptionElements getGenerateOptionAccess() {
		return pGenerateOption;
	}
	
	public ParserRule getGenerateOptionRule() {
		return getGenerateOptionAccess().getRule();
	}
	
	//enum GenOption returns String:
	//	ndbehavior='ND_behavior' | searching='Searching' | error='Error' | property='Property' | all='All';
	public GenOptionElements getGenOptionAccess() {
		return eGenOption;
	}
	
	public EnumRule getGenOptionRule() {
		return getGenOptionAccess().getRule();
	}
	
	//Directory:
	//	'directory' '=' name=CHAR_SEQUENCE;
	public DirectoryElements getDirectoryAccess() {
		return pDirectory;
	}
	
	public ParserRule getDirectoryRule() {
		return getDirectoryAccess().getRule();
	}
	
	//FileName:
	//	'file' 'name' '=' name=CHAR_SEQUENCE;
	public FileNameElements getFileNameAccess() {
		return pFileName;
	}
	
	public ParserRule getFileNameRule() {
		return getFileNameAccess().getRule();
	}
	
	//FileExtension:
	//	'file' 'extension' '=' name=CHAR_SEQUENCE;
	public FileExtensionElements getFileExtensionAccess() {
		return pFileExtension;
	}
	
	public ParserRule getFileExtensionRule() {
		return getFileExtensionAccess().getRule();
	}
	
	//TestPart:
	//	part+=GenPart ('+' part+=GenPart)*;
	public TestPartElements getTestPartAccess() {
		return pTestPart;
	}
	
	public ParserRule getTestPartRule() {
		return getTestPartAccess().getRule();
	}
	
	////GenPart: '(' (prefix=CHAR_SEQUENCE '+')? name= (ID|'init'|'processes'|'behaviors'|'error') ('+' posfix=CHAR_SEQUENCE)? ')';
	//GenPart:
	//	'(' (prefix=CHAR_SEQUENCE '+')? name=(ID | 'processes' | 'steps' | 'error') ('+' posfix=CHAR_SEQUENCE)? ')';
	public GenPartElements getGenPartAccess() {
		return pGenPart;
	}
	
	public ParserRule getGenPartRule() {
		return getGenPartAccess().getRule();
	}
	
	//GenComponent:
	//	'component' '{'
	//	component+=Component component+=Component*
	//	//		(initgeneration = InitGeneration)?		
	//	'}';
	public GenComponentElements getGenComponentAccess() {
		return pGenComponent;
	}
	
	public ParserRule getGenComponentRule() {
		return getGenComponentAccess().getRule();
	}
	
	//Component:
	//	name=ID '{'
	//	template=SetTemplate?
	//	'contains' '{'
	//	stm+=(GenCodeStatement | GenLnCodeStatement)*
	//	'}'
	//	'}';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	////InitGeneration: 'init' '{' 	init = Template '}' ;
	//ProcessGeneration:
	//	'process' '{' process=Template '}';
	public ProcessGenerationElements getProcessGenerationAccess() {
		return pProcessGeneration;
	}
	
	public ParserRule getProcessGenerationRule() {
		return getProcessGenerationAccess().getRule();
	}
	
	//StepGeneration:
	//	'step' '{' step=Template '}';
	public StepGenerationElements getStepGenerationAccess() {
		return pStepGeneration;
	}
	
	public ParserRule getStepGenerationRule() {
		return getStepGenerationAccess().getRule();
	}
	
	//Template:
	//	template=SetTemplate? behavior=Behavior ND_behavior=ND_Behavior?;
	public TemplateElements getTemplateAccess() {
		return pTemplate;
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}
	
	//SetTemplate:
	//	'template' '=' templ=Expression ';';
	public SetTemplateElements getSetTemplateAccess() {
		return pSetTemplate;
	}
	
	public ParserRule getSetTemplateRule() {
		return getSetTemplateAccess().getRule();
	}
	
	//Behavior:
	//	'action' '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';';
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}
	
	//EventTemplate:
	//	'(' (prefix=Expression '+')? event=ActionName ('+' postfix=Expression)? ')';
	public EventTemplateElements getEventTemplateAccess() {
		return pEventTemplate;
	}
	
	public ParserRule getEventTemplateRule() {
		return getEventTemplateAccess().getRule();
	}
	
	//ND_Behavior:
	//	'nd_action' ('@' cond=Expression)? '=' eventtemplate+=EventTemplate ('+' eventtemplate+=EventTemplate)* ';';
	public ND_BehaviorElements getND_BehaviorAccess() {
		return pND_Behavior;
	}
	
	public ParserRule getND_BehaviorRule() {
		return getND_BehaviorAccess().getRule();
	}
	
	//HandlerDef:
	//	{HandlerDef}
	//	'event' 'handler' '{'
	//	event+=EventDef*
	//	'}';
	public HandlerDefElements getHandlerDefAccess() {
		return pHandlerDef;
	}
	
	public ParserRule getHandlerDefRule() {
		return getHandlerDefAccess().getRule();
	}
	
	//EventDef:
	//	eventname=EventName '(' ('process' processname=Process)? ')'
	//	'{'
	//	//		(statements += Statement)*
	//	event=(EventOpt | EventStm)
	//	//		(statements += Stm)*		
	//	//		(ifdef = IfDef)?  (statements = MoveProcess | loopst = LoopProcess | getst = GetProcess)
	//	'}';
	public EventDefElements getEventDefAccess() {
		return pEventDef;
	}
	
	public ParserRule getEventDefRule() {
		return getEventDefAccess().getRule();
	}
	
	//EventOpt:
	//	opt+=Opt opt+=Opt*;
	public EventOptElements getEventOptAccess() {
		return pEventOpt;
	}
	
	public ParserRule getEventOptRule() {
		return getEventOptAccess().getRule();
	}
	
	//Opt:
	//	'opt' '{'
	//	eventstm=EventStm
	//	'}';
	public OptElements getOptAccess() {
		return pOpt;
	}
	
	public ParserRule getOptRule() {
		return getOptAccess().getRule();
	}
	
	//EventStm:
	//	statements+=Stm statements+=Stm*;
	public EventStmElements getEventStmAccess() {
		return pEventStm;
	}
	
	public ParserRule getEventStmRule() {
		return getEventStmAccess().getRule();
	}
	
	//Stm:
	//	ifdef=IfDef? statement=Statement;
	public StmElements getStmAccess() {
		return pStm;
	}
	
	public ParserRule getStmRule() {
		return getStmAccess().getRule();
	}
	
	//enum ActionName returns String:
	//	aselect='<select_process>' |
	//	anew='<new_process>' |
	//	aclock='<clock>' |
	//	apretake='<pre_take>' |
	//	aposttake='<post_take>' |
	//	aschedulingaction='<scheduling_action>' |
	//	aprocessaction='<process_action>';
	public ActionNameElements getActionNameAccess() {
		return eActionName;
	}
	
	public EnumRule getActionNameRule() {
		return getActionNameAccess().getRule();
	}
	
	//enum EventName returns String:
	//	select='select_process' | new='new_process' | clock |
	//	pretake='pre_take' | posttake='post_take';
	public EventNameElements getEventNameAccess() {
		return eEventName;
	}
	
	public EnumRule getEventNameRule() {
		return getEventNameAccess().getRule();
	}
	
	//Statement:
	//	JavaCode | MoveProcess | ReorderProcess | SetProcessInstance | LoopProcess | GetProcess | RemoveProcess | ChangeValue
	//	| SetExecTime | SetReturnCol | SetReturnSet | IfStatement | AssertStatement | PrintStatement | PrintLogStatement |
	//	GenCodeStatement | GenLnCodeStatement | NewProcessStatement | CallFunction | BlockStatement | ReturnStatement |
	//	CheckPoint | DeclareProcess | SetProcess;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//JavaCode:
	//	'code' code=ML_CODE;
	public JavaCodeElements getJavaCodeAccess() {
		return pJavaCode;
	}
	
	public ParserRule getJavaCodeRule() {
		return getJavaCodeAccess().getRule();
	}
	
	//terminal ML_CODE:
	//	'{*'->'*}';
	public TerminalRule getML_CODERule() {
		return tML_CODE;
	}
	
	////SetGenTemplate : 'template' '<' event+= EventName (',' event+=EventName)* '>' ';';
	//DeclareProcess:
	//	'process' process=Process ';';
	public DeclareProcessElements getDeclareProcessAccess() {
		return pDeclareProcess;
	}
	
	public ParserRule getDeclareProcessRule() {
		return getDeclareProcessAccess().getRule();
	}
	
	//SetProcess:
	//	process=Process '=' 'get_process' '(' (id=INT | pid=ID) ')' ';';
	public SetProcessElements getSetProcessAccess() {
		return pSetProcess;
	}
	
	public ParserRule getSetProcessRule() {
		return getSetProcessAccess().getRule();
	}
	
	//SetExecTime:
	//	'time_slice' '=' expr=Expression ';';
	public SetExecTimeElements getSetExecTimeAccess() {
		return pSetExecTime;
	}
	
	public ParserRule getSetExecTimeRule() {
		return getSetExecTimeAccess().getRule();
	}
	
	//SetReturnCol:
	//	'return_set' '=' col=SchedulerSet ';';
	public SetReturnColElements getSetReturnColAccess() {
		return pSetReturnCol;
	}
	
	public ParserRule getSetReturnColRule() {
		return getSetReturnColAccess().getRule();
	}
	
	//SetReturnSet:
	//	'return_set' '=' '{' col+=SchedulerSet (',' col+=SchedulerSet)* '}' ';';
	public SetReturnSetElements getSetReturnSetAccess() {
		return pSetReturnSet;
	}
	
	public ParserRule getSetReturnSetRule() {
		return getSetReturnSetAccess().getRule();
	}
	
	//CheckPoint:
	//	'checkpoint' pointid=PointID ';';
	public CheckPointElements getCheckPointAccess() {
		return pCheckPoint;
	}
	
	public ParserRule getCheckPointRule() {
		return getCheckPointAccess().getRule();
	}
	
	//PointID:
	//	name=ID;
	public PointIDElements getPointIDAccess() {
		return pPointID;
	}
	
	public ParserRule getPointIDRule() {
		return getPointIDAccess().getRule();
	}
	
	//CallFunction:
	//	'call' funcName=FunctionName '(' process=Process (',' parameterlist=InterfaceParameterList)? ')' ';';
	public CallFunctionElements getCallFunctionAccess() {
		return pCallFunction;
	}
	
	public ParserRule getCallFunctionRule() {
		return getCallFunctionAccess().getRule();
	}
	
	//RemoveProcess:
	//	'remove' process=Process ';';
	public RemoveProcessElements getRemoveProcessAccess() {
		return pRemoveProcess;
	}
	
	public ParserRule getRemoveProcessRule() {
		return getRemoveProcessAccess().getRule();
	}
	
	//MoveProcess:
	//	'move' process=Process 'to' colTo=SchedulerSet ';';
	public MoveProcessElements getMoveProcessAccess() {
		return pMoveProcess;
	}
	
	public ParserRule getMoveProcessRule() {
		return getMoveProcessAccess().getRule();
	}
	
	//ReorderProcess:
	//	'reorder' process=Process 'in' colTo=SchedulerSet ';';
	public ReorderProcessElements getReorderProcessAccess() {
		return pReorderProcess;
	}
	
	public ParserRule getReorderProcessRule() {
		return getReorderProcessAccess().getRule();
	}
	
	//SetProcessInstance:
	//	'set' process=Process 'to' colTo=SchedulerSet ';';
	public SetProcessInstanceElements getSetProcessInstanceAccess() {
		return pSetProcessInstance;
	}
	
	public ParserRule getSetProcessInstanceRule() {
		return getSetProcessInstanceAccess().getRule();
	}
	
	//LoopProcess:
	//	'for' 'each' 'process' pname=Process 'in' colFrom=SchedulerSet statement=Statement;
	public LoopProcessElements getLoopProcessAccess() {
		return pLoopProcess;
	}
	
	public ParserRule getLoopProcessRule() {
		return getLoopProcessAccess().getRule();
	}
	
	//ChangeAction:
	//	{ChangeAction} 'set' '{' sta+=(ChangeValue | AssertStatement)* '}';
	public ChangeActionElements getChangeActionAccess() {
		return pChangeAction;
	}
	
	public ParserRule getChangeActionRule() {
		return getChangeActionAccess().getRule();
	}
	
	//GetProcess:
	//	'get' 'process' 'from' colFrom=SchedulerSet
	//	change=ChangeAction? 'to' 'run' ('in' 'time' '=' time=Expression 'then' 'return' 'to' colTo=SchedulerSet)? ';';
	public GetProcessElements getGetProcessAccess() {
		return pGetProcess;
	}
	
	public ParserRule getGetProcessRule() {
		return getGetProcessAccess().getRule();
	}
	
	//ExecuteProcess:
	//	'execute' process=Process ';';
	public ExecuteProcessElements getExecuteProcessAccess() {
		return pExecuteProcess;
	}
	
	public ParserRule getExecuteProcessRule() {
		return getExecuteProcessAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' condition=Expression ')'
	//	thenBlock=Statement (=> 'else' elseBlock=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//BlockStatement:
	//	{BlockStatement}
	//	'{' statements+=Statement* '}';
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	//NewProcessStatement:
	//	'new' element=NewElement (',' max=INT)? ';';
	public NewProcessStatementElements getNewProcessStatementAccess() {
		return pNewProcessStatement;
	}
	
	public ParserRule getNewProcessStatementRule() {
		return getNewProcessStatementAccess().getRule();
	}
	
	//NewElement:
	//	process=Process '(' (paraAssign+=ParaValue (',' paraAssign+=ParaValue)*)? ')';
	public NewElementElements getNewElementAccess() {
		return pNewElement;
	}
	
	public ParserRule getNewElementRule() {
		return getNewElementAccess().getRule();
	}
	
	//ParaValue:
	//	{ParaValue} num=NumValue | bool=BoolValue | id=ID;
	public ParaValueElements getParaValueAccess() {
		return pParaValue;
	}
	
	public ParserRule getParaValueRule() {
		return getParaValueAccess().getRule();
	}
	
	//AssertStatement:
	//	'assert' expr=Expression ';';
	public AssertStatementElements getAssertStatementAccess() {
		return pAssertStatement;
	}
	
	public ParserRule getAssertStatementRule() {
		return getAssertStatementAccess().getRule();
	}
	
	//PrintStatement:
	//	'print' st=Expression ';';
	public PrintStatementElements getPrintStatementAccess() {
		return pPrintStatement;
	}
	
	public ParserRule getPrintStatementRule() {
		return getPrintStatementAccess().getRule();
	}
	
	//PrintLogStatement:
	//	'printlog' st=Expression ';';
	public PrintLogStatementElements getPrintLogStatementAccess() {
		return pPrintLogStatement;
	}
	
	public ParserRule getPrintLogStatementRule() {
		return getPrintLogStatementAccess().getRule();
	}
	
	//GenCodeStatement:
	//	'gen' (comp=ID ',')? st=Expression ';';
	public GenCodeStatementElements getGenCodeStatementAccess() {
		return pGenCodeStatement;
	}
	
	public ParserRule getGenCodeStatementRule() {
		return getGenCodeStatementAccess().getRule();
	}
	
	//GenLnCodeStatement:
	//	'genln' (comp=ID ',')? st=Expression ';';
	public GenLnCodeStatementElements getGenLnCodeStatementAccess() {
		return pGenLnCodeStatement;
	}
	
	public ParserRule getGenLnCodeStatementRule() {
		return getGenLnCodeStatementAccess().getRule();
	}
	
	//ChangeValue:
	//	ChangeValueUnOp | ChangeValueExpression | ChangeListValue;
	public ChangeValueElements getChangeValueAccess() {
		return pChangeValue;
	}
	
	public ParserRule getChangeValueRule() {
		return getChangeValueAccess().getRule();
	}
	
	//ChangeValueUnOp:
	//	var=QualifiedNames op=('++' | '--') ';';
	public ChangeValueUnOpElements getChangeValueUnOpAccess() {
		return pChangeValueUnOp;
	}
	
	public ParserRule getChangeValueUnOpRule() {
		return getChangeValueUnOpAccess().getRule();
	}
	
	//ChangeValueExpression:
	//	var=QualifiedNames '=' exp=Expression ';';
	public ChangeValueExpressionElements getChangeValueExpressionAccess() {
		return pChangeValueExpression;
	}
	
	public ParserRule getChangeValueExpressionRule() {
		return getChangeValueExpressionAccess().getRule();
	}
	
	////ChangeArrayValue : avar = ID '[' expr = Expression ']' '=' exp=Expression ';';
	//ChangeListValue:
	//	lvar=ListElement '=' exp=Expression ';';
	public ChangeListValueElements getChangeListValueAccess() {
		return pChangeListValue;
	}
	
	public ParserRule getChangeListValueRule() {
		return getChangeListValueAccess().getRule();
	}
	
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	////MulOrDiv returns Expression:
	////	Primary (
	////		{MulOrDiv.left=current} op=('*'|'/')
	////		right=Primary
	////	)*;
	//MulOrDiv Expression:
	//	Implies ({MulOrDiv.left=current} op=('*' | '/') right=Implies)*
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Implies Expression:
	//	Primary ({Implies.left=current} op='=>' right=Primary)*
	public ImpliesElements getImpliesAccess() {
		return pImplies;
	}
	
	public ParserRule getImpliesRule() {
		return getImpliesAccess().getRule();
	}
	
	//Primary Expression:
	//	'(' Expression ')' | {Not} '!' expression=Primary | Atomic | EmptyExpression | FullExpression | NullExpression |
	//	InExpression | InPIDExpression | InPExpression | ExistExpression | ExistPID | ExistP | GetIDExpression |
	//	HasNameExpression | HasID | HasIDINT | GetName
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//// | ExistsProcessExpression | AllExpression ;
	////GetName: 'get_name' '('proc = Process ')';
	////EmptyExpression: 'empty' '(' col= [SchedulerSet] ')' ;	
	////InExpression:  col = [SchedulerSet] '.' 'hasProcess' '(' proc = ID ')';
	////ExistExpression: '(' '<>' proc = Process 'in' col = SchedulerSet ':' bexpr = Or ')';
	////AllExpression: '(' '[]' proc = Process 'in' col = SchedulerSet ':' bexpr = Or ')';
	//GetIDExpression:
	//	'get_pid' '(' pN=CHAR_SEQUENCE ')';
	public GetIDExpressionElements getGetIDExpressionAccess() {
		return pGetIDExpression;
	}
	
	public ParserRule getGetIDExpressionRule() {
		return getGetIDExpressionAccess().getRule();
	}
	
	//EmptyExpression:
	//	col=SchedulerSet '.' 'isEmpty' '(' ')';
	public EmptyExpressionElements getEmptyExpressionAccess() {
		return pEmptyExpression;
	}
	
	public ParserRule getEmptyExpressionRule() {
		return getEmptyExpressionAccess().getRule();
	}
	
	//FullExpression:
	//	col=SchedulerSet '.' 'isFull' '(' ')';
	public FullExpressionElements getFullExpressionAccess() {
		return pFullExpression;
	}
	
	public ParserRule getFullExpressionRule() {
		return getFullExpressionAccess().getRule();
	}
	
	//InExpression:
	//	col=SchedulerSet '.' 'containsProcess' '(' pN=CHAR_SEQUENCE ')';
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//InPIDExpression:
	//	col=SchedulerSet '.' 'containsProcess' '(' id=ID ')';
	public InPIDExpressionElements getInPIDExpressionAccess() {
		return pInPIDExpression;
	}
	
	public ParserRule getInPIDExpressionRule() {
		return getInPIDExpressionAccess().getRule();
	}
	
	//InPExpression:
	//	col=SchedulerSet '.' 'containsProcess' '(' id=INT ')';
	public InPExpressionElements getInPExpressionAccess() {
		return pInPExpression;
	}
	
	public ParserRule getInPExpressionRule() {
		return getInPExpressionAccess().getRule();
	}
	
	//ExistExpression:
	//	'exists' '(' pN=CHAR_SEQUENCE ')';
	public ExistExpressionElements getExistExpressionAccess() {
		return pExistExpression;
	}
	
	public ParserRule getExistExpressionRule() {
		return getExistExpressionAccess().getRule();
	}
	
	//ExistPID:
	//	'exists' '(' id=ID ')';
	public ExistPIDElements getExistPIDAccess() {
		return pExistPID;
	}
	
	public ParserRule getExistPIDRule() {
		return getExistPIDAccess().getRule();
	}
	
	//ExistP:
	//	'exists' '(' id=INT ')';
	public ExistPElements getExistPAccess() {
		return pExistP;
	}
	
	public ParserRule getExistPRule() {
		return getExistPAccess().getRule();
	}
	
	//NullExpression:
	//	procName=Process '.' 'isNull' '(' ')';
	public NullExpressionElements getNullExpressionAccess() {
		return pNullExpression;
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}
	
	//HasNameExpression:
	//	proc=Process '.' 'hasName' '(' pN=CHAR_SEQUENCE ')';
	public HasNameExpressionElements getHasNameExpressionAccess() {
		return pHasNameExpression;
	}
	
	public ParserRule getHasNameExpressionRule() {
		return getHasNameExpressionAccess().getRule();
	}
	
	//HasID:
	//	proc=Process '.' 'hasID' '(' id=ID ')';
	public HasIDElements getHasIDAccess() {
		return pHasID;
	}
	
	public ParserRule getHasIDRule() {
		return getHasIDAccess().getRule();
	}
	
	//HasIDINT:
	//	proc=Process '.' 'hasID' '(' id=INT ')';
	public HasIDINTElements getHasIDINTAccess() {
		return pHasIDINT;
	}
	
	public ParserRule getHasIDINTRule() {
		return getHasIDINTAccess().getRule();
	}
	
	//GetName:
	//	proc=Process '.' 'getName' '(' ')';
	public GetNameElements getGetNameAccess() {
		return pGetName;
	}
	
	public ParserRule getGetNameRule() {
		return getGetNameAccess().getRule();
	}
	
	//Atomic:
	//	{IntConstant} value=NumValue | {CurentCore} value='current_core' | {BoolConstant} value=('true' | 'false') | {StateID}
	//	stateID='<StateID>' | {BranchID} branchID='<BranchID>' | {Action} action='getAction()' | {Step} step='getStep()' |
	//	{TotalStep} totalstep='getTotalStep()' | {GetInstance} procName=Process '.' 'getInstanceID' '(' ')' | {GetPID}
	//	procName=Process '.' 'getPID' '(' ')' | {InstanceID} instanceID='<InstanceID>' | {ProcessID} pID='<PID>' |
	//	{ProcessName} pName='<PName>' | {Behavior} behavior='<actions>' | {Contains} contains='<contains>' |
	//	var=QualifiedNames | lele=ListElement | charseq=CHAR_SEQUENCE | string=STRING | sysvar=SysVar
	//	//refitem = RefItem
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	////RefItem: refid=ID '[' refitem = RefListItem ']';
	//SysVar:
	//	'Sys' '(' vname=ID ')';
	public SysVarElements getSysVarAccess() {
		return pSysVar;
	}
	
	public ParserRule getSysVarRule() {
		return getSysVarAccess().getRule();
	}
	
	////AVAR : name = ID '[' expr = Expression ']';
	////ArrayDec: (type=TypeName) aName = DecName '[' num = NumValue ']';
	//QualifiedNames:
	//	{QualifiedNames} name=ID ('.' prop=ProcessPropertyName)?;
	public QualifiedNamesElements getQualifiedNamesAccess() {
		return pQualifiedNames;
	}
	
	public ParserRule getQualifiedNamesRule() {
		return getQualifiedNamesAccess().getRule();
	}
	
	////QualifiedNames: name = ID (proper = Proper ) ?; //| avar = AvarElement
	////QualifiedNames: {QualifiedNames} ID (=> '.' ID)* ; //| avar = AvarElement
	//Proper:
	//	'.' prop=ProcessPropertyName;
	public ProperElements getProperAccess() {
		return pProper;
	}
	
	public ParserRule getProperRule() {
		return getProperAccess().getRule();
	}
	
	//ListElement:
	//	name=ID '[' (id=ID | num=INT) ']';
	public ListElementElements getListElementAccess() {
		return pListElement;
	}
	
	public ParserRule getListElementRule() {
		return getListElementAccess().getRule();
	}
	
	////QualifiedNames: name = ID ( => '[' expr = Expression ']') ?;
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal CHAR_SEQUENCE:
	//	'"'->'"';
	public TerminalRule getCHAR_SEQUENCERule() {
		return tCHAR_SEQUENCE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//'->'\n';
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
