package scheduling.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import scheduling.dsl.BoolValue;
import scheduling.dsl.CompVarDef;
import scheduling.dsl.CompVarDefination;
import scheduling.dsl.CompVarName;
import scheduling.dsl.ComparationDef;
import scheduling.dsl.ComparationName;
import scheduling.dsl.DataBlockDef;
import scheduling.dsl.DataDef;
import scheduling.dsl.DataSingleDef;
import scheduling.dsl.NumValue;
import scheduling.dsl.OrderingDef;
import scheduling.dsl.SchedulerCollectionDef;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.SchedulerDataDef;
import scheduling.dsl.SchedulerDef;
import scheduling.dsl.Statement;
import scheduling.dsl.Value;
import scheduling.generator.Statements;
import scheduling.generator.Utilities;

@SuppressWarnings("all")
public class DataStructureGenerator {
  private static SchedulerDef scheduler;
  
  private static OrderingDef order;
  
  public static String getcollectionName(final SchedulerCollectionDef coldef) {
    String result = "";
    boolean _notEquals = (!Objects.equal(coldef, null));
    if (_notEquals) {
      EList<ComparationName> _comp = coldef.getComp();
      boolean _notEquals_1 = (!Objects.equal(_comp, null));
      if (_notEquals_1) {
        EList<ComparationName> _comp_1 = coldef.getComp();
        for (final ComparationName comp : _comp_1) {
          String _result = result;
          String _name = comp.getName();
          String _plus = ("_" + _name);
          result = (_result + _plus);
        }
      }
    }
    return result;
  }
  
  public static void genDataStructure(final IFileSystemAccess2 fsa, final SchedulerDSL schModel, final ArrayList<String> genFiles) {
    SchedulerDef _scheduler = schModel.getScheduler();
    DataStructureGenerator.scheduler = _scheduler;
    OrderingDef _order = schModel.getOrder();
    DataStructureGenerator.order = _order;
    CharSequence _ProcessSettoJavaCode = DataStructureGenerator.ProcessSettoJavaCode();
    fsa.generateFile("../src/sspinja/scheduling/ProcessSet.java", _ProcessSettoJavaCode);
    String _ProcessCollectionBasetoJavaCode = DataStructureGenerator.ProcessCollectionBasetoJavaCode();
    fsa.generateFile("../src/sspinja/scheduling/ProcessCollectionBase.java", _ProcessCollectionBasetoJavaCode);
    String _ProcessCollectiontoJavaCode = DataStructureGenerator.ProcessCollectiontoJavaCode();
    fsa.generateFile("../src/sspinja/scheduling/ProcessCollection.java", _ProcessCollectiontoJavaCode);
    CharSequence _RunningSettoJavaCode = DataStructureGenerator.RunningSettoJavaCode();
    fsa.generateFile("../src/sspinja/scheduling/RunningSet.java", _RunningSettoJavaCode);
    OrderingDef _order_1 = schModel.getOrder();
    String _SortedProcessCollectionBasetoJavaCode = DataStructureGenerator.SortedProcessCollectionBasetoJavaCode(_order_1);
    fsa.generateFile("../src/sspinja/scheduling/SortedProcessCollectionBase.java", _SortedProcessCollectionBasetoJavaCode);
    genFiles.add("ProcessSet.java");
    genFiles.add("ProcessCollectionBase.java");
    genFiles.add("ProcessCollection.java");
    genFiles.add("RunningSet.java");
    genFiles.add("SortedProcessCollectionBase.java");
    SchedulerDataDef _schedulerdata = DataStructureGenerator.scheduler.getSchedulerdata();
    boolean _notEquals = (!Objects.equal(_schedulerdata, null));
    if (_notEquals) {
      SchedulerDataDef _schedulerdata_1 = DataStructureGenerator.scheduler.getSchedulerdata();
      EList<DataDef> _datadef = _schedulerdata_1.getDatadef();
      boolean _notEquals_1 = (!Objects.equal(_datadef, null));
      if (_notEquals_1) {
        HashSet<String> collectionType = new HashSet<String>();
        SchedulerDataDef _schedulerdata_2 = DataStructureGenerator.scheduler.getSchedulerdata();
        EList<DataDef> _datadef_1 = _schedulerdata_2.getDatadef();
        for (final DataDef schdata : _datadef_1) {
          DataBlockDef _datablockdef = schdata.getDatablockdef();
          boolean _notEquals_2 = (!Objects.equal(_datablockdef, null));
          if (_notEquals_2) {
            DataBlockDef _datablockdef_1 = schdata.getDatablockdef();
            EList<DataSingleDef> _datadef_2 = _datablockdef_1.getDatadef();
            for (final DataSingleDef data : _datadef_2) {
              SchedulerCollectionDef _col = data.getCol();
              boolean _notEquals_3 = (!Objects.equal(_col, null));
              if (_notEquals_3) {
                SchedulerCollectionDef _col_1 = data.getCol();
                String coltype = DataStructureGenerator.getcollectionName(_col_1);
                if ((data.getCol().getOperationtype().toString().contains("lifo") || data.getCol().getOperationtype().toString().contains("fifo"))) {
                  String _coltype = coltype;
                  SchedulerCollectionDef _col_2 = data.getCol();
                  scheduling.dsl.String _operationtype = _col_2.getOperationtype();
                  String _plus = ("_" + _operationtype);
                  coltype = (_coltype + _plus);
                }
                String _trim = coltype.trim();
                boolean _isEmpty = _trim.isEmpty();
                boolean _not = (!_isEmpty);
                if (_not) {
                  boolean _contains = collectionType.contains(coltype);
                  boolean _not_1 = (!_contains);
                  if (_not_1) {
                    collectionType.add(coltype);
                    genFiles.add((("ProcessCollection" + coltype) + ".java"));
                    OrderingDef _order_2 = schModel.getOrder();
                    boolean _notEquals_4 = (!Objects.equal(_order_2, null));
                    if (_notEquals_4) {
                      SchedulerCollectionDef _col_3 = data.getCol();
                      SchedulerCollectionDef _col_4 = data.getCol();
                      scheduling.dsl.String _operationtype_1 = _col_4.getOperationtype();
                      String _string = _operationtype_1.toString();
                      OrderingDef _order_3 = schModel.getOrder();
                      CompVarDef _vars = _order_3.getVars();
                      String _genCollectionClass = DataStructureGenerator.genCollectionClass(coltype, _col_3, _string, _vars);
                      fsa.generateFile((("../src/sspinja/scheduling/ProcessCollection" + coltype) + ".java"), _genCollectionClass);
                    } else {
                      SchedulerCollectionDef _col_5 = data.getCol();
                      SchedulerCollectionDef _col_6 = data.getCol();
                      scheduling.dsl.String _operationtype_2 = _col_6.getOperationtype();
                      String _string_1 = _operationtype_2.toString();
                      String _genCollectionClass_1 = DataStructureGenerator.genCollectionClass(coltype, _col_5, _string_1, null);
                      fsa.generateFile((("../src/sspinja/scheduling/ProcessCollection" + coltype) + ".java"), _genCollectionClass_1);
                    }
                  }
                }
              }
            }
          } else {
            DataSingleDef _datasingledef = schdata.getDatasingledef();
            boolean _notEquals_5 = (!Objects.equal(_datasingledef, null));
            if (_notEquals_5) {
              DataSingleDef _datasingledef_1 = schdata.getDatasingledef();
              SchedulerCollectionDef _col_7 = _datasingledef_1.getCol();
              boolean _notEquals_6 = (!Objects.equal(_col_7, null));
              if (_notEquals_6) {
                DataSingleDef _datasingledef_2 = schdata.getDatasingledef();
                SchedulerCollectionDef _col_8 = _datasingledef_2.getCol();
                String coltype_1 = DataStructureGenerator.getcollectionName(_col_8);
                if ((schdata.getDatasingledef().getCol().getOperationtype().toString().contains("lifo") || schdata.getDatasingledef().getCol().getOperationtype().toString().contains("fifo"))) {
                  String _coltype_1 = coltype_1;
                  DataSingleDef _datasingledef_3 = schdata.getDatasingledef();
                  SchedulerCollectionDef _col_9 = _datasingledef_3.getCol();
                  scheduling.dsl.String _operationtype_3 = _col_9.getOperationtype();
                  String _plus_1 = ("_" + _operationtype_3);
                  coltype_1 = (_coltype_1 + _plus_1);
                }
                String _trim_1 = coltype_1.trim();
                boolean _isEmpty_1 = _trim_1.isEmpty();
                boolean _not_2 = (!_isEmpty_1);
                if (_not_2) {
                  boolean _contains_1 = collectionType.contains(coltype_1);
                  boolean _not_3 = (!_contains_1);
                  if (_not_3) {
                    collectionType.add(coltype_1);
                    genFiles.add((("ProcessCollection" + coltype_1) + ".java"));
                    OrderingDef _order_4 = schModel.getOrder();
                    boolean _notEquals_7 = (!Objects.equal(_order_4, null));
                    if (_notEquals_7) {
                      DataSingleDef _datasingledef_4 = schdata.getDatasingledef();
                      SchedulerCollectionDef _col_10 = _datasingledef_4.getCol();
                      DataSingleDef _datasingledef_5 = schdata.getDatasingledef();
                      SchedulerCollectionDef _col_11 = _datasingledef_5.getCol();
                      scheduling.dsl.String _operationtype_4 = _col_11.getOperationtype();
                      String _string_2 = _operationtype_4.toString();
                      OrderingDef _order_5 = schModel.getOrder();
                      CompVarDef _vars_1 = _order_5.getVars();
                      String _genCollectionClass_2 = DataStructureGenerator.genCollectionClass(coltype_1, _col_10, _string_2, _vars_1);
                      fsa.generateFile((("../src/sspinja/scheduling/ProcessCollection" + coltype_1) + ".java"), _genCollectionClass_2);
                    } else {
                      DataSingleDef _datasingledef_6 = schdata.getDatasingledef();
                      SchedulerCollectionDef _col_12 = _datasingledef_6.getCol();
                      DataSingleDef _datasingledef_7 = schdata.getDatasingledef();
                      SchedulerCollectionDef _col_13 = _datasingledef_7.getCol();
                      scheduling.dsl.String _operationtype_5 = _col_13.getOperationtype();
                      String _string_3 = _operationtype_5.toString();
                      String _genCollectionClass_3 = DataStructureGenerator.genCollectionClass(coltype_1, _col_12, _string_3, null);
                      fsa.generateFile((("../src/sspinja/scheduling/ProcessCollection" + coltype_1) + ".java"), _genCollectionClass_3);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  public static CharSequence ProcessSettoJavaCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling ;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import spinja.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Automatic generation");
    _builder.newLine();
    _builder.append("public interface ProcessSet {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void put(SchedulerProcess _proc) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess get() ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<SchedulerProcess> getProcessSet();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hasProcess(String pName) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hasProcess(int processID) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hasProcess(SchedulerProcess p) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int isEmpty() ;    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void add_time(int time) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void sub_time(int time) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getSize() ;\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void encode(DataWriter _writer) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean decode(DataReader _reader);\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//public void replace(SchedulerProcess running_process, SchedulerProcess _previous_run) ;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static String ProcessCollectionBasetoJavaCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import spinja.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Automatic generation");
    _builder.newLine();
    _builder.append("public abstract class ProcessCollectionBase implements ProcessSet {\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<ArrayList<SchedulerProcess>> dataSet = new ArrayList<ArrayList<SchedulerProcess>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void init_order() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<SchedulerProcess> pSet = new ArrayList<SchedulerProcess>() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pSet.addAll(obj) ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataSet.clear() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataSet.add(pSet) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void encode(DataWriter _writer) {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int setCount = dataSet.size() ;\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_writer.writeByte(setCount);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int s = 0; s < setCount; s++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int pCount = dataSet.get(s).size() ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("_writer.writeByte(pCount);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int p = 0 ; p < pCount; p++)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dataSet.get(s).get(p).encode(_writer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean decode(DataReader _reader) {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int setCount = _reader.readByte();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataSet.clear(); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int s = 0; s < setCount; s++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int pCount = _reader.readByte();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess>() ;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int p = 0 ; p < pCount; p++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("SchedulerProcess proc = new SchedulerProcess() ;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("proc.decode(_reader);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("set.add(proc);\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dataSet.add(set);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getSize() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int size = 1 ; //setCount");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int setCount = dataSet.size() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int s = 0; s<setCount; s++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("size += 1 ; //pCount");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int pCount = dataSet.get(s).size() ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (pCount > 0)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("size += pCount * dataSet.get(s).get(0).getSize() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return size ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int size(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int result = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result += obj.size() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int isEmpty() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dataSet.size() == 0 ? 1 : 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void add(SchedulerProcess p){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("put(p) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void print(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (dataSet.isEmpty())");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("Util.println(\"Empty !\") ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Util.println(obj.toString()) ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Util.println(\"\") ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dataSet.isEmpty())");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("sb.append(\"Empty!\\n\") ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sb.append(obj.toString()) ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("sb.append(\"\\n\") ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return sb.toString();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void add_time(int time) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t    \t    ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("int index = 0 ;         ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if (obj.size() > 0) {\t\t    \t\t\t");
    _builder.newLine();
    _builder.append("    \t       \t");
    _builder.append("for(SchedulerProcess proc : obj) {            \t\t            \t");
    _builder.newLine();
    _builder.append("    \t           \t");
    _builder.append("proc.add_time(time) ;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("dataSet.set(index, obj);");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void sub_time(int time) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t    \t    ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("int index = 0 ;         ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if (obj.size() > 0) {\t\t    \t\t\t");
    _builder.newLine();
    _builder.append("    \t       \t");
    _builder.append("for(SchedulerProcess proc : obj) {            \t\t            \t");
    _builder.newLine();
    _builder.append("    \t           \t");
    _builder.append("proc.sub_time(time) ;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("dataSet.set(index, obj);");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hasProcess(SchedulerProcess proc){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return hasProcess(proc.processID);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hasProcess(int processID){\t\t        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();                    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = obj.iterator();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (proc_iterator.next().processID == processID)");
    _builder.newLine();
    _builder.append("                \t");
    _builder.append("return 1 ;\t\t                ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 0 ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hasProcess(String pName){\t\t        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();                    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = obj.iterator();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("                 ");
    _builder.append("if (SchedulerObject.getStaticPropertyObject(proc_iterator.next().refID).pName.equals(pName))");
    _builder.newLine();
    _builder.append("                \t");
    _builder.append("return 1 ;\t\t                ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 0 ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void replace(SchedulerProcess running_process, SchedulerProcess _previous_run) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("int index = 0 ;         ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if (obj.size() > 0) {");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("int idx = 0 ;");
    _builder.newLine();
    _builder.append("    \t       \t");
    _builder.append("for(SchedulerProcess proc : obj) {            \t\t            \t");
    _builder.newLine();
    _builder.append("    \t           \t");
    _builder.append("if (proc.processID == running_process.processID) {");
    _builder.newLine();
    _builder.append("    \t           \t\t");
    _builder.append("obj.remove(idx) ;");
    _builder.newLine();
    _builder.append("    \t           \t\t");
    _builder.append("obj.add(idx, _previous_run);                \t\t");
    _builder.newLine();
    _builder.append("    \t           \t\t");
    _builder.append("dataSet.set(index,obj) ;");
    _builder.newLine();
    _builder.append("    \t           \t\t");
    _builder.append("return ;");
    _builder.newLine();
    _builder.append("    \t           \t");
    _builder.append("}            \t");
    _builder.newLine();
    _builder.append("    \t           \t");
    _builder.append("idx ++ ;");
    _builder.newLine();
    _builder.append("    \t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t    ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@SuppressWarnings(\"unchecked\")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<SchedulerProcess> getProcessSet(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (dataSet.isEmpty()) return null ;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return (ArrayList<SchedulerProcess>) dataSet.get(0).clone() ; //not .remove() ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t    \t\t    \t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess getProcess(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (SchedulerProcess) dataSet.get(0).toArray()[0] ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess getNextProcess() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null ; //need to edit");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess getProcess(int processID) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();                    ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = obj.iterator();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("SchedulerProcess p = proc_iterator.next();");
    _builder.newLine();
    _builder.append("            \t");
    _builder.append("if (p.processID == processID)");
    _builder.newLine();
    _builder.append("            \t\t");
    _builder.append("return p ;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess removeProcess(SchedulerProcess proc) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return removeProcess(proc.processID) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SchedulerProcess removeProcess(int processID){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (processID < 0 ) return null ;");
    _builder.newLine();
    _builder.append("       ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//remove process which has processID\t\t        \t\t\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();  ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int index = 0 ; //for the process set list");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(iterator.hasNext()){\t\t\t\t");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = obj.iterator();            ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("SchedulerProcess proc = proc_iterator.next() ;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (proc.processID == processID) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (obj.size() == 1)");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("dataSet.remove(obj) ;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("obj.remove(proc) ;");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("dataSet.set(index, obj) ;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return proc ;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}                ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}            ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess get() {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return getProcess();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<SchedulerProcess> findProcessByrefID(int refID) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<SchedulerProcess> result = new ArrayList<SchedulerProcess>() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//public ArrayList<ArrayList<SchedulerProcess>> dataSet = new ArrayList<ArrayList<SchedulerProcess>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (ArrayList<SchedulerProcess> pList : dataSet) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SchedulerProcess p : pList) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//if (p.refID == (byte) refID) result.add(p) ;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (p.refID == refID) result.add(p) ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (result.isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return result ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract void put(ArrayList<SchedulerProcess> aL) ;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static CharSequence RunningSettoJavaCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;\t");
    _builder.newLine();
    _builder.append("import spinja.util.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Automatic generation");
    _builder.newLine();
    _builder.append("public class RunningSet implements ProcessSet {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//using for running set! ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<SchedulerProcess> dataSet = new ArrayList<SchedulerProcess>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void clear() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataSet.clear();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void add_time(int time) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SchedulerProcess p : dataSet) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("p.add_time(time) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void sub_time(int time) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (SchedulerProcess p : dataSet) ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("p.sub_time(time) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void encode(DataWriter _writer) {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int pCount = dataSet.size() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("_writer.writeByte(pCount);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int _i = 0; _i < pCount; _i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dataSet.get(_i).encode(_writer);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean decode(DataReader _reader) {\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int pCount = _reader.readByte();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("dataSet.clear();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int _i = 0; _i < pCount; _i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SchedulerProcess proc = new SchedulerProcess();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("proc.decode(_reader);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dataSet.add(proc) ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void replace(SchedulerProcess running_process, SchedulerProcess _previous_run) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Iterator<SchedulerProcess> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("int index = 0 ;         ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("SchedulerProcess proc = iterator.next();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (proc.processID == running_process.processID) { ");
    _builder.newLine();
    _builder.append("\t           \t");
    _builder.append("dataSet.set(index,_previous_run) ;");
    _builder.newLine();
    _builder.append("\t           \t");
    _builder.append("return ;");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}         \t            ");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<SchedulerProcess> getProcessSet() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dataSet ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getSize() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int pCount = dataSet.size() ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (pCount == 0)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return 1 ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return 1 + pCount * dataSet.get(0).getSize() ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess getFirstProcess(int lastProcessID) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dataSet.isEmpty())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (lastProcessID >= 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (int i = 0 ; i < dataSet.size() ; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (dataSet.get(i).processID == lastProcessID) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (i < dataSet.size() - 1)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("return dataSet.get(i + 1);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("return null ; ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return dataSet.get(0) ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int size(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dataSet.size() ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int isEmpty() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dataSet.size() == 0 ? 1 : 0 ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void put(SchedulerProcess p){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("dataSet.add(p) ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void put(ArrayList<SchedulerProcess> aL) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("for (SchedulerProcess p : aL)");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("put(p) ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void print(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (dataSet == null) ");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("Util.println(\"Empty!\") ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("if (dataSet.isEmpty())");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("Util.println(\"Empty!\") ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Util.println(dataSet.toString()) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dataSet == null) ");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("sb.append(\"Empty!\") ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("if (dataSet.isEmpty())");
    _builder.newLine();
    _builder.append("\t    \t\t");
    _builder.append("sb.append(\"Empty!\") ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("else");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("sb.append(dataSet.toString()) ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (sb.toString());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int hasProcess(SchedulerProcess proc){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return hasProcess(proc.processID);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hasProcess(int processID){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("boolean result = false ;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("result = (proc_iterator.next().processID == processID) ;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if (result) return 1 ; ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 0 ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hasProcess(String pName){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("boolean result = false ;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("result = SchedulerObject.getStaticPropertyObject(proc_iterator.next().refID).pName.equals(pName) ;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if (result) return 1 ; ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 0 ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SchedulerProcess getProcess(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (dataSet.isEmpty()) return null ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("//Util.println(dataSet) ;\t");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("SchedulerProcess result = (SchedulerProcess) dataSet.toArray()[0] ;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("dataSet.remove(result) ;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("return result ;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess getProcess(int processID) {\t\t\t\t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<SchedulerProcess> proc_iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(proc_iterator.hasNext()) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("SchedulerProcess p = proc_iterator.next() ;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if (p.processID == processID) ");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("return p;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        \t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess removeProcess(SchedulerProcess proc) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return removeProcess(proc.processID) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public SchedulerProcess removeProcess(int processID){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (processID < 0 ) return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Iterator<SchedulerProcess> iterator = dataSet.iterator();\t\t        ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while(iterator.hasNext()){");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("SchedulerProcess proc = iterator.next() ;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("if (proc.processID == processID) {\t\t        \t\t");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("dataSet.remove(proc) ;");
    _builder.newLine();
    _builder.append("        \t\t");
    _builder.append("return proc ;");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return null ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SchedulerProcess get() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// TODO Auto-generated method stub");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return getProcess();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean equals(ProcessCollection obj){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//if (obj == null) return false ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this.dataSet.size() == obj.dataSet.size()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (SchedulerProcess p : this.dataSet)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (! obj.dataSet.contains(p))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return true ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else return false ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static String SortedProcessCollectionBasetoJavaCode(final OrderingDef ordering) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("import java.util.Iterator;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.Comparator;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//Automatic generation");
    _builder.newLine();
    _builder.append("abstract class SortedProcessCollectionBase extends ProcessCollectionBase {\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("abstract int compare(Object pn, Object po) ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void put(ArrayList<SchedulerProcess> aL) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("for (SchedulerProcess p : aL)");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("put(p) ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void put(SchedulerProcess pn){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (dataSet.isEmpty()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess>() ;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("set.add(pn) ;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("dataSet.add(set) ;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = dataSet.iterator();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("int index = 0 ;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("boolean con = true ;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess> ();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("set.add(pn) ;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("while(iterator.hasNext() && con){");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (obj.size() > 0) { //toArray()[0] != null){");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("SchedulerProcess po = (SchedulerProcess) obj.toArray()[0];");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("int com = compare(pn, po) ; //collection get from [0]");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (com < 0) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("//continue ");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("index ++ ;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("if (com == 0) {\t\t                        \t");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("//add to set");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("obj.add(pn);");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("//order by ID");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("Collections.sort(obj, new Comparator<SchedulerProcess>() {");
    _builder.newLine();
    _builder.append("\t                            \t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t                            \t");
    _builder.append("public int compare(SchedulerProcess pn, SchedulerProcess po) {");
    _builder.newLine();
    _builder.append("\t                            \t\t");
    _builder.append("return pn.processID - po.processID;");
    _builder.newLine();
    _builder.append("\t                            \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("});\t\t\t                            \t\t    \t");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("dataSet.set(index, obj) ;");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("return ;");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("}    ");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("//insert here");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("//HashSet<SchedulerProcess> set = new HashSet<SchedulerProcess> ();");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("//set.add(p) ;");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("dataSet.add(index, set);");
    _builder.newLine();
    _builder.append("\t                            ");
    _builder.append("return ;");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("else { //size == 0");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("dataSet.set(index,set) ;");
    _builder.newLine();
    _builder.append("                    \t");
    _builder.append("return ;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("dataSet.add(set);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String ProcessCollectiontoJavaCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling ;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Collections;");
    _builder.newLine();
    _builder.append("import java.util.Comparator;\t\t");
    _builder.newLine();
    _builder.append("public class ProcessCollection extends ProcessCollectionBase implements ProcessSet{\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void put(SchedulerProcess p){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ArrayList<SchedulerProcess> pSet ;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (dataSet.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pSet = dataSet.get(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pSet.add(p);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("//order by process id");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Collections.sort(pSet, new Comparator<SchedulerProcess>() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public int compare(SchedulerProcess pn, SchedulerProcess po) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return pn.processID - po.processID;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dataSet.set(0, pSet);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pSet = new ArrayList<SchedulerProcess>() ;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("pSet.add(p);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("dataSet.add(0, pSet);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void put(ArrayList<SchedulerProcess> aL) { ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("//order by process id   ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("Collections.sort(aL, new Comparator<SchedulerProcess>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public int compare(SchedulerProcess pn, SchedulerProcess po) {\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return pn.processID - po.processID;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});\t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("dataSet.add(aL) ;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String genVars(final CompVarDef vars) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(vars, null));
      if (_notEquals) {
        {
          EList<CompVarDefination> _vard = vars.getVard();
          for(final CompVarDefination p : _vard) {
            {
              scheduling.dsl.String _type = p.getType();
              String _string = _type.toString();
              String _trim = _string.trim();
              boolean _equals = Objects.equal(_trim, "bool");
              if (_equals) {
                _builder.append("boolean ");
              } else {
                _builder.append("int ");
              }
            }
            {
              Value _pvalue = p.getPvalue();
              boolean _notEquals_1 = (!Objects.equal(_pvalue, null));
              if (_notEquals_1) {
                {
                  Value _pvalue_1 = p.getPvalue();
                  NumValue _num = _pvalue_1.getNum();
                  boolean _notEquals_2 = (!Objects.equal(_num, null));
                  if (_notEquals_2) {
                    EList<CompVarName> _name = p.getName();
                    final Function1<CompVarName, String> _function = (CompVarName it) -> {
                      return it.getName();
                    };
                    List<String> _map = ListExtensions.<CompVarName, String>map(_name, _function);
                    String _join = IterableExtensions.join(_map, ", ");
                    Value _pvalue_2 = p.getPvalue();
                    NumValue _num_1 = _pvalue_2.getNum();
                    int _value = _num_1.getValue();
                    String _string_1 = Integer.valueOf(_value).toString();
                    String _setInitValue = Utilities.setInitValue(_join, _string_1);
                    _builder.append(_setInitValue, "");
                  }
                }
                {
                  Value _pvalue_3 = p.getPvalue();
                  BoolValue _bool = _pvalue_3.getBool();
                  boolean _notEquals_3 = (!Objects.equal(_bool, null));
                  if (_notEquals_3) {
                    EList<CompVarName> _name_1 = p.getName();
                    final Function1<CompVarName, String> _function_1 = (CompVarName it) -> {
                      return it.getName();
                    };
                    List<String> _map_1 = ListExtensions.<CompVarName, String>map(_name_1, _function_1);
                    String _join_1 = IterableExtensions.join(_map_1, ", ");
                    Value _pvalue_4 = p.getPvalue();
                    BoolValue _bool_1 = _pvalue_4.getBool();
                    String _value_1 = _bool_1.getValue();
                    String _string_2 = _value_1.toString();
                    String _setInitValue_1 = Utilities.setInitValue(_join_1, _string_2);
                    _builder.append(_setInitValue_1, "");
                  }
                }
              } else {
                EList<CompVarName> _name_2 = p.getName();
                final Function1<CompVarName, String> _function_2 = (CompVarName it) -> {
                  return it.getName();
                };
                List<String> _map_2 = ListExtensions.<CompVarName, String>map(_name_2, _function_2);
                String _join_2 = IterableExtensions.join(_map_2, ", ");
                _builder.append(_join_2, "");
                _builder.append(" ;");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public static String genCollectionClass(final String coltype, final SchedulerCollectionDef col, final String operationtype, final CompVarDef vars) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package sspinja.scheduling;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<ComparationName> _comp = col.getComp();
      int _size = _comp.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("\t");
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("import java.util.Collections;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("import java.util.Comparator;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("import java.util.Iterator;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t");
        _builder.append("//Automatic generation\t\t\t\t\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public class ProcessCollection");
        _builder.append(coltype, "\t");
        _builder.append(" extends SortedProcessCollectionBase {\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        HashSet<String> compareFunction = new HashSet<String>();
        _builder.newLineIfNotEmpty();
        {
          boolean _notEquals = (!Objects.equal(DataStructureGenerator.order, null));
          if (_notEquals) {
            {
              EList<ComparationDef> _compare = DataStructureGenerator.order.getCompare();
              boolean _notEquals_1 = (!Objects.equal(_compare, null));
              if (_notEquals_1) {
                {
                  EList<ComparationDef> _compare_1 = DataStructureGenerator.order.getCompare();
                  for(final ComparationDef com : _compare_1) {
                    {
                      ComparationName _cname = com.getCname();
                      String _name = _cname.getName();
                      boolean _contains = compareFunction.contains(_name);
                      boolean _not = (!_contains);
                      if (_not) {
                        _builder.append("\t\t");
                        _builder.append("//");
                        ComparationName _cname_1 = com.getCname();
                        String _name_1 = _cname_1.getName();
                        boolean _add = compareFunction.add(_name_1);
                        _builder.append(_add, "\t\t");
                        _builder.append("\t\t\t\t\t\t");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("private int compare_");
                        ComparationName _cname_2 = com.getCname();
                        String _name_2 = _cname_2.getName();
                        _builder.append(_name_2, "\t\t");
                        _builder.append("(Object _pn, Object _po) {");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("SchedulerProcess ");
                        scheduling.dsl.Process _process1 = com.getProcess1();
                        String _name_3 = _process1.getName();
                        _builder.append(_name_3, "\t\t\t");
                        _builder.append(" = (SchedulerProcess) _pn ;");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("SchedulerProcess ");
                        scheduling.dsl.Process _process2 = com.getProcess2();
                        String _name_4 = _process2.getName();
                        _builder.append(_name_4, "\t\t\t");
                        _builder.append(" = (SchedulerProcess) _po ;");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("//generate variables");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        CompVarDef _vars = DataStructureGenerator.order.getVars();
                        String _genVars = DataStructureGenerator.genVars(_vars);
                        _builder.append(_genVars, "\t\t\t");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\t\t");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.append("//generate code\t");
                        _builder.newLine();
                        {
                          EList<Statement> _statements = com.getStatements();
                          for(final Statement sta : _statements) {
                            _builder.append("\t\t");
                            _builder.append("\t");
                            CharSequence _dispatchStatement = Statements.dispatchStatement(sta, "");
                            _builder.append(_dispatchStatement, "\t\t\t");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                        _builder.append("\t\t");
                        _builder.append("}");
                        _builder.newLine();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public int compare(Object p_n, Object p_o) { ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("int result = 0;");
        _builder.newLine();
        {
          EList<ComparationName> _comp_1 = col.getComp();
          boolean _notEquals_2 = (!Objects.equal(_comp_1, null));
          if (_notEquals_2) {
            {
              EList<ComparationName> _comp_2 = col.getComp();
              for(final ComparationName colcomp : _comp_2) {
                _builder.append("\t\t\t");
                _builder.append("result = compare_");
                String _name_5 = colcomp.getName();
                _builder.append(_name_5, "\t\t\t");
                _builder.append("(p_n, p_o) ;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("if (result != 0) return result ;");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.newLine();
        {
          boolean _notEquals_3 = (!Objects.equal(operationtype, null));
          if (_notEquals_3) {
            {
              String _trim = operationtype.trim();
              boolean _isEmpty = _trim.isEmpty();
              boolean _not_1 = (!_isEmpty);
              if (_not_1) {
                _builder.append("\t\t\t");
                _builder.append("if (result == 0) {//");
                _builder.append(operationtype, "\t\t\t");
                _builder.newLineIfNotEmpty();
                {
                  String _trim_1 = operationtype.trim();
                  boolean _equals = _trim_1.equals("fifo");
                  if (_equals) {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("return -1 ; //fifo");
                    _builder.newLine();
                  }
                }
                {
                  String _trim_2 = operationtype.trim();
                  boolean _equals_1 = _trim_2.equals("lifo");
                  if (_equals_1) {
                    _builder.append("\t\t\t");
                    _builder.append("\t");
                    _builder.append("return 1 ; //lifo");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.append("return result ;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public int compare_without_fifo_or_lifo(Object p_n, Object p_o) { ");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("int result = 0;");
        _builder.newLine();
        {
          EList<ComparationName> _comp_3 = col.getComp();
          boolean _notEquals_4 = (!Objects.equal(_comp_3, null));
          if (_notEquals_4) {
            {
              EList<ComparationName> _comp_4 = col.getComp();
              for(final ComparationName colcomp_1 : _comp_4) {
                _builder.append("\t\t\t");
                _builder.append("result = compare_");
                String _name_6 = colcomp_1.getName();
                _builder.append(_name_6, "\t\t\t");
                _builder.append("(p_n, p_o) ;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("if (result != 0) return result ;");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("\t\t\t");
        _builder.append("return result ;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}\t");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t \t\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("@SuppressWarnings(\"unchecked\")");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public void put(ArrayList<SchedulerProcess> aL) {");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("put2DataSet((ArrayList<SchedulerProcess>) aL.clone());");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("public void put2DataSet(ArrayList<SchedulerProcess> aL){");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("ArrayList<ArrayList<SchedulerProcess>> setOfset = new ArrayList<ArrayList<SchedulerProcess>>() ;");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("for (SchedulerProcess p : aL) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("if (setOfset.isEmpty()) {");
        _builder.newLine();
        _builder.append("\t\t            ");
        _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess>() ;");
        _builder.newLine();
        _builder.append("\t\t            ");
        _builder.append("set.add(p) ;");
        _builder.newLine();
        _builder.append("\t\t            ");
        _builder.append("setOfset.add(set) ;");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("Iterator<ArrayList<SchedulerProcess>> iterator = setOfset.iterator();\t");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("int index = 0 ;");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("boolean added = false ;\t\t\t\t\t\t\t                ");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("while(iterator.hasNext() && !added){");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("ArrayList<SchedulerProcess> obj = iterator.next();\t");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("if (obj.size() > 0) { //toArray()[0] != null){");
        _builder.newLine();
        _builder.append("\t                        ");
        _builder.append("SchedulerProcess proc = (SchedulerProcess) obj.toArray()[0];");
        _builder.newLine();
        _builder.append("\t                        ");
        _builder.append("int com = compare_without_fifo_or_lifo(p, proc) ;");
        _builder.newLine();
        _builder.append("\t                        ");
        _builder.append("if (com < 0) {//continue");
        _builder.newLine();
        _builder.append("\t                            ");
        _builder.append("index ++ ;");
        _builder.newLine();
        _builder.append("\t                        ");
        _builder.append("} else {");
        _builder.newLine();
        _builder.append("\t\t                        ");
        _builder.append("if (com == 0) {\t\t                        \t");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("//add to set");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("obj.add(p);");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("//order by ID");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("Collections.sort(obj, new Comparator<SchedulerProcess>() {");
        _builder.newLine();
        _builder.append("\t\t                            \t");
        _builder.append("@Override");
        _builder.newLine();
        _builder.append("\t\t                            \t");
        _builder.append("public int compare(SchedulerProcess pn, SchedulerProcess po) {");
        _builder.newLine();
        _builder.append("\t\t                            \t\t");
        _builder.append("return pn.processID - po.processID;");
        _builder.newLine();
        _builder.append("\t\t                            \t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("});\t\t\t                            \t\t    \t");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("setOfset.set(index, obj) ;\t");
        _builder.newLine();
        _builder.append("\t\t                            ");
        _builder.append("added = true ;");
        _builder.newLine();
        _builder.append("\t\t                        ");
        _builder.append("} else {//insert here");
        _builder.newLine();
        _builder.append("\t\t                        \t");
        _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess> ();");
        _builder.newLine();
        _builder.append("\t\t        \t\t\t\t\t");
        _builder.append("set.add(p) ;");
        _builder.newLine();
        _builder.append("\t\t        \t\t\t\t\t");
        _builder.append("setOfset.add(index, set);");
        _builder.newLine();
        _builder.append("\t\t        \t\t\t\t\t");
        _builder.append("added = true ;");
        _builder.newLine();
        _builder.append("\t\t                        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t                        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("} else {//size == 0");
        _builder.newLine();
        _builder.append("\t                    \t");
        _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess> ();");
        _builder.newLine();
        _builder.append("\t    \t\t\t\t\t");
        _builder.append("set.add(p) ;");
        _builder.newLine();
        _builder.append("\t                    \t");
        _builder.append("setOfset.set(index,set) ;");
        _builder.newLine();
        _builder.append("\t                    \t");
        _builder.append("added = true ;");
        _builder.newLine();
        _builder.append("\t                    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("if (!added) {");
        _builder.newLine();
        _builder.append("\t\t                ");
        _builder.append("ArrayList<SchedulerProcess> set = new ArrayList<SchedulerProcess> ();");
        _builder.newLine();
        _builder.append("\t\t\t\t\t\t");
        _builder.append("set.add(p) ;");
        _builder.newLine();
        _builder.append("\t\t                ");
        _builder.append("setOfset.add(set);");
        _builder.newLine();
        _builder.append("\t                ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("}        ");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("this.dataSet.addAll(setOfset);");
        _builder.newLine();
        _builder.append("\t    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        {
          boolean _contains_1 = operationtype.contains("lifo");
          if (_contains_1) {
            _builder.append("//Automatic generation");
            _builder.newLine();
            _builder.append("public class ProcessCollection_");
            _builder.append(operationtype, "");
            _builder.append(" extends SortedProcessCollectionBase {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("@SuppressWarnings(\"unchecked\")");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public void put(ArrayList<SchedulerProcess> aL) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("this.dataSet.add((ArrayList<SchedulerProcess>) aL.clone());");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public int compare(Object pn, Object po) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("return 1 ; //lifo\t\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
          } else {
            {
              boolean _contains_2 = operationtype.contains("fifo");
              if (_contains_2) {
                _builder.append("//Automatic generation");
                _builder.newLine();
                _builder.append("public class ProcessCollection_");
                _builder.append(operationtype, "");
                _builder.append(" extends SortedProcessCollectionBase {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("@SuppressWarnings(\"unchecked\")");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public void put(ArrayList<SchedulerProcess> aL) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("this.dataSet.add((ArrayList<SchedulerProcess>) aL.clone());");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("public int compare(Object pn, Object po) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("return -1 ;\t//fifo\t\t\t\t");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
}
