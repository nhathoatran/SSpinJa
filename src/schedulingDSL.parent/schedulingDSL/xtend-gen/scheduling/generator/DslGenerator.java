/**
 * generated by Xtext 2.10.0
 */
package scheduling.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import scheduling.dsl.Generate;
import scheduling.dsl.Model;
import scheduling.dsl.ProcessConfiguration;
import scheduling.dsl.ProcessDSL;
import scheduling.dsl.SchedulerDSL;
import scheduling.dsl.SchedulerDef;
import scheduling.dsl.TestDSL;
import scheduling.generator.Data;
import scheduling.generator.DataStructureGenerator;
import scheduling.generator.GenerationGenerator;
import scheduling.generator.ProcessConfigurationGenerator;
import scheduling.generator.ProcessGenerator;
import scheduling.generator.SchedulerGenerator;
import scheduling.generator.SchedulerTestGenerator;
import scheduling.generator.Test;
import scheduling.generator.Utilities;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<String> genFiles = new ArrayList<String>();
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Data.model = ((Model) _head);
    EList<EObject> _contents_1 = resource.getContents();
    EObject _head_1 = IterableExtensions.<EObject>head(_contents_1);
    Test.model = ((Model) _head_1);
    TestDSL _test = Data.model.getTest();
    boolean _notEquals = (!Objects.equal(_test, null));
    if (_notEquals) {
      TestDSL _test_1 = Data.model.getTest();
      Test.init(_test_1);
      CharSequence _TesttoPromelaCode = SchedulerTestGenerator.TesttoPromelaCode();
      fsa.generateFile("../src/sspinja/scheduling/_test/checking.code", _TesttoPromelaCode);
      genFiles.add("../src/sspinja/scheduling/_test/checking.code");
    }
    boolean _notEquals_1 = (!Objects.equal(Data.model, null));
    if (_notEquals_1) {
      ProcessConfiguration _processconfig = Data.model.getProcessconfig();
      boolean _notEquals_2 = (!Objects.equal(_processconfig, null));
      if (_notEquals_2) {
        ProcessConfiguration _processconfig_1 = Data.model.getProcessconfig();
        Data.procConfig = _processconfig_1;
        ProcessConfigurationGenerator.genConfiguration(Data.procConfig);
        String _name = Data.procConfig.getName();
        final String name = ("../generate/" + _name);
        int index = 0;
        for (final String ass : ProcessConfigurationGenerator.assignConfigList) {
          {
            CharSequence _ProcessConfigurationtoJavaCode = ProcessConfigurationGenerator.ProcessConfigurationtoJavaCode(Data.procConfig, ass, index);
            fsa.generateFile((((name + "_") + Integer.valueOf(index)) + ".proc"), _ProcessConfigurationtoJavaCode);
            index++;
          }
        }
        CharSequence _ProcessModeltoJavaCode = ProcessConfigurationGenerator.ProcessModeltoJavaCode(Data.procConfig);
        fsa.generateFile((name + ".proc.pml"), _ProcessModeltoJavaCode);
        CharSequence _ProcessConfigurationResumetoJavaCode = ProcessConfigurationGenerator.ProcessConfigurationResumetoJavaCode(name);
        fsa.generateFile((name + ".conf.result"), _ProcessConfigurationResumetoJavaCode);
        return;
      }
      ProcessDSL _proc = Data.model.getProc();
      boolean _notEquals_3 = (!Objects.equal(_proc, null));
      if (_notEquals_3) {
        ProcessDSL _proc_1 = Data.model.getProc();
        Data.procModel = _proc_1;
      }
      SchedulerDSL _sch = Data.model.getSch();
      boolean _notEquals_4 = (!Objects.equal(_sch, null));
      if (_notEquals_4) {
        SchedulerDSL _sch_1 = Data.model.getSch();
        Data.schModel = _sch_1;
      }
    }
    if (((!Objects.equal(Data.schModel, null)) && (!Objects.equal(Data.procModel, null)))) {
      SchedulerDef _scheduler = Data.schModel.getScheduler();
      boolean _notEquals_5 = (!Objects.equal(_scheduler, null));
      if (_notEquals_5) {
        Data.init(Data.procModel, Data.schModel);
        GenerationGenerator.initIndexValue(Data.schModel);
        Utilities.deleteGeneratedFiles(fsa);
        DataStructureGenerator.genDataStructure(fsa, Data.schModel, genFiles);
        CharSequence _SporadicProcesstoJavaCode = ProcessGenerator.SporadicProcesstoJavaCode(Data.procModel);
        fsa.generateFile("../src/sspinja/scheduling/schedulerinfo.dat", _SporadicProcesstoJavaCode);
        genFiles.add("schedulerinfo.dat");
        SchedulerDef _scheduler_1 = Data.schModel.getScheduler();
        Generate _gen = _scheduler_1.getGen();
        boolean _notEquals_6 = (!Objects.equal(_gen, null));
        if (_notEquals_6) {
          CharSequence _GenerationtoJavaCode = GenerationGenerator.GenerationtoJavaCode(Data.schModel);
          fsa.generateFile("../src/sspinja/scheduling/Generate.java", _GenerationtoJavaCode);
          genFiles.add("Generate.java");
        }
        CharSequence _GenerateCodetoJavaCode = GenerationGenerator.GenerateCodetoJavaCode(Data.schModel);
        fsa.generateFile("../src/sspinja/scheduling/Code.java", _GenerateCodetoJavaCode);
        genFiles.add("Code.java");
        CharSequence _ProcessBasetoJavaCode = ProcessGenerator.ProcessBasetoJavaCode();
        fsa.generateFile("../src/sspinja/scheduling/SchedulerProcessBase.java", _ProcessBasetoJavaCode);
        CharSequence _ProcesstoJavaCode = ProcessGenerator.ProcesstoJavaCode(Data.procModel);
        fsa.generateFile("../src/sspinja/scheduling/SchedulerProcess.java", _ProcesstoJavaCode);
        String _name_1 = Data.procModel.getName();
        String _plus = (("../src/sspinja/scheduling/" + "SchedulerProcess_") + _name_1);
        String _plus_1 = (_plus + ".java");
        CharSequence _ProcessDSLtoJavaCode = ProcessGenerator.ProcessDSLtoJavaCode(Data.procModel, Data.schModel);
        fsa.generateFile(_plus_1, _ProcessDSLtoJavaCode);
        genFiles.add("SchedulerProcessBase.java");
        genFiles.add("SchedulerProcess.java");
        String _name_2 = Data.procModel.getName();
        String _plus_2 = ("SchedulerProcess_" + _name_2);
        String _plus_3 = (_plus_2 + ".java");
        genFiles.add(_plus_3);
        CharSequence _StaticPropertytoJavaCode = SchedulerGenerator.StaticPropertytoJavaCode(Data.schModel);
        fsa.generateFile("../src/sspinja/scheduling/StaticProperty.java", _StaticPropertytoJavaCode);
        SchedulerDef _scheduler_2 = Data.schModel.getScheduler();
        String _name_3 = _scheduler_2.getName();
        String _plus_4 = ("../src/sspinja/scheduling/StaticProperty_" + _name_3);
        String _plus_5 = (_plus_4 + ".java");
        CharSequence _StaticPropertyDSLtoJavaCode = SchedulerGenerator.StaticPropertyDSLtoJavaCode(Data.procModel, Data.schModel);
        fsa.generateFile(_plus_5, _StaticPropertyDSLtoJavaCode);
        genFiles.add("StaticProperty.java");
        SchedulerDef _scheduler_3 = Data.schModel.getScheduler();
        String _name_4 = _scheduler_3.getName();
        String _plus_6 = ("StaticProperty_" + _name_4);
        String _plus_7 = (_plus_6 + ".java");
        genFiles.add(_plus_7);
        CharSequence _SchedulertoJavaCode = SchedulerGenerator.SchedulertoJavaCode(Data.procModel, Data.schModel);
        fsa.generateFile("../src/sspinja/scheduling/SchedulerObject.java", _SchedulertoJavaCode);
        SchedulerDef _scheduler_4 = Data.schModel.getScheduler();
        String _name_5 = _scheduler_4.getName();
        String _plus_8 = ("../src/sspinja/scheduling/SchedulerObject_" + _name_5);
        String _plus_9 = (_plus_8 + ".java");
        CharSequence _SchedulerDSLtoJavaCode = SchedulerGenerator.SchedulerDSLtoJavaCode(Data.procModel, Data.schModel);
        fsa.generateFile(_plus_9, _SchedulerDSLtoJavaCode);
        genFiles.add("SchedulerObject.java");
        SchedulerDef _scheduler_5 = Data.schModel.getScheduler();
        String _name_6 = _scheduler_5.getName();
        String _plus_10 = ("SchedulerObject_" + _name_6);
        String _plus_11 = (_plus_10 + ".java");
        genFiles.add(_plus_11);
        CharSequence _SchedulerStatetoJavaCode = SchedulerGenerator.SchedulerStatetoJavaCode(Data.schModel);
        fsa.generateFile("../src/sspinja/scheduling/SchedulerState.java", _SchedulerStatetoJavaCode);
        CharSequence _CTLFormulatoJavaCode = SchedulerGenerator.CTLFormulatoJavaCode(Data.schModel);
        fsa.generateFile("../src/sspinja/scheduling/CTLFormula.java", _CTLFormulatoJavaCode);
        genFiles.add("SchedulerState.java");
        genFiles.add("CTLFormula.java");
        String _VerifierToJavaCode = SchedulerGenerator.VerifierToJavaCode();
        fsa.generateFile("../src/sspinja/verifier/Verifier.java", _VerifierToJavaCode);
        String _SimulatorToJavaCode = SchedulerGenerator.SimulatorToJavaCode();
        fsa.generateFile("../src/sspinja/simulator/Simulator.java", _SimulatorToJavaCode);
        Test.schModel = Data.schModel;
        Test.procModel = Data.procModel;
        Data.schModel = null;
        Data.procModel = null;
        String _string = genFiles.toString();
        String _replace = _string.replace("[", "");
        String _replace_1 = _replace.replace("]", "");
        fsa.generateFile("../src/file.dat", _replace_1);
        JOptionPane.showMessageDialog(null, 
          (("Generate scheduling information in sspinja.scheduling; \n" + 
            "Generate simulator in sspinja.simulator; \n") + 
            "Generate verifier in sspinja.verifier; \n"), 
          "INFORMATION MESSAGE", 
          JOptionPane.INFORMATION_MESSAGE);
        String _string_1 = genFiles.toString();
        System.out.println(_string_1);
        System.out.println("Gen finished!");
      }
    }
  }
}
