/*
 * generated by Xtext 2.10.0
 */
package scheduling.generator

import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import scheduling.dsl.Model

import static scheduling.generator.Data.*
import static scheduling.generator.Test.*
import javax.swing.JOptionPane

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var ArrayList<String> genFiles	= new ArrayList<String>	
		Data.model = resource.contents.head as Model
		Test.model = resource.contents.head as Model
		
    	
		if (Data.model.test != null) {			
			Test.init(Data.model.test)
			
//			if (Data.model.test.specification.decl_sch != null){
//				System.out.println("Gen test with scheduler")	
//				System.out.println("Using process model")			
//				if (Test.procModel != null) { 
//					System.out.println("process model = " + Test.procModel)					
//					fsa.generateFile("../sspinja/_test/checking.code", SchedulerTestGenerator.TesttoPromelaCode())							
//				} else {
//					System.out.println("process model = null")
//					System.out.println("Gen -> fail")
//				}				
//											
//			} else {	
//				System.out.println("Gen test without scheduler")	
						
				fsa.generateFile("../src/sspinja/scheduling/_test/checking.code", SchedulerTestGenerator.TesttoPromelaCode())	
				genFiles += "../src/sspinja/scheduling/_test/checking.code"
//			}		
			
		}
			
		if (Data.model != null) {
			if (Data.model.processconfig != null) {
				Data.procConfig = Data.model.processconfig
				ProcessConfigurationGenerator.genConfiguration(Data.procConfig)
				//val name = "../policies/gen/"+ name + "/" + Data.procConfig.name
				val name = "../generate/" + Data.procConfig.name
				var index=0
				for (ass : ProcessConfigurationGenerator.assignConfigList) {
					fsa.generateFile(name + '_' + (index) + ".proc", 
						ProcessConfigurationGenerator.ProcessConfigurationtoJavaCode(Data.procConfig, ass, index)
					)
					index++
				}
				fsa.generateFile(name + ".proc.pml", 
						ProcessConfigurationGenerator.ProcessModeltoJavaCode(Data.procConfig)
					)	
				fsa.generateFile(name + ".conf.result", 
						ProcessConfigurationGenerator.ProcessConfigurationResumetoJavaCode(name)
					)				
				return
			}
			if (Data.model.proc != null) { 
				Data.procModel = Data.model.proc  //save the process model
			}		
				
			if (Data.model.sch != null) {	
				Data.schModel = Data.model.sch
			}
		} 
		
		if (Data.schModel != null && Data.procModel != null) {
//			System.out.println("Data.procModel : " + Data.procModel + ", Data.schModel : " + Data.schModel)			
//			System.out.println("--------------------")	
			if (Data.schModel.scheduler != null) {
				Data.init(Data.procModel, Data.schModel)
				GenerationGenerator.initIndexValue(Data.schModel)		
				Utilities.deleteGeneratedFiles(fsa)
				
				
				DataStructureGenerator.genDataStructure(fsa, Data.schModel, genFiles)
				//will check the runTime (Data.sporadicTime =?)
//				if (ProcessGenerator.getsporadicProcessList(Data.procModel)) {
//					fsa.generateFile("../src/sspinja/scheduling/schedulerinfo.dat", ProcessGenerator.SporadicProcesstoJavaCode(Data.procModel))
//				}
				fsa.generateFile("../src/sspinja/scheduling/schedulerinfo.dat", ProcessGenerator.SporadicProcesstoJavaCode(Data.procModel))
				genFiles.add("schedulerinfo.dat")
				if (Data.schModel.scheduler.gen != null) {
					fsa.generateFile("../src/sspinja/scheduling/Generate.java", GenerationGenerator.GenerationtoJavaCode(Data.schModel))
					genFiles.add("Generate.java")
				}
				fsa.generateFile("../src/sspinja/scheduling/Code.java", GenerationGenerator.GenerateCodetoJavaCode(Data.schModel))
				genFiles.add("Code.java")
				
				fsa.generateFile("../src/sspinja/scheduling/SchedulerProcessBase.java", ProcessGenerator.ProcessBasetoJavaCode())
				fsa.generateFile("../src/sspinja/scheduling/SchedulerProcess.java", ProcessGenerator.ProcesstoJavaCode(Data.procModel))				
				fsa.generateFile("../src/sspinja/scheduling/" + "SchedulerProcess_" + Data.procModel.name + ".java", ProcessGenerator.ProcessDSLtoJavaCode(Data.procModel, Data.schModel))
				genFiles.add("SchedulerProcessBase.java")
				genFiles.add("SchedulerProcess.java")
				genFiles.add("SchedulerProcess_" + Data.procModel.name + ".java")
				
				fsa.generateFile("../src/sspinja/scheduling/StaticProperty.java", SchedulerGenerator.StaticPropertytoJavaCode(Data.schModel))
				fsa.generateFile("../src/sspinja/scheduling/StaticProperty_" + Data.schModel.scheduler.name + ".java", SchedulerGenerator.StaticPropertyDSLtoJavaCode(Data.procModel,Data.schModel))
				genFiles.add("StaticProperty.java")
				genFiles.add("StaticProperty_" + Data.schModel.scheduler.name + ".java")
				
				
				fsa.generateFile("../src/sspinja/scheduling/SchedulerObject.java", SchedulerGenerator.SchedulertoJavaCode(Data.procModel,Data.schModel))
				fsa.generateFile("../src/sspinja/scheduling/SchedulerObject_" + Data.schModel.scheduler.name + ".java", SchedulerGenerator.SchedulerDSLtoJavaCode(Data.procModel,Data.schModel))
				genFiles.add("SchedulerObject.java")
				genFiles.add("SchedulerObject_" + Data.schModel.scheduler.name + ".java")
				
				fsa.generateFile("../src/sspinja/scheduling/SchedulerState.java", SchedulerGenerator.SchedulerStatetoJavaCode(Data.schModel)) //for verify CTL formula
				fsa.generateFile("../src/sspinja/scheduling/CTLFormula.java", SchedulerGenerator.CTLFormulatoJavaCode(Data.schModel)) //for verify CTL formula
				genFiles.add("SchedulerState.java")
				genFiles.add("CTLFormula.java")
				
	//			fsa.generateFile("../src/sspinja/scheduling/proc.dat", ProcessDatatoJavaCode())	
	//			fsa.generateFile("../src/sspinja/scheduling/sch.dat", SchedulerDatatoJavaCode())
	//			fsa.generateFile("../src/sspinja/scheduling/this.dat", ThisProcessDatatoJavaCode())
	//			fsa.generateFile("../src/sspinja/scheduling/sporadic.dat", SporadicProcesstoJavaCode())
				
				fsa.generateFile("../src/sspinja/verifier/Verifier.java", SchedulerGenerator.VerifierToJavaCode())	
				fsa.generateFile("../src/sspinja/simulator/Simulator.java", SchedulerGenerator.SimulatorToJavaCode())	
				
				Test.schModel = Data.schModel
				Test.procModel = Data.procModel
				
				Data.schModel = null 
				Data.procModel = null
				
				fsa.generateFile("../src/file.dat", genFiles.toString().replace("[","").replace("]",""))
				
				JOptionPane.showMessageDialog(null, 
						"Generate scheduling information in sspinja.scheduling; \n" +
						"Generate simulator in sspinja.simulator; \n" +
						"Generate verifier in sspinja.verifier; \n", 
                        "INFORMATION MESSAGE", 
                        JOptionPane.INFORMATION_MESSAGE);
				
				System.out.println(genFiles.toString())
				System.out.println("Gen finished!")
			} 	
		}
				
	}
}
